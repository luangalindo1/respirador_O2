
SPRINT 4 - Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  0080010e  0080010e  0000151a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2e  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc1  00000000  00000000  00002d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00003af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008841  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000874  00000000  00000000  0000c711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000cf85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002fd7  00000000  00000000  0000d035  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_2>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 e7       	ldi	r30, 0x78	; 120
     25c:	f4 e1       	ldi	r31, 0x14	; 20
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ae 30       	cpi	r26, 0x0E	; 14
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ae e0       	ldi	r26, 0x0E	; 14
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a1 31       	cpi	r26, 0x11	; 17
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <main>
     27e:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
uint8_t FreqRespiracao = 5; // Definir um valor inicial
uint8_t bpm = 0;
uint32_t tempo_ms = 0;

ISR(INT0_vect) // interrupção externa 0, quando o botão é pressionado, a freq aumenta
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	2e 97       	sbiw	r28, 0x0e	; 14
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	cd bf       	out	0x3d, r28	; 61
	if (FreqRespiracao < 30)
     2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2bc:	8e 31       	cpi	r24, 0x1E	; 30
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <__vector_1+0x3c>
     2c0:	8b c0       	rjmp	.+278    	; 0x3d8 <__vector_1+0x152>
	{
		while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     2c2:	7f c0       	rjmp	.+254    	; 0x3c2 <__vector_1+0x13c>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	a6 e1       	ldi	r26, 0x16	; 22
     2ca:	b3 e4       	ldi	r27, 0x43	; 67
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	9a 83       	std	Y+2, r25	; 0x02
     2d0:	ab 83       	std	Y+3, r26	; 0x03
     2d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	4a e7       	ldi	r20, 0x7A	; 122
     2da:	55 e4       	ldi	r21, 0x45	; 69
     2dc:	69 81       	ldd	r22, Y+1	; 0x01
     2de:	7a 81       	ldd	r23, Y+2	; 0x02
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	9c 81       	ldd	r25, Y+4	; 0x04
     2e4:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     2e8:	dc 01       	movw	r26, r24
     2ea:	cb 01       	movw	r24, r22
     2ec:	8d 83       	std	Y+5, r24	; 0x05
     2ee:	9e 83       	std	Y+6, r25	; 0x06
     2f0:	af 83       	std	Y+7, r26	; 0x07
     2f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e8       	ldi	r20, 0x80	; 128
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	6d 81       	ldd	r22, Y+5	; 0x05
     2fe:	7e 81       	ldd	r23, Y+6	; 0x06
     300:	8f 81       	ldd	r24, Y+7	; 0x07
     302:	98 85       	ldd	r25, Y+8	; 0x08
     304:	0e 94 92 08 	call	0x1124	; 0x1124 <__cmpsf2>
     308:	88 23       	and	r24, r24
     30a:	2c f4       	brge	.+10     	; 0x316 <__vector_1+0x90>
		__ticks = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	89 87       	std	Y+9, r24	; 0x09
     314:	3f c0       	rjmp	.+126    	; 0x394 <__vector_1+0x10e>
	else if (__tmp > 65535)
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	3f ef       	ldi	r19, 0xFF	; 255
     31a:	4f e7       	ldi	r20, 0x7F	; 127
     31c:	57 e4       	ldi	r21, 0x47	; 71
     31e:	6d 81       	ldd	r22, Y+5	; 0x05
     320:	7e 81       	ldd	r23, Y+6	; 0x06
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	0e 94 13 09 	call	0x1226	; 0x1226 <__gesf2>
     32a:	18 16       	cp	r1, r24
     32c:	4c f5       	brge	.+82     	; 0x380 <__vector_1+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e2       	ldi	r20, 0x20	; 32
     334:	51 e4       	ldi	r21, 0x41	; 65
     336:	69 81       	ldd	r22, Y+1	; 0x01
     338:	7a 81       	ldd	r23, Y+2	; 0x02
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	9a 87       	std	Y+10, r25	; 0x0a
     354:	89 87       	std	Y+9, r24	; 0x09
     356:	0f c0       	rjmp	.+30     	; 0x376 <__vector_1+0xf0>
     358:	80 e9       	ldi	r24, 0x90	; 144
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	9c 87       	std	Y+12, r25	; 0x0c
     35e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     360:	8b 85       	ldd	r24, Y+11	; 0x0b
     362:	9c 85       	ldd	r25, Y+12	; 0x0c
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <__vector_1+0xde>
     368:	9c 87       	std	Y+12, r25	; 0x0c
     36a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36c:	89 85       	ldd	r24, Y+9	; 0x09
     36e:	9a 85       	ldd	r25, Y+10	; 0x0a
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	9a 87       	std	Y+10, r25	; 0x0a
     374:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     376:	89 85       	ldd	r24, Y+9	; 0x09
     378:	9a 85       	ldd	r25, Y+10	; 0x0a
     37a:	89 2b       	or	r24, r25
     37c:	69 f7       	brne	.-38     	; 0x358 <__vector_1+0xd2>
     37e:	14 c0       	rjmp	.+40     	; 0x3a8 <__vector_1+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     380:	6d 81       	ldd	r22, Y+5	; 0x05
     382:	7e 81       	ldd	r23, Y+6	; 0x06
     384:	8f 81       	ldd	r24, Y+7	; 0x07
     386:	98 85       	ldd	r25, Y+8	; 0x08
     388:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9a 87       	std	Y+10, r25	; 0x0a
     392:	89 87       	std	Y+9, r24	; 0x09
     394:	89 85       	ldd	r24, Y+9	; 0x09
     396:	9a 85       	ldd	r25, Y+10	; 0x0a
     398:	9e 87       	std	Y+14, r25	; 0x0e
     39a:	8d 87       	std	Y+13, r24	; 0x0d
     39c:	8d 85       	ldd	r24, Y+13	; 0x0d
     39e:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <__vector_1+0x11a>
     3a4:	9e 87       	std	Y+14, r25	; 0x0e
     3a6:	8d 87       	std	Y+13, r24	; 0x0d
		{
			_delay_ms(150);
			if (FreqRespiracao < 30)
     3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3ac:	8e 31       	cpi	r24, 0x1E	; 30
     3ae:	28 f4       	brcc	.+10     	; 0x3ba <__vector_1+0x134>
				FreqRespiracao++;
     3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
     3b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			showResp3(FreqRespiracao);
     3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3be:	0e 94 39 04 	call	0x872	; 0x872 <showResp3>

ISR(INT0_vect) // interrupção externa 0, quando o botão é pressionado, a freq aumenta
{
	if (FreqRespiracao < 30)
	{
		while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     3c2:	89 e2       	ldi	r24, 0x29	; 41
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	88 2f       	mov	r24, r24
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	84 70       	andi	r24, 0x04	; 4
     3d0:	99 27       	eor	r25, r25
     3d2:	89 2b       	or	r24, r25
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <__vector_1+0x152>
     3d6:	76 cf       	rjmp	.-276    	; 0x2c4 <__vector_1+0x3e>
			if (FreqRespiracao < 30)
				FreqRespiracao++;
			showResp3(FreqRespiracao);
		}
	}
}
     3d8:	00 00       	nop
     3da:	2e 96       	adiw	r28, 0x0e	; 14
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	ff 91       	pop	r31
     3ec:	ef 91       	pop	r30
     3ee:	bf 91       	pop	r27
     3f0:	af 91       	pop	r26
     3f2:	9f 91       	pop	r25
     3f4:	8f 91       	pop	r24
     3f6:	7f 91       	pop	r23
     3f8:	6f 91       	pop	r22
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <__vector_2>:
ISR(INT1_vect) // interrupção externa 1, quando o botão é pressionado, a freq diminui
{
     40e:	1f 92       	push	r1
     410:	0f 92       	push	r0
     412:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	4f 93       	push	r20
     420:	5f 93       	push	r21
     422:	6f 93       	push	r22
     424:	7f 93       	push	r23
     426:	8f 93       	push	r24
     428:	9f 93       	push	r25
     42a:	af 93       	push	r26
     42c:	bf 93       	push	r27
     42e:	ef 93       	push	r30
     430:	ff 93       	push	r31
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	2e 97       	sbiw	r28, 0x0e	; 14
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	cd bf       	out	0x3d, r28	; 61
	if (FreqRespiracao > 5)
     440:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     444:	86 30       	cpi	r24, 0x06	; 6
     446:	08 f4       	brcc	.+2      	; 0x44a <__vector_2+0x3c>
     448:	8b c0       	rjmp	.+278    	; 0x560 <__vector_2+0x152>
	{
		while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     44a:	7f c0       	rjmp	.+254    	; 0x54a <__vector_2+0x13c>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	a6 e1       	ldi	r26, 0x16	; 22
     452:	b3 e4       	ldi	r27, 0x43	; 67
     454:	89 83       	std	Y+1, r24	; 0x01
     456:	9a 83       	std	Y+2, r25	; 0x02
     458:	ab 83       	std	Y+3, r26	; 0x03
     45a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	4a e7       	ldi	r20, 0x7A	; 122
     462:	55 e4       	ldi	r21, 0x45	; 69
     464:	69 81       	ldd	r22, Y+1	; 0x01
     466:	7a 81       	ldd	r23, Y+2	; 0x02
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	9c 81       	ldd	r25, Y+4	; 0x04
     46c:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	8d 83       	std	Y+5, r24	; 0x05
     476:	9e 83       	std	Y+6, r25	; 0x06
     478:	af 83       	std	Y+7, r26	; 0x07
     47a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e8       	ldi	r20, 0x80	; 128
     482:	5f e3       	ldi	r21, 0x3F	; 63
     484:	6d 81       	ldd	r22, Y+5	; 0x05
     486:	7e 81       	ldd	r23, Y+6	; 0x06
     488:	8f 81       	ldd	r24, Y+7	; 0x07
     48a:	98 85       	ldd	r25, Y+8	; 0x08
     48c:	0e 94 92 08 	call	0x1124	; 0x1124 <__cmpsf2>
     490:	88 23       	and	r24, r24
     492:	2c f4       	brge	.+10     	; 0x49e <__vector_2+0x90>
		__ticks = 1;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9a 87       	std	Y+10, r25	; 0x0a
     49a:	89 87       	std	Y+9, r24	; 0x09
     49c:	3f c0       	rjmp	.+126    	; 0x51c <__vector_2+0x10e>
	else if (__tmp > 65535)
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	3f ef       	ldi	r19, 0xFF	; 255
     4a2:	4f e7       	ldi	r20, 0x7F	; 127
     4a4:	57 e4       	ldi	r21, 0x47	; 71
     4a6:	6d 81       	ldd	r22, Y+5	; 0x05
     4a8:	7e 81       	ldd	r23, Y+6	; 0x06
     4aa:	8f 81       	ldd	r24, Y+7	; 0x07
     4ac:	98 85       	ldd	r25, Y+8	; 0x08
     4ae:	0e 94 13 09 	call	0x1226	; 0x1226 <__gesf2>
     4b2:	18 16       	cp	r1, r24
     4b4:	4c f5       	brge	.+82     	; 0x508 <__vector_2+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e2       	ldi	r20, 0x20	; 32
     4bc:	51 e4       	ldi	r21, 0x41	; 65
     4be:	69 81       	ldd	r22, Y+1	; 0x01
     4c0:	7a 81       	ldd	r23, Y+2	; 0x02
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	bc 01       	movw	r22, r24
     4d0:	cd 01       	movw	r24, r26
     4d2:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	9a 87       	std	Y+10, r25	; 0x0a
     4dc:	89 87       	std	Y+9, r24	; 0x09
     4de:	0f c0       	rjmp	.+30     	; 0x4fe <__vector_2+0xf0>
     4e0:	80 e9       	ldi	r24, 0x90	; 144
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	9c 87       	std	Y+12, r25	; 0x0c
     4e6:	8b 87       	std	Y+11, r24	; 0x0b
     4e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <__vector_2+0xde>
     4f0:	9c 87       	std	Y+12, r25	; 0x0c
     4f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f4:	89 85       	ldd	r24, Y+9	; 0x09
     4f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	9a 87       	std	Y+10, r25	; 0x0a
     4fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fe:	89 85       	ldd	r24, Y+9	; 0x09
     500:	9a 85       	ldd	r25, Y+10	; 0x0a
     502:	89 2b       	or	r24, r25
     504:	69 f7       	brne	.-38     	; 0x4e0 <__vector_2+0xd2>
     506:	14 c0       	rjmp	.+40     	; 0x530 <__vector_2+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     508:	6d 81       	ldd	r22, Y+5	; 0x05
     50a:	7e 81       	ldd	r23, Y+6	; 0x06
     50c:	8f 81       	ldd	r24, Y+7	; 0x07
     50e:	98 85       	ldd	r25, Y+8	; 0x08
     510:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	9a 87       	std	Y+10, r25	; 0x0a
     51a:	89 87       	std	Y+9, r24	; 0x09
     51c:	89 85       	ldd	r24, Y+9	; 0x09
     51e:	9a 85       	ldd	r25, Y+10	; 0x0a
     520:	9e 87       	std	Y+14, r25	; 0x0e
     522:	8d 87       	std	Y+13, r24	; 0x0d
     524:	8d 85       	ldd	r24, Y+13	; 0x0d
     526:	9e 85       	ldd	r25, Y+14	; 0x0e
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <__vector_2+0x11a>
     52c:	9e 87       	std	Y+14, r25	; 0x0e
     52e:	8d 87       	std	Y+13, r24	; 0x0d
		{
			_delay_ms(150);
			if (FreqRespiracao > 5)
     530:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     534:	86 30       	cpi	r24, 0x06	; 6
     536:	28 f0       	brcs	.+10     	; 0x542 <__vector_2+0x134>
				FreqRespiracao--;
     538:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			showResp3(FreqRespiracao);
     542:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     546:	0e 94 39 04 	call	0x872	; 0x872 <showResp3>
}
ISR(INT1_vect) // interrupção externa 1, quando o botão é pressionado, a freq diminui
{
	if (FreqRespiracao > 5)
	{
		while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     54a:	89 e2       	ldi	r24, 0x29	; 41
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	88 2f       	mov	r24, r24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	88 70       	andi	r24, 0x08	; 8
     558:	99 27       	eor	r25, r25
     55a:	89 2b       	or	r24, r25
     55c:	09 f4       	brne	.+2      	; 0x560 <__vector_2+0x152>
     55e:	76 cf       	rjmp	.-276    	; 0x44c <__vector_2+0x3e>
			if (FreqRespiracao > 5)
				FreqRespiracao--;
			showResp3(FreqRespiracao);
		}
	}
}
     560:	00 00       	nop
     562:	2e 96       	adiw	r28, 0x0e	; 14
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	ff 91       	pop	r31
     574:	ef 91       	pop	r30
     576:	bf 91       	pop	r27
     578:	af 91       	pop	r26
     57a:	9f 91       	pop	r25
     57c:	8f 91       	pop	r24
     57e:	7f 91       	pop	r23
     580:	6f 91       	pop	r22
     582:	5f 91       	pop	r21
     584:	4f 91       	pop	r20
     586:	3f 91       	pop	r19
     588:	2f 91       	pop	r18
     58a:	0f 90       	pop	r0
     58c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     590:	0f 90       	pop	r0
     592:	1f 90       	pop	r1
     594:	18 95       	reti

00000596 <__vector_14>:
ISR(TIMER0_COMPA_vect) // interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
{
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	PORTD ^= 0b00000001;
     5ba:	8b e2       	ldi	r24, 0x2B	; 43
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	2b e2       	ldi	r18, 0x2B	; 43
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	30 81       	ld	r19, Z
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	23 27       	eor	r18, r19
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
	tempo_ms++;
     5ce:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tempo_ms>
     5d2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tempo_ms+0x1>
     5d6:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tempo_ms+0x2>
     5da:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tempo_ms+0x3>
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	a1 1d       	adc	r26, r1
     5e2:	b1 1d       	adc	r27, r1
     5e4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tempo_ms>
     5e8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <tempo_ms+0x1>
     5ec:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <tempo_ms+0x2>
     5f0:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <tempo_ms+0x3>
}
     5f4:	00 00       	nop
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <__vector_5>:
ISR(PCINT2_vect)
{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	ef 93       	push	r30
     638:	ff 93       	push	r31
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
	static uint32_t catch_tempo; // variável para capturar o tempo anterior
	
	if(!(PIND & (1<<1)))
     642:	89 e2       	ldi	r24, 0x29	; 41
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	82 70       	andi	r24, 0x02	; 2
     650:	99 27       	eor	r25, r25
     652:	89 2b       	or	r24, r25
     654:	81 f5       	brne	.+96     	; 0x6b6 <__vector_5+0xa0>
	{
		bpm = (1000*60/(tempo_ms - catch_tempo));
     656:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <tempo_ms>
     65a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <tempo_ms+0x1>
     65e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <tempo_ms+0x2>
     662:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <tempo_ms+0x3>
     666:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <catch_tempo.1945>
     66a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <catch_tempo.1945+0x1>
     66e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <catch_tempo.1945+0x2>
     672:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <catch_tempo.1945+0x3>
     676:	28 1b       	sub	r18, r24
     678:	39 0b       	sbc	r19, r25
     67a:	4a 0b       	sbc	r20, r26
     67c:	5b 0b       	sbc	r21, r27
     67e:	80 e6       	ldi	r24, 0x60	; 96
     680:	9a ee       	ldi	r25, 0xEA	; 234
     682:	af ef       	ldi	r26, 0xFF	; 255
     684:	bf ef       	ldi	r27, 0xFF	; 255
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	0e 94 b9 09 	call	0x1372	; 0x1372 <__udivmodsi4>
     68e:	da 01       	movw	r26, r20
     690:	c9 01       	movw	r24, r18
     692:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
		catch_tempo = tempo_ms; // "Capturando" o tempo atual
     696:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tempo_ms>
     69a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tempo_ms+0x1>
     69e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tempo_ms+0x2>
     6a2:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tempo_ms+0x3>
     6a6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <catch_tempo.1945>
     6aa:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <catch_tempo.1945+0x1>
     6ae:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <catch_tempo.1945+0x2>
     6b2:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <catch_tempo.1945+0x3>
	}
}
     6b6:	00 00       	nop
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	ff 91       	pop	r31
     6be:	ef 91       	pop	r30
     6c0:	bf 91       	pop	r27
     6c2:	af 91       	pop	r26
     6c4:	9f 91       	pop	r25
     6c6:	8f 91       	pop	r24
     6c8:	7f 91       	pop	r23
     6ca:	6f 91       	pop	r22
     6cc:	5f 91       	pop	r21
     6ce:	4f 91       	pop	r20
     6d0:	3f 91       	pop	r19
     6d2:	2f 91       	pop	r18
     6d4:	0f 90       	pop	r0
     6d6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <main>:
int main(void)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
	DDRD  = 0b00000001; // PD1..4 = ENTRADA, PD0 = SAÍDA - alt. 0x00 sem &
     6e8:	8a e2       	ldi	r24, 0x2A	; 42
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	fc 01       	movw	r30, r24
     6f0:	20 83       	st	Z, r18
	PORTD = 0b00011110; // Habilita os resistores de pull-up das portas PD1..4 - alt. 0xFF sem |
     6f2:	8b e2       	ldi	r24, 0x2B	; 43
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2e e1       	ldi	r18, 0x1E	; 30
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
	DDRB  = 0b11111111; // PB0..7 = SAÍDA
     6fc:	84 e2       	ldi	r24, 0x24	; 36
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	
	// Configuração das interrupções
	EICRA = 0b00001010;// interrupções externas INT0 e INT1 na borda de descida
     706:	89 e6       	ldi	r24, 0x69	; 105
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	2a e0       	ldi	r18, 0x0A	; 10
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
	EIMSK = 0b00000011;// habilita as interrupções externas INT0 e INT1
     710:	8d e3       	ldi	r24, 0x3D	; 61
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	23 e0       	ldi	r18, 0x03	; 3
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
	
	// Configuração do Timer de 1 ms
	TCCR0A = 0b00000010; // habilita modo CTC do TC0
     71a:	84 e4       	ldi	r24, 0x44	; 68
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	22 e0       	ldi	r18, 0x02	; 2
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; // liga TC0 com prescaler = 64
     724:	85 e4       	ldi	r24, 0x45	; 69
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	23 e0       	ldi	r18, 0x03	; 3
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18
	OCR0A  = 249;		 // ajusta o comparador para o TC0 contar até 249
     72e:	87 e4       	ldi	r24, 0x47	; 71
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	29 ef       	ldi	r18, 0xF9	; 249
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010; // habilita a interrupção na igualdade de comparação com OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     738:	8e e6       	ldi	r24, 0x6E	; 110
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	22 e0       	ldi	r18, 0x02	; 2
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18
	
	sei();// habilita interrupções globais, ativando o bit I do SREG
     742:	78 94       	sei
	
	while
	(1)
	{
		showResp3(FreqRespiracao);
     744:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     748:	0e 94 39 04 	call	0x872	; 0x872 <showResp3>
		controlLED2(&FreqRespiracao);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 ab 03 	call	0x756	; 0x756 <controlLED2>
	}
     754:	f7 cf       	rjmp	.-18     	; 0x744 <main+0x64>

00000756 <controlLED2>:
}

void controlLED2 (uint8_t *freq)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <controlLED2+0x6>
     75c:	00 d0       	rcall	.+0      	; 0x75e <controlLED2+0x8>
     75e:	00 d0       	rcall	.+0      	; 0x760 <controlLED2+0xa>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9e 83       	std	Y+6, r25	; 0x06
     766:	8d 83       	std	Y+5, r24	; 0x05
	for (int i = 0; i <= 7; i++)
     768:	1a 82       	std	Y+2, r1	; 0x02
     76a:	19 82       	std	Y+1, r1	; 0x01
     76c:	35 c0       	rjmp	.+106    	; 0x7d8 <controlLED2+0x82>
	{
		PORTB |= 1<<i;
     76e:	85 e2       	ldi	r24, 0x25	; 37
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	25 e2       	ldi	r18, 0x25	; 37
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	42 2f       	mov	r20, r18
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	09 80       	ldd	r0, Y+1	; 0x01
     782:	02 c0       	rjmp	.+4      	; 0x788 <controlLED2+0x32>
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <controlLED2+0x2e>
     78c:	24 2b       	or	r18, r20
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
		mydelay(60000/((*freq)*16));
     792:	8d 81       	ldd	r24, Y+5	; 0x05
     794:	9e 81       	ldd	r25, Y+6	; 0x06
     796:	fc 01       	movw	r30, r24
     798:	80 81       	ld	r24, Z
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	82 95       	swap	r24
     7a0:	92 95       	swap	r25
     7a2:	90 7f       	andi	r25, 0xF0	; 240
     7a4:	98 27       	eor	r25, r24
     7a6:	80 7f       	andi	r24, 0xF0	; 240
     7a8:	98 27       	eor	r25, r24
     7aa:	9c 01       	movw	r18, r24
     7ac:	99 0f       	add	r25, r25
     7ae:	44 0b       	sbc	r20, r20
     7b0:	55 0b       	sbc	r21, r21
     7b2:	80 e6       	ldi	r24, 0x60	; 96
     7b4:	9a ee       	ldi	r25, 0xEA	; 234
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	bc 01       	movw	r22, r24
     7bc:	cd 01       	movw	r24, r26
     7be:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divmodsi4>
     7c2:	da 01       	movw	r26, r20
     7c4:	c9 01       	movw	r24, r18
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mydelay>
	}
}

void controlLED2 (uint8_t *freq)
{
	for (int i = 0; i <= 7; i++)
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	9a 81       	ldd	r25, Y+2	; 0x02
     7dc:	08 97       	sbiw	r24, 0x08	; 8
     7de:	3c f2       	brlt	.-114    	; 0x76e <controlLED2+0x18>
	{
		PORTB |= 1<<i;
		mydelay(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9c 83       	std	Y+4, r25	; 0x04
     7e6:	8b 83       	std	Y+3, r24	; 0x03
     7e8:	36 c0       	rjmp	.+108    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
	{
		PORTB &= ~(1<<j);
     7ea:	85 e2       	ldi	r24, 0x25	; 37
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	25 e2       	ldi	r18, 0x25	; 37
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	42 2f       	mov	r20, r18
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	0b 80       	ldd	r0, Y+3	; 0x03
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
     804:	0a 94       	dec	r0
     806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
     808:	20 95       	com	r18
     80a:	24 23       	and	r18, r20
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
		mydelay(60000/((*freq)*16));
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	82 95       	swap	r24
     81e:	92 95       	swap	r25
     820:	90 7f       	andi	r25, 0xF0	; 240
     822:	98 27       	eor	r25, r24
     824:	80 7f       	andi	r24, 0xF0	; 240
     826:	98 27       	eor	r25, r24
     828:	9c 01       	movw	r18, r24
     82a:	99 0f       	add	r25, r25
     82c:	44 0b       	sbc	r20, r20
     82e:	55 0b       	sbc	r21, r21
     830:	80 e6       	ldi	r24, 0x60	; 96
     832:	9a ee       	ldi	r25, 0xEA	; 234
     834:	a0 e0       	ldi	r26, 0x00	; 0
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	bc 01       	movw	r22, r24
     83a:	cd 01       	movw	r24, r26
     83c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divmodsi4>
     840:	da 01       	movw	r26, r20
     842:	c9 01       	movw	r24, r18
     844:	bc 01       	movw	r22, r24
     846:	cd 01       	movw	r24, r26
     848:	0e 94 71 04 	call	0x8e2	; 0x8e2 <mydelay>
	for (int i = 0; i <= 7; i++)
	{
		PORTB |= 1<<i;
		mydelay(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	9c 81       	ldd	r25, Y+4	; 0x04
     85a:	99 23       	and	r25, r25
     85c:	34 f6       	brge	.-116    	; 0x7ea <controlLED2+0x94>
	{
		PORTB &= ~(1<<j);
		mydelay(60000/((*freq)*16));
	}
}
     85e:	00 00       	nop
     860:	26 96       	adiw	r28, 0x06	; 6
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <showResp3>:
void showResp3(uint8_t resp)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	1f 92       	push	r1
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	89 83       	std	Y+1, r24	; 0x01
	nokia_lcd_init(); // Inicia o LCD
     87e:	0e 94 65 05 	call	0xaca	; 0xaca <nokia_lcd_init>
	nokia_lcd_clear(); // Limpa o LCD
     882:	0e 94 e5 06 	call	0xdca	; 0xdca <nokia_lcd_clear>
	nokia_lcd_set_cursor(0, 0); // Muda o cursor para a posição 0,10 ou seja, pula uma linha
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <nokia_lcd_set_cursor>
	nokia_lcd_write_num(resp, 3); // Escreve uma variável de tamanho 2
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	63 e0       	ldi	r22, 0x03	; 3
     896:	0e 94 3b 08 	call	0x1076	; 0x1076 <nokia_lcd_write_num>
	nokia_lcd_set_cursor(35, 14); // Muda o cursor para a posição no argumento
     89a:	6e e0       	ldi	r22, 0x0E	; 14
     89c:	83 e2       	ldi	r24, 0x23	; 35
     89e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <nokia_lcd_set_cursor>
	nokia_lcd_write_string("resp/min", 1);// Escreve um texto do tamanho 1
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 18 08 	call	0x1030	; 0x1030 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 27);
     8ac:	6b e1       	ldi	r22, 0x1B	; 27
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <nokia_lcd_set_cursor>
	nokia_lcd_write_num(bpm, 3);
     8b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	63 e0       	ldi	r22, 0x03	; 3
     8be:	0e 94 3b 08 	call	0x1076	; 0x1076 <nokia_lcd_write_num>
	nokia_lcd_set_cursor(51, 41);
     8c2:	69 e2       	ldi	r22, 0x29	; 41
     8c4:	83 e3       	ldi	r24, 0x33	; 51
     8c6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <nokia_lcd_set_cursor>
	nokia_lcd_write_string("bpm", 1);
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 18 08 	call	0x1030	; 0x1030 <nokia_lcd_write_string>
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
     8d4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <nokia_lcd_render>
}
     8d8:	00 00       	nop
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <mydelay>:
void mydelay(uint32_t tempo)
{
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	2e 97       	sbiw	r28, 0x0e	; 14
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	6b 87       	std	Y+11, r22	; 0x0b
     8f8:	7c 87       	std	Y+12, r23	; 0x0c
     8fa:	8d 87       	std	Y+13, r24	; 0x0d
     8fc:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t *aux;
	aux = &tempo_ms; // variável auxiliar apontando para tempo_ms
     8fe:	8f e0       	ldi	r24, 0x0F	; 15
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	9a 87       	std	Y+10, r25	; 0x0a
     904:	89 87       	std	Y+9, r24	; 0x09
	uint32_t cont = tempo; // contador, para a variação de tempo desejada
     906:	8b 85       	ldd	r24, Y+11	; 0x0b
     908:	9c 85       	ldd	r25, Y+12	; 0x0c
     90a:	ad 85       	ldd	r26, Y+13	; 0x0d
     90c:	be 85       	ldd	r27, Y+14	; 0x0e
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	ab 83       	std	Y+3, r26	; 0x03
     914:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
     916:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tempo_ms>
     91a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <tempo_ms+0x1>
     91e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <tempo_ms+0x2>
     922:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <tempo_ms+0x3>
     926:	8d 83       	std	Y+5, r24	; 0x05
     928:	9e 83       	std	Y+6, r25	; 0x06
     92a:	af 83       	std	Y+7, r26	; 0x07
     92c:	b8 87       	std	Y+8, r27	; 0x08
	
	while(cont > 0)
     92e:	26 c0       	rjmp	.+76     	; 0x97c <__stack+0x7d>
	{
		if (catch_tempo < *aux)
     930:	89 85       	ldd	r24, Y+9	; 0x09
     932:	9a 85       	ldd	r25, Y+10	; 0x0a
     934:	fc 01       	movw	r30, r24
     936:	20 81       	ld	r18, Z
     938:	31 81       	ldd	r19, Z+1	; 0x01
     93a:	42 81       	ldd	r20, Z+2	; 0x02
     93c:	53 81       	ldd	r21, Z+3	; 0x03
     93e:	8d 81       	ldd	r24, Y+5	; 0x05
     940:	9e 81       	ldd	r25, Y+6	; 0x06
     942:	af 81       	ldd	r26, Y+7	; 0x07
     944:	b8 85       	ldd	r27, Y+8	; 0x08
     946:	82 17       	cp	r24, r18
     948:	93 07       	cpc	r25, r19
     94a:	a4 07       	cpc	r26, r20
     94c:	b5 07       	cpc	r27, r21
     94e:	b0 f4       	brcc	.+44     	; 0x97c <__stack+0x7d>
			{
			catch_tempo++;
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	9e 81       	ldd	r25, Y+6	; 0x06
     954:	af 81       	ldd	r26, Y+7	; 0x07
     956:	b8 85       	ldd	r27, Y+8	; 0x08
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	a1 1d       	adc	r26, r1
     95c:	b1 1d       	adc	r27, r1
     95e:	8d 83       	std	Y+5, r24	; 0x05
     960:	9e 83       	std	Y+6, r25	; 0x06
     962:	af 83       	std	Y+7, r26	; 0x07
     964:	b8 87       	std	Y+8, r27	; 0x08
			cont--;
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	ab 81       	ldd	r26, Y+3	; 0x03
     96c:	bc 81       	ldd	r27, Y+4	; 0x04
     96e:	01 97       	sbiw	r24, 0x01	; 1
     970:	a1 09       	sbc	r26, r1
     972:	b1 09       	sbc	r27, r1
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	ab 83       	std	Y+3, r26	; 0x03
     97a:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t *aux;
	aux = &tempo_ms; // variável auxiliar apontando para tempo_ms
	uint32_t cont = tempo; // contador, para a variação de tempo desejada
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
	
	while(cont > 0)
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	9a 81       	ldd	r25, Y+2	; 0x02
     980:	ab 81       	ldd	r26, Y+3	; 0x03
     982:	bc 81       	ldd	r27, Y+4	; 0x04
     984:	89 2b       	or	r24, r25
     986:	8a 2b       	or	r24, r26
     988:	8b 2b       	or	r24, r27
     98a:	91 f6       	brne	.-92     	; 0x930 <__stack+0x31>
			catch_tempo++;
			cont--;
			}
	}
	//*aux = 0; // zerando tempo_ms para impedir overflow quando o programa passar muito tempo sendo executado.
     98c:	00 00       	nop
     98e:	2e 96       	adiw	r28, 0x0e	; 14
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <write+0x8>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	89 83       	std	Y+1, r24	; 0x01
     9ae:	6a 83       	std	Y+2, r22	; 0x02
     9b0:	88 e2       	ldi	r24, 0x28	; 40
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	28 e2       	ldi	r18, 0x28	; 40
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	f9 01       	movw	r30, r18
     9ba:	20 81       	ld	r18, Z
     9bc:	2d 7f       	andi	r18, 0xFD	; 253
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
     9c2:	8a 81       	ldd	r24, Y+2	; 0x02
     9c4:	88 23       	and	r24, r24
     9c6:	51 f0       	breq	.+20     	; 0x9dc <write+0x3c>
     9c8:	88 e2       	ldi	r24, 0x28	; 40
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 e2       	ldi	r18, 0x28	; 40
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	28 60       	ori	r18, 0x08	; 8
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <write+0x4e>
     9dc:	88 e2       	ldi	r24, 0x28	; 40
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	28 e2       	ldi	r18, 0x28	; 40
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	27 7f       	andi	r18, 0xF7	; 247
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	3c c0       	rjmp	.+120    	; 0xa6a <write+0xca>
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	88 2f       	mov	r24, r24
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	21 2f       	mov	r18, r17
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	47 e0       	ldi	r20, 0x07	; 7
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	ba 01       	movw	r22, r20
     a02:	62 1b       	sub	r22, r18
     a04:	73 0b       	sbc	r23, r19
     a06:	9b 01       	movw	r18, r22
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <write+0x6e>
     a0a:	95 95       	asr	r25
     a0c:	87 95       	ror	r24
     a0e:	2a 95       	dec	r18
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <write+0x6a>
     a12:	81 70       	andi	r24, 0x01	; 1
     a14:	99 27       	eor	r25, r25
     a16:	89 2b       	or	r24, r25
     a18:	51 f0       	breq	.+20     	; 0xa2e <write+0x8e>
     a1a:	88 e2       	ldi	r24, 0x28	; 40
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	28 e2       	ldi	r18, 0x28	; 40
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	20 61       	ori	r18, 0x10	; 16
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <write+0xa0>
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	28 e2       	ldi	r18, 0x28	; 40
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	20 81       	ld	r18, Z
     a3a:	2f 7e       	andi	r18, 0xEF	; 239
     a3c:	fc 01       	movw	r30, r24
     a3e:	20 83       	st	Z, r18
     a40:	88 e2       	ldi	r24, 0x28	; 40
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	28 e2       	ldi	r18, 0x28	; 40
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	f9 01       	movw	r30, r18
     a4a:	20 81       	ld	r18, Z
     a4c:	20 62       	ori	r18, 0x20	; 32
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
     a52:	88 e2       	ldi	r24, 0x28	; 40
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	28 e2       	ldi	r18, 0x28	; 40
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	f9 01       	movw	r30, r18
     a5c:	20 81       	ld	r18, Z
     a5e:	2f 7d       	andi	r18, 0xDF	; 223
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	81 2f       	mov	r24, r17
     a66:	11 e0       	ldi	r17, 0x01	; 1
     a68:	18 0f       	add	r17, r24
     a6a:	18 30       	cpi	r17, 0x08	; 8
     a6c:	10 f2       	brcs	.-124    	; 0x9f2 <write+0x52>
     a6e:	88 e2       	ldi	r24, 0x28	; 40
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	28 e2       	ldi	r18, 0x28	; 40
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	22 60       	ori	r18, 0x02	; 2
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
     a80:	00 00       	nop
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	08 95       	ret

00000a8e <write_cmd>:
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <write>
     aa2:	00 00       	nop
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <write_data>:
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	89 83       	std	Y+1, r24	; 0x01
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <write>
     ac0:	00 00       	nop
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <nokia_lcd_init>:
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	6c 97       	sbiw	r28, 0x1c	; 28
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	87 e2       	ldi	r24, 0x27	; 39
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	27 e2       	ldi	r18, 0x27	; 39
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	22 60       	ori	r18, 0x02	; 2
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
     af4:	87 e2       	ldi	r24, 0x27	; 39
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	27 e2       	ldi	r18, 0x27	; 39
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	24 60       	ori	r18, 0x04	; 4
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
     b06:	87 e2       	ldi	r24, 0x27	; 39
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	27 e2       	ldi	r18, 0x27	; 39
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	28 60       	ori	r18, 0x08	; 8
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
     b18:	87 e2       	ldi	r24, 0x27	; 39
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	27 e2       	ldi	r18, 0x27	; 39
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	20 61       	ori	r18, 0x10	; 16
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
     b2a:	87 e2       	ldi	r24, 0x27	; 39
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	27 e2       	ldi	r18, 0x27	; 39
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	20 62       	ori	r18, 0x20	; 32
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
     b3c:	88 e2       	ldi	r24, 0x28	; 40
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	28 e2       	ldi	r18, 0x28	; 40
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	f9 01       	movw	r30, r18
     b46:	20 81       	ld	r18, Z
     b48:	24 60       	ori	r18, 0x04	; 4
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 83       	st	Z, r18
     b4e:	88 e2       	ldi	r24, 0x28	; 40
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	28 e2       	ldi	r18, 0x28	; 40
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	22 60       	ori	r18, 0x02	; 2
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 83       	st	Z, r18
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e2       	ldi	r26, 0x20	; 32
     b66:	b1 e4       	ldi	r27, 0x41	; 65
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	ab 83       	std	Y+3, r26	; 0x03
     b6e:	bc 83       	std	Y+4, r27	; 0x04
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	4a e7       	ldi	r20, 0x7A	; 122
     b76:	53 e4       	ldi	r21, 0x43	; 67
     b78:	69 81       	ldd	r22, Y+1	; 0x01
     b7a:	7a 81       	ldd	r23, Y+2	; 0x02
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	8b 8b       	std	Y+19, r24	; 0x13
     b8a:	9c 8b       	std	Y+20, r25	; 0x14
     b8c:	ad 8b       	std	Y+21, r26	; 0x15
     b8e:	be 8b       	std	Y+22, r27	; 0x16
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e8       	ldi	r20, 0x80	; 128
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	6b 89       	ldd	r22, Y+19	; 0x13
     b9a:	7c 89       	ldd	r23, Y+20	; 0x14
     b9c:	8d 89       	ldd	r24, Y+21	; 0x15
     b9e:	9e 89       	ldd	r25, Y+22	; 0x16
     ba0:	0e 94 92 08 	call	0x1124	; 0x1124 <__cmpsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <nokia_lcd_init+0xe8>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	98 8f       	std	Y+24, r25	; 0x18
     bae:	8f 8b       	std	Y+23, r24	; 0x17
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <nokia_lcd_init+0x166>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	3f ef       	ldi	r19, 0xFF	; 255
     bb6:	4f e7       	ldi	r20, 0x7F	; 127
     bb8:	57 e4       	ldi	r21, 0x47	; 71
     bba:	6b 89       	ldd	r22, Y+19	; 0x13
     bbc:	7c 89       	ldd	r23, Y+20	; 0x14
     bbe:	8d 89       	ldd	r24, Y+21	; 0x15
     bc0:	9e 89       	ldd	r25, Y+22	; 0x16
     bc2:	0e 94 13 09 	call	0x1226	; 0x1226 <__gesf2>
     bc6:	18 16       	cp	r1, r24
     bc8:	4c f5       	brge	.+82     	; 0xc1c <nokia_lcd_init+0x152>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e2       	ldi	r20, 0x20	; 32
     bd0:	51 e4       	ldi	r21, 0x41	; 65
     bd2:	69 81       	ldd	r22, Y+1	; 0x01
     bd4:	7a 81       	ldd	r23, Y+2	; 0x02
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	98 8f       	std	Y+24, r25	; 0x18
     bf0:	8f 8b       	std	Y+23, r24	; 0x17
     bf2:	0f c0       	rjmp	.+30     	; 0xc12 <nokia_lcd_init+0x148>
     bf4:	89 e1       	ldi	r24, 0x19	; 25
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9a 8f       	std	Y+26, r25	; 0x1a
     bfa:	89 8f       	std	Y+25, r24	; 0x19
     bfc:	89 8d       	ldd	r24, Y+25	; 0x19
     bfe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <nokia_lcd_init+0x136>
     c04:	9a 8f       	std	Y+26, r25	; 0x1a
     c06:	89 8f       	std	Y+25, r24	; 0x19
     c08:	8f 89       	ldd	r24, Y+23	; 0x17
     c0a:	98 8d       	ldd	r25, Y+24	; 0x18
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	98 8f       	std	Y+24, r25	; 0x18
     c10:	8f 8b       	std	Y+23, r24	; 0x17
     c12:	8f 89       	ldd	r24, Y+23	; 0x17
     c14:	98 8d       	ldd	r25, Y+24	; 0x18
     c16:	89 2b       	or	r24, r25
     c18:	69 f7       	brne	.-38     	; 0xbf4 <nokia_lcd_init+0x12a>
     c1a:	14 c0       	rjmp	.+40     	; 0xc44 <nokia_lcd_init+0x17a>
     c1c:	6b 89       	ldd	r22, Y+19	; 0x13
     c1e:	7c 89       	ldd	r23, Y+20	; 0x14
     c20:	8d 89       	ldd	r24, Y+21	; 0x15
     c22:	9e 89       	ldd	r25, Y+22	; 0x16
     c24:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	98 8f       	std	Y+24, r25	; 0x18
     c2e:	8f 8b       	std	Y+23, r24	; 0x17
     c30:	8f 89       	ldd	r24, Y+23	; 0x17
     c32:	98 8d       	ldd	r25, Y+24	; 0x18
     c34:	9c 8f       	std	Y+28, r25	; 0x1c
     c36:	8b 8f       	std	Y+27, r24	; 0x1b
     c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <nokia_lcd_init+0x172>
     c40:	9c 8f       	std	Y+28, r25	; 0x1c
     c42:	8b 8f       	std	Y+27, r24	; 0x1b
     c44:	88 e2       	ldi	r24, 0x28	; 40
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	28 e2       	ldi	r18, 0x28	; 40
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	f9 01       	movw	r30, r18
     c4e:	20 81       	ld	r18, Z
     c50:	2b 7f       	andi	r18, 0xFB	; 251
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	ac e8       	ldi	r26, 0x8C	; 140
     c5c:	b2 e4       	ldi	r27, 0x42	; 66
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	af 83       	std	Y+7, r26	; 0x07
     c64:	b8 87       	std	Y+8, r27	; 0x08
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a e7       	ldi	r20, 0x7A	; 122
     c6c:	53 e4       	ldi	r21, 0x43	; 67
     c6e:	6d 81       	ldd	r22, Y+5	; 0x05
     c70:	7e 81       	ldd	r23, Y+6	; 0x06
     c72:	8f 81       	ldd	r24, Y+7	; 0x07
     c74:	98 85       	ldd	r25, Y+8	; 0x08
     c76:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	89 87       	std	Y+9, r24	; 0x09
     c80:	9a 87       	std	Y+10, r25	; 0x0a
     c82:	ab 87       	std	Y+11, r26	; 0x0b
     c84:	bc 87       	std	Y+12, r27	; 0x0c
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	69 85       	ldd	r22, Y+9	; 0x09
     c90:	7a 85       	ldd	r23, Y+10	; 0x0a
     c92:	8b 85       	ldd	r24, Y+11	; 0x0b
     c94:	9c 85       	ldd	r25, Y+12	; 0x0c
     c96:	0e 94 92 08 	call	0x1124	; 0x1124 <__cmpsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	2c f4       	brge	.+10     	; 0xca8 <nokia_lcd_init+0x1de>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9e 87       	std	Y+14, r25	; 0x0e
     ca4:	8d 87       	std	Y+13, r24	; 0x0d
     ca6:	3f c0       	rjmp	.+126    	; 0xd26 <nokia_lcd_init+0x25c>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	69 85       	ldd	r22, Y+9	; 0x09
     cb2:	7a 85       	ldd	r23, Y+10	; 0x0a
     cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb8:	0e 94 13 09 	call	0x1226	; 0x1226 <__gesf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	4c f5       	brge	.+82     	; 0xd12 <nokia_lcd_init+0x248>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	7e 81       	ldd	r23, Y+6	; 0x06
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9e 87       	std	Y+14, r25	; 0x0e
     ce6:	8d 87       	std	Y+13, r24	; 0x0d
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <nokia_lcd_init+0x23e>
     cea:	89 e1       	ldi	r24, 0x19	; 25
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	98 8b       	std	Y+16, r25	; 0x10
     cf0:	8f 87       	std	Y+15, r24	; 0x0f
     cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf4:	98 89       	ldd	r25, Y+16	; 0x10
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <nokia_lcd_init+0x22c>
     cfa:	98 8b       	std	Y+16, r25	; 0x10
     cfc:	8f 87       	std	Y+15, r24	; 0x0f
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9e 87       	std	Y+14, r25	; 0x0e
     d06:	8d 87       	std	Y+13, r24	; 0x0d
     d08:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d0c:	89 2b       	or	r24, r25
     d0e:	69 f7       	brne	.-38     	; 0xcea <nokia_lcd_init+0x220>
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <nokia_lcd_init+0x270>
     d12:	69 85       	ldd	r22, Y+9	; 0x09
     d14:	7a 85       	ldd	r23, Y+10	; 0x0a
     d16:	8b 85       	ldd	r24, Y+11	; 0x0b
     d18:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1a:	0e 94 97 08 	call	0x112e	; 0x112e <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 87       	std	Y+14, r25	; 0x0e
     d24:	8d 87       	std	Y+13, r24	; 0x0d
     d26:	8d 85       	ldd	r24, Y+13	; 0x0d
     d28:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2a:	9a 8b       	std	Y+18, r25	; 0x12
     d2c:	89 8b       	std	Y+17, r24	; 0x11
     d2e:	89 89       	ldd	r24, Y+17	; 0x11
     d30:	9a 89       	ldd	r25, Y+18	; 0x12
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <nokia_lcd_init+0x268>
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
     d3a:	88 e2       	ldi	r24, 0x28	; 40
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	28 e2       	ldi	r18, 0x28	; 40
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	f9 01       	movw	r30, r18
     d44:	20 81       	ld	r18, Z
     d46:	24 60       	ori	r18, 0x04	; 4
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
     d4c:	88 e2       	ldi	r24, 0x28	; 40
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	28 e2       	ldi	r18, 0x28	; 40
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	f9 01       	movw	r30, r18
     d56:	20 81       	ld	r18, Z
     d58:	2d 7f       	andi	r18, 0xFD	; 253
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
     d5e:	81 e2       	ldi	r24, 0x21	; 33
     d60:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d64:	83 e1       	ldi	r24, 0x13	; 19
     d66:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d6a:	86 e0       	ldi	r24, 0x06	; 6
     d6c:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d70:	82 ec       	ldi	r24, 0xC2	; 194
     d72:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d76:	80 e2       	ldi	r24, 0x20	; 32
     d78:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d7c:	89 e0       	ldi	r24, 0x09	; 9
     d7e:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d88:	80 e4       	ldi	r24, 0x40	; 64
     d8a:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     d8e:	00 e0       	ldi	r16, 0x00	; 0
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <nokia_lcd_init+0x2d4>
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 56 05 	call	0xaac	; 0xaac <write_data>
     d9a:	0f 5f       	subi	r16, 0xFF	; 255
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	08 3f       	cpi	r16, 0xF8	; 248
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	1f 07       	cpc	r17, r31
     da4:	b8 f3       	brcs	.-18     	; 0xd94 <nokia_lcd_init+0x2ca>
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     dac:	8c e0       	ldi	r24, 0x0C	; 12
     dae:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     db2:	00 00       	nop
     db4:	6c 96       	adiw	r28, 0x1c	; 28
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <nokia_lcd_clear>:
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     ddc:	80 e4       	ldi	r24, 0x40	; 64
     dde:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
     de2:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <nokia_lcd+0x1f8>
     de6:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <nokia_lcd+0x1f9>
     dea:	00 e0       	ldi	r16, 0x00	; 0
     dec:	10 e0       	ldi	r17, 0x00	; 0
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <nokia_lcd_clear+0x34>
     df0:	c8 01       	movw	r24, r16
     df2:	89 5e       	subi	r24, 0xE9	; 233
     df4:	9e 4f       	sbci	r25, 0xFE	; 254
     df6:	fc 01       	movw	r30, r24
     df8:	10 82       	st	Z, r1
     dfa:	0f 5f       	subi	r16, 0xFF	; 255
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	08 3f       	cpi	r16, 0xF8	; 248
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	1f 07       	cpc	r17, r31
     e04:	a8 f3       	brcs	.-22     	; 0xdf0 <nokia_lcd_clear+0x26>
     e06:	00 00       	nop
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	08 95       	ret

00000e12 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <nokia_lcd_set_pixel+0x6>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <nokia_lcd_set_pixel+0x8>
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	8b 83       	std	Y+3, r24	; 0x03
     e22:	6c 83       	std	Y+4, r22	; 0x04
     e24:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	86 95       	lsr	r24
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	44 e5       	ldi	r20, 0x54	; 84
     e34:	48 9f       	mul	r20, r24
     e36:	90 01       	movw	r18, r0
     e38:	49 9f       	mul	r20, r25
     e3a:	30 0d       	add	r19, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	89 5e       	subi	r24, 0xE9	; 233
     e4a:	9e 4f       	sbci	r25, 0xFE	; 254
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
	if (value)
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	88 23       	and	r24, r24
     e54:	c9 f0       	breq	.+50     	; 0xe88 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 01       	movw	r18, r24
     e68:	27 70       	andi	r18, 0x07	; 7
     e6a:	33 27       	eor	r19, r19
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <nokia_lcd_set_pixel+0x64>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <nokia_lcd_set_pixel+0x60>
     e7a:	84 2b       	or	r24, r20
     e7c:	28 2f       	mov	r18, r24
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
     e86:	19 c0       	rjmp	.+50     	; 0xeba <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	fc 01       	movw	r30, r24
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9c 01       	movw	r18, r24
     e9a:	27 70       	andi	r18, 0x07	; 7
     e9c:	33 27       	eor	r19, r19
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <nokia_lcd_set_pixel+0x96>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	2a 95       	dec	r18
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <nokia_lcd_set_pixel+0x92>
     eac:	80 95       	com	r24
     eae:	84 23       	and	r24, r20
     eb0:	28 2f       	mov	r18, r24
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 83       	st	Z, r18
}
     eba:	00 00       	nop
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <nokia_lcd_write_char+0xa>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <nokia_lcd_write_char+0xc>
     ed8:	1f 92       	push	r1
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	8c 83       	std	Y+4, r24	; 0x04
     ee0:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     ee2:	10 e0       	ldi	r17, 0x00	; 0
     ee4:	65 c0       	rjmp	.+202    	; 0xfb0 <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
     ee6:	00 e0       	ldi	r16, 0x00	; 0
     ee8:	4e c0       	rjmp	.+156    	; 0xf86 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9c 01       	movw	r18, r24
     ef2:	20 52       	subi	r18, 0x20	; 32
     ef4:	31 09       	sbc	r19, r1
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	81 2f       	mov	r24, r17
     efa:	69 2f       	mov	r22, r25
     efc:	0e 94 ad 09 	call	0x135a	; 0x135a <__udivmodqi4>
     f00:	48 2f       	mov	r20, r24
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	c9 01       	movw	r24, r18
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	84 0f       	add	r24, r20
     f14:	95 1f       	adc	r25, r21
     f16:	88 59       	subi	r24, 0x98	; 152
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	fc 01       	movw	r30, r24
     f24:	84 91       	lpm	r24, Z
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	80 2f       	mov	r24, r16
     f32:	69 2f       	mov	r22, r25
     f34:	0e 94 ad 09 	call	0x135a	; 0x135a <__udivmodqi4>
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a9 01       	movw	r20, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <nokia_lcd_write_char+0x78>
     f40:	55 95       	asr	r21
     f42:	47 95       	ror	r20
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <nokia_lcd_write_char+0x74>
     f48:	ca 01       	movw	r24, r20
     f4a:	81 70       	andi	r24, 0x01	; 1
     f4c:	99 27       	eor	r25, r25
     f4e:	89 2b       	or	r24, r25
     f50:	61 f0       	breq	.+24     	; 0xf6a <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     f52:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nokia_lcd+0x1f9>
     f56:	98 2f       	mov	r25, r24
     f58:	90 0f       	add	r25, r16
     f5a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <nokia_lcd+0x1f8>
     f5e:	81 0f       	add	r24, r17
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	69 2f       	mov	r22, r25
     f64:	0e 94 09 07 	call	0xe12	; 0xe12 <nokia_lcd_set_pixel>
     f68:	0b c0       	rjmp	.+22     	; 0xf80 <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     f6a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nokia_lcd+0x1f9>
     f6e:	98 2f       	mov	r25, r24
     f70:	90 0f       	add	r25, r16
     f72:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <nokia_lcd+0x1f8>
     f76:	81 0f       	add	r24, r17
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	69 2f       	mov	r22, r25
     f7c:	0e 94 09 07 	call	0xe12	; 0xe12 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     f80:	80 2f       	mov	r24, r16
     f82:	01 e0       	ldi	r16, 0x01	; 1
     f84:	08 0f       	add	r16, r24
     f86:	40 2f       	mov	r20, r16
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	c9 01       	movw	r24, r18
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	82 1b       	sub	r24, r18
     fa0:	93 0b       	sbc	r25, r19
     fa2:	48 17       	cp	r20, r24
     fa4:	59 07       	cpc	r21, r25
     fa6:	0c f4       	brge	.+2      	; 0xfaa <nokia_lcd_write_char+0xde>
     fa8:	a0 cf       	rjmp	.-192    	; 0xeea <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     faa:	81 2f       	mov	r24, r17
     fac:	11 e0       	ldi	r17, 0x01	; 1
     fae:	18 0f       	add	r17, r24
     fb0:	41 2f       	mov	r20, r17
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	c9 01       	movw	r24, r18
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	82 0f       	add	r24, r18
     fc6:	93 1f       	adc	r25, r19
     fc8:	48 17       	cp	r20, r24
     fca:	59 07       	cpc	r21, r25
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <nokia_lcd_write_char+0x104>
     fce:	8b cf       	rjmp	.-234    	; 0xee6 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     fd0:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <nokia_lcd+0x1f8>
     fd4:	9d 81       	ldd	r25, Y+5	; 0x05
     fd6:	89 2f       	mov	r24, r25
     fd8:	88 0f       	add	r24, r24
     fda:	88 0f       	add	r24, r24
     fdc:	89 0f       	add	r24, r25
     fde:	82 0f       	add	r24, r18
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
     fe6:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <nokia_lcd+0x1f8>
     fea:	84 35       	cpi	r24, 0x54	; 84
     fec:	70 f0       	brcs	.+28     	; 0x100a <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
     fee:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     ff2:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <nokia_lcd+0x1f9>
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	89 2f       	mov	r24, r25
     ffa:	88 0f       	add	r24, r24
     ffc:	88 0f       	add	r24, r24
     ffe:	88 0f       	add	r24, r24
    1000:	89 1b       	sub	r24, r25
    1002:	82 0f       	add	r24, r18
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    100a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <nokia_lcd+0x1f9>
    100e:	80 33       	cpi	r24, 0x30	; 48
    1010:	20 f0       	brcs	.+8      	; 0x101a <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    1012:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1016:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <nokia_lcd+0x1f9>
	}
}
    101a:	00 00       	nop
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	00 d0       	rcall	.+0      	; 0x1036 <nokia_lcd_write_string+0x6>
    1036:	1f 92       	push	r1
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1042:	0c c0       	rjmp	.+24     	; 0x105c <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	9c 01       	movw	r18, r24
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	3a 83       	std	Y+2, r19	; 0x02
    1050:	29 83       	std	Y+1, r18	; 0x01
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	6b 81       	ldd	r22, Y+3	; 0x03
    1058:	0e 94 66 07 	call	0xecc	; 0xecc <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	71 f7       	brne	.-36     	; 0x1044 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    1068:	00 00       	nop
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <nokia_lcd_write_num>:

void nokia_lcd_write_num(int num, uint8_t scale)
{ 
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	00 d0       	rcall	.+0      	; 0x107c <nokia_lcd_write_num+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <nokia_lcd_write_num+0x8>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9b 83       	std	Y+3, r25	; 0x03
    1084:	8a 83       	std	Y+2, r24	; 0x02
    1086:	6c 83       	std	Y+4, r22	; 0x04
	char aux;
	itoa(num, aux, 10);
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9c 01       	movw	r18, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	9b 81       	ldd	r25, Y+3	; 0x03
    1094:	4a e0       	ldi	r20, 0x0A	; 10
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	b9 01       	movw	r22, r18
    109a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <itoa>
	nokia_lcd_write_string(aux, scale);	
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	6c 81       	ldd	r22, Y+4	; 0x04
    10a6:	0e 94 18 08 	call	0x1030	; 0x1030 <nokia_lcd_write_string>
}
    10aa:	00 00       	nop
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <nokia_lcd_set_cursor+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <nokia_lcd+0x1f9>
}
    10d4:	00 00       	nop
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    10ec:	80 e8       	ldi	r24, 0x80	; 128
    10ee:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>
	write_cmd(0x40);
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	0e 94 47 05 	call	0xa8e	; 0xa8e <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    10f8:	00 e0       	ldi	r16, 0x00	; 0
    10fa:	10 e0       	ldi	r17, 0x00	; 0
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    10fe:	c8 01       	movw	r24, r16
    1100:	89 5e       	subi	r24, 0xE9	; 233
    1102:	9e 4f       	sbci	r25, 0xFE	; 254
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	0e 94 56 05 	call	0xaac	; 0xaac <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    110c:	0f 5f       	subi	r16, 0xFF	; 255
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	08 3f       	cpi	r16, 0xF8	; 248
    1112:	f1 e0       	ldi	r31, 0x01	; 1
    1114:	1f 07       	cpc	r17, r31
    1116:	98 f3       	brcs	.-26     	; 0x10fe <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1118:	00 00       	nop
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <__cmpsf2>:
    1124:	0e 94 c6 08 	call	0x118c	; 0x118c <__fp_cmp>
    1128:	08 f4       	brcc	.+2      	; 0x112c <__cmpsf2+0x8>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	08 95       	ret

0000112e <__fixunssfsi>:
    112e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_splitA>
    1132:	88 f0       	brcs	.+34     	; 0x1156 <__fixunssfsi+0x28>
    1134:	9f 57       	subi	r25, 0x7F	; 127
    1136:	98 f0       	brcs	.+38     	; 0x115e <__fixunssfsi+0x30>
    1138:	b9 2f       	mov	r27, r25
    113a:	99 27       	eor	r25, r25
    113c:	b7 51       	subi	r27, 0x17	; 23
    113e:	b0 f0       	brcs	.+44     	; 0x116c <__fixunssfsi+0x3e>
    1140:	e1 f0       	breq	.+56     	; 0x117a <__fixunssfsi+0x4c>
    1142:	66 0f       	add	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	1a f0       	brmi	.+6      	; 0x1152 <__fixunssfsi+0x24>
    114c:	ba 95       	dec	r27
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__fixunssfsi+0x14>
    1150:	14 c0       	rjmp	.+40     	; 0x117a <__fixunssfsi+0x4c>
    1152:	b1 30       	cpi	r27, 0x01	; 1
    1154:	91 f0       	breq	.+36     	; 0x117a <__fixunssfsi+0x4c>
    1156:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fp_zero>
    115a:	b1 e0       	ldi	r27, 0x01	; 1
    115c:	08 95       	ret
    115e:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__fp_zero>
    1162:	67 2f       	mov	r22, r23
    1164:	78 2f       	mov	r23, r24
    1166:	88 27       	eor	r24, r24
    1168:	b8 5f       	subi	r27, 0xF8	; 248
    116a:	39 f0       	breq	.+14     	; 0x117a <__fixunssfsi+0x4c>
    116c:	b9 3f       	cpi	r27, 0xF9	; 249
    116e:	cc f3       	brlt	.-14     	; 0x1162 <__fixunssfsi+0x34>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b3 95       	inc	r27
    1178:	d9 f7       	brne	.-10     	; 0x1170 <__fixunssfsi+0x42>
    117a:	3e f4       	brtc	.+14     	; 0x118a <__fixunssfsi+0x5c>
    117c:	90 95       	com	r25
    117e:	80 95       	com	r24
    1180:	70 95       	com	r23
    1182:	61 95       	neg	r22
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <__fp_cmp>:
    118c:	99 0f       	add	r25, r25
    118e:	00 08       	sbc	r0, r0
    1190:	55 0f       	add	r21, r21
    1192:	aa 0b       	sbc	r26, r26
    1194:	e0 e8       	ldi	r30, 0x80	; 128
    1196:	fe ef       	ldi	r31, 0xFE	; 254
    1198:	16 16       	cp	r1, r22
    119a:	17 06       	cpc	r1, r23
    119c:	e8 07       	cpc	r30, r24
    119e:	f9 07       	cpc	r31, r25
    11a0:	c0 f0       	brcs	.+48     	; 0x11d2 <__fp_cmp+0x46>
    11a2:	12 16       	cp	r1, r18
    11a4:	13 06       	cpc	r1, r19
    11a6:	e4 07       	cpc	r30, r20
    11a8:	f5 07       	cpc	r31, r21
    11aa:	98 f0       	brcs	.+38     	; 0x11d2 <__fp_cmp+0x46>
    11ac:	62 1b       	sub	r22, r18
    11ae:	73 0b       	sbc	r23, r19
    11b0:	84 0b       	sbc	r24, r20
    11b2:	95 0b       	sbc	r25, r21
    11b4:	39 f4       	brne	.+14     	; 0x11c4 <__fp_cmp+0x38>
    11b6:	0a 26       	eor	r0, r26
    11b8:	61 f0       	breq	.+24     	; 0x11d2 <__fp_cmp+0x46>
    11ba:	23 2b       	or	r18, r19
    11bc:	24 2b       	or	r18, r20
    11be:	25 2b       	or	r18, r21
    11c0:	21 f4       	brne	.+8      	; 0x11ca <__fp_cmp+0x3e>
    11c2:	08 95       	ret
    11c4:	0a 26       	eor	r0, r26
    11c6:	09 f4       	brne	.+2      	; 0x11ca <__fp_cmp+0x3e>
    11c8:	a1 40       	sbci	r26, 0x01	; 1
    11ca:	a6 95       	lsr	r26
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	81 1d       	adc	r24, r1
    11d0:	81 1d       	adc	r24, r1
    11d2:	08 95       	ret

000011d4 <__fp_split3>:
    11d4:	57 fd       	sbrc	r21, 7
    11d6:	90 58       	subi	r25, 0x80	; 128
    11d8:	44 0f       	add	r20, r20
    11da:	55 1f       	adc	r21, r21
    11dc:	59 f0       	breq	.+22     	; 0x11f4 <__fp_splitA+0x10>
    11de:	5f 3f       	cpi	r21, 0xFF	; 255
    11e0:	71 f0       	breq	.+28     	; 0x11fe <__fp_splitA+0x1a>
    11e2:	47 95       	ror	r20

000011e4 <__fp_splitA>:
    11e4:	88 0f       	add	r24, r24
    11e6:	97 fb       	bst	r25, 7
    11e8:	99 1f       	adc	r25, r25
    11ea:	61 f0       	breq	.+24     	; 0x1204 <__fp_splitA+0x20>
    11ec:	9f 3f       	cpi	r25, 0xFF	; 255
    11ee:	79 f0       	breq	.+30     	; 0x120e <__fp_splitA+0x2a>
    11f0:	87 95       	ror	r24
    11f2:	08 95       	ret
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	14 06       	cpc	r1, r20
    11fa:	55 1f       	adc	r21, r21
    11fc:	f2 cf       	rjmp	.-28     	; 0x11e2 <__fp_split3+0xe>
    11fe:	46 95       	lsr	r20
    1200:	f1 df       	rcall	.-30     	; 0x11e4 <__fp_splitA>
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <__fp_splitA+0x30>
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	18 06       	cpc	r1, r24
    120a:	99 1f       	adc	r25, r25
    120c:	f1 cf       	rjmp	.-30     	; 0x11f0 <__fp_splitA+0xc>
    120e:	86 95       	lsr	r24
    1210:	71 05       	cpc	r23, r1
    1212:	61 05       	cpc	r22, r1
    1214:	08 94       	sec
    1216:	08 95       	ret

00001218 <__fp_zero>:
    1218:	e8 94       	clt

0000121a <__fp_szero>:
    121a:	bb 27       	eor	r27, r27
    121c:	66 27       	eor	r22, r22
    121e:	77 27       	eor	r23, r23
    1220:	cb 01       	movw	r24, r22
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret

00001226 <__gesf2>:
    1226:	0e 94 c6 08 	call	0x118c	; 0x118c <__fp_cmp>
    122a:	08 f4       	brcc	.+2      	; 0x122e <__gesf2+0x8>
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__mulsf3>:
    1230:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3x>
    1234:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__fp_round>
    1238:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_pscA>
    123c:	38 f0       	brcs	.+14     	; 0x124c <__mulsf3+0x1c>
    123e:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_pscB>
    1242:	20 f0       	brcs	.+8      	; 0x124c <__mulsf3+0x1c>
    1244:	95 23       	and	r25, r21
    1246:	11 f0       	breq	.+4      	; 0x124c <__mulsf3+0x1c>
    1248:	0c 94 85 09 	jmp	0x130a	; 0x130a <__fp_inf>
    124c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_nan>
    1250:	11 24       	eor	r1, r1
    1252:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_szero>

00001256 <__mulsf3x>:
    1256:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__fp_split3>
    125a:	70 f3       	brcs	.-36     	; 0x1238 <__mulsf3+0x8>

0000125c <__mulsf3_pse>:
    125c:	95 9f       	mul	r25, r21
    125e:	c1 f3       	breq	.-16     	; 0x1250 <__mulsf3+0x20>
    1260:	95 0f       	add	r25, r21
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	55 1f       	adc	r21, r21
    1266:	62 9f       	mul	r22, r18
    1268:	f0 01       	movw	r30, r0
    126a:	72 9f       	mul	r23, r18
    126c:	bb 27       	eor	r27, r27
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	63 9f       	mul	r22, r19
    1274:	aa 27       	eor	r26, r26
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	aa 1f       	adc	r26, r26
    127c:	64 9f       	mul	r22, r20
    127e:	66 27       	eor	r22, r22
    1280:	b0 0d       	add	r27, r0
    1282:	a1 1d       	adc	r26, r1
    1284:	66 1f       	adc	r22, r22
    1286:	82 9f       	mul	r24, r18
    1288:	22 27       	eor	r18, r18
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	73 9f       	mul	r23, r19
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	83 9f       	mul	r24, r19
    129a:	a0 0d       	add	r26, r0
    129c:	61 1d       	adc	r22, r1
    129e:	22 1f       	adc	r18, r18
    12a0:	74 9f       	mul	r23, r20
    12a2:	33 27       	eor	r19, r19
    12a4:	a0 0d       	add	r26, r0
    12a6:	61 1d       	adc	r22, r1
    12a8:	23 1f       	adc	r18, r19
    12aa:	84 9f       	mul	r24, r20
    12ac:	60 0d       	add	r22, r0
    12ae:	21 1d       	adc	r18, r1
    12b0:	82 2f       	mov	r24, r18
    12b2:	76 2f       	mov	r23, r22
    12b4:	6a 2f       	mov	r22, r26
    12b6:	11 24       	eor	r1, r1
    12b8:	9f 57       	subi	r25, 0x7F	; 127
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	9a f0       	brmi	.+38     	; 0x12e4 <__mulsf3_pse+0x88>
    12be:	f1 f0       	breq	.+60     	; 0x12fc <__mulsf3_pse+0xa0>
    12c0:	88 23       	and	r24, r24
    12c2:	4a f0       	brmi	.+18     	; 0x12d6 <__mulsf3_pse+0x7a>
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	bb 1f       	adc	r27, r27
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__mulsf3_pse+0x64>
    12d6:	9e 3f       	cpi	r25, 0xFE	; 254
    12d8:	51 05       	cpc	r21, r1
    12da:	80 f0       	brcs	.+32     	; 0x12fc <__mulsf3_pse+0xa0>
    12dc:	0c 94 85 09 	jmp	0x130a	; 0x130a <__fp_inf>
    12e0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_szero>
    12e4:	5f 3f       	cpi	r21, 0xFF	; 255
    12e6:	e4 f3       	brlt	.-8      	; 0x12e0 <__mulsf3_pse+0x84>
    12e8:	98 3e       	cpi	r25, 0xE8	; 232
    12ea:	d4 f3       	brlt	.-12     	; 0x12e0 <__mulsf3_pse+0x84>
    12ec:	86 95       	lsr	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b7 95       	ror	r27
    12f4:	f7 95       	ror	r31
    12f6:	e7 95       	ror	r30
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	c1 f7       	brne	.-16     	; 0x12ec <__mulsf3_pse+0x90>
    12fc:	fe 2b       	or	r31, r30
    12fe:	88 0f       	add	r24, r24
    1300:	91 1d       	adc	r25, r1
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret

0000130a <__fp_inf>:
    130a:	97 f9       	bld	r25, 7
    130c:	9f 67       	ori	r25, 0x7F	; 127
    130e:	80 e8       	ldi	r24, 0x80	; 128
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	08 95       	ret

00001316 <__fp_nan>:
    1316:	9f ef       	ldi	r25, 0xFF	; 255
    1318:	80 ec       	ldi	r24, 0xC0	; 192
    131a:	08 95       	ret

0000131c <__fp_pscA>:
    131c:	00 24       	eor	r0, r0
    131e:	0a 94       	dec	r0
    1320:	16 16       	cp	r1, r22
    1322:	17 06       	cpc	r1, r23
    1324:	18 06       	cpc	r1, r24
    1326:	09 06       	cpc	r0, r25
    1328:	08 95       	ret

0000132a <__fp_pscB>:
    132a:	00 24       	eor	r0, r0
    132c:	0a 94       	dec	r0
    132e:	12 16       	cp	r1, r18
    1330:	13 06       	cpc	r1, r19
    1332:	14 06       	cpc	r1, r20
    1334:	05 06       	cpc	r0, r21
    1336:	08 95       	ret

00001338 <__fp_round>:
    1338:	09 2e       	mov	r0, r25
    133a:	03 94       	inc	r0
    133c:	00 0c       	add	r0, r0
    133e:	11 f4       	brne	.+4      	; 0x1344 <__fp_round+0xc>
    1340:	88 23       	and	r24, r24
    1342:	52 f0       	brmi	.+20     	; 0x1358 <__fp_round+0x20>
    1344:	bb 0f       	add	r27, r27
    1346:	40 f4       	brcc	.+16     	; 0x1358 <__fp_round+0x20>
    1348:	bf 2b       	or	r27, r31
    134a:	11 f4       	brne	.+4      	; 0x1350 <__fp_round+0x18>
    134c:	60 ff       	sbrs	r22, 0
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <__fp_round+0x20>
    1350:	6f 5f       	subi	r22, 0xFF	; 255
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	08 95       	ret

0000135a <__udivmodqi4>:
    135a:	99 1b       	sub	r25, r25
    135c:	79 e0       	ldi	r23, 0x09	; 9
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__udivmodqi4_ep>

00001360 <__udivmodqi4_loop>:
    1360:	99 1f       	adc	r25, r25
    1362:	96 17       	cp	r25, r22
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__udivmodqi4_ep>
    1366:	96 1b       	sub	r25, r22

00001368 <__udivmodqi4_ep>:
    1368:	88 1f       	adc	r24, r24
    136a:	7a 95       	dec	r23
    136c:	c9 f7       	brne	.-14     	; 0x1360 <__udivmodqi4_loop>
    136e:	80 95       	com	r24
    1370:	08 95       	ret

00001372 <__udivmodsi4>:
    1372:	a1 e2       	ldi	r26, 0x21	; 33
    1374:	1a 2e       	mov	r1, r26
    1376:	aa 1b       	sub	r26, r26
    1378:	bb 1b       	sub	r27, r27
    137a:	fd 01       	movw	r30, r26
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <__udivmodsi4_ep>

0000137e <__udivmodsi4_loop>:
    137e:	aa 1f       	adc	r26, r26
    1380:	bb 1f       	adc	r27, r27
    1382:	ee 1f       	adc	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	a2 17       	cp	r26, r18
    1388:	b3 07       	cpc	r27, r19
    138a:	e4 07       	cpc	r30, r20
    138c:	f5 07       	cpc	r31, r21
    138e:	20 f0       	brcs	.+8      	; 0x1398 <__udivmodsi4_ep>
    1390:	a2 1b       	sub	r26, r18
    1392:	b3 0b       	sbc	r27, r19
    1394:	e4 0b       	sbc	r30, r20
    1396:	f5 0b       	sbc	r31, r21

00001398 <__udivmodsi4_ep>:
    1398:	66 1f       	adc	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	1a 94       	dec	r1
    13a2:	69 f7       	brne	.-38     	; 0x137e <__udivmodsi4_loop>
    13a4:	60 95       	com	r22
    13a6:	70 95       	com	r23
    13a8:	80 95       	com	r24
    13aa:	90 95       	com	r25
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	bd 01       	movw	r22, r26
    13b2:	cf 01       	movw	r24, r30
    13b4:	08 95       	ret

000013b6 <__divmodsi4>:
    13b6:	05 2e       	mov	r0, r21
    13b8:	97 fb       	bst	r25, 7
    13ba:	1e f4       	brtc	.+6      	; 0x13c2 <__divmodsi4+0xc>
    13bc:	00 94       	com	r0
    13be:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__negsi2>
    13c2:	57 fd       	sbrc	r21, 7
    13c4:	07 d0       	rcall	.+14     	; 0x13d4 <__divmodsi4_neg2>
    13c6:	0e 94 b9 09 	call	0x1372	; 0x1372 <__udivmodsi4>
    13ca:	07 fc       	sbrc	r0, 7
    13cc:	03 d0       	rcall	.+6      	; 0x13d4 <__divmodsi4_neg2>
    13ce:	4e f4       	brtc	.+18     	; 0x13e2 <__divmodsi4_exit>
    13d0:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__negsi2>

000013d4 <__divmodsi4_neg2>:
    13d4:	50 95       	com	r21
    13d6:	40 95       	com	r20
    13d8:	30 95       	com	r19
    13da:	21 95       	neg	r18
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	4f 4f       	sbci	r20, 0xFF	; 255
    13e0:	5f 4f       	sbci	r21, 0xFF	; 255

000013e2 <__divmodsi4_exit>:
    13e2:	08 95       	ret

000013e4 <__negsi2>:
    13e4:	90 95       	com	r25
    13e6:	80 95       	com	r24
    13e8:	70 95       	com	r23
    13ea:	61 95       	neg	r22
    13ec:	7f 4f       	sbci	r23, 0xFF	; 255
    13ee:	8f 4f       	sbci	r24, 0xFF	; 255
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	08 95       	ret

000013f4 <itoa>:
    13f4:	45 32       	cpi	r20, 0x25	; 37
    13f6:	51 05       	cpc	r21, r1
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <itoa+0xe>
    13fa:	42 30       	cpi	r20, 0x02	; 2
    13fc:	10 f0       	brcs	.+4      	; 0x1402 <itoa+0xe>
    13fe:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__itoa_ncheck>
    1402:	fb 01       	movw	r30, r22
    1404:	10 82       	st	Z, r1
    1406:	cb 01       	movw	r24, r22
    1408:	08 95       	ret

0000140a <__itoa_ncheck>:
    140a:	bb 27       	eor	r27, r27
    140c:	4a 30       	cpi	r20, 0x0A	; 10
    140e:	31 f4       	brne	.+12     	; 0x141c <__itoa_ncheck+0x12>
    1410:	99 23       	and	r25, r25
    1412:	22 f4       	brpl	.+8      	; 0x141c <__itoa_ncheck+0x12>
    1414:	bd e2       	ldi	r27, 0x2D	; 45
    1416:	90 95       	com	r25
    1418:	81 95       	neg	r24
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__utoa_common>

00001420 <__utoa_ncheck>:
    1420:	bb 27       	eor	r27, r27

00001422 <__utoa_common>:
    1422:	fb 01       	movw	r30, r22
    1424:	55 27       	eor	r21, r21
    1426:	aa 27       	eor	r26, r26
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	aa 1f       	adc	r26, r26
    142e:	a4 17       	cp	r26, r20
    1430:	10 f0       	brcs	.+4      	; 0x1436 <__utoa_common+0x14>
    1432:	a4 1b       	sub	r26, r20
    1434:	83 95       	inc	r24
    1436:	50 51       	subi	r21, 0x10	; 16
    1438:	b9 f7       	brne	.-18     	; 0x1428 <__utoa_common+0x6>
    143a:	a0 5d       	subi	r26, 0xD0	; 208
    143c:	aa 33       	cpi	r26, 0x3A	; 58
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__utoa_common+0x20>
    1440:	a9 5d       	subi	r26, 0xD9	; 217
    1442:	a1 93       	st	Z+, r26
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	79 f7       	brne	.-34     	; 0x1426 <__utoa_common+0x4>
    1448:	b1 11       	cpse	r27, r1
    144a:	b1 93       	st	Z+, r27
    144c:	11 92       	st	Z+, r1
    144e:	cb 01       	movw	r24, r22
    1450:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <strrev>

00001454 <strrev>:
    1454:	dc 01       	movw	r26, r24
    1456:	fc 01       	movw	r30, r24
    1458:	67 2f       	mov	r22, r23
    145a:	71 91       	ld	r23, Z+
    145c:	77 23       	and	r23, r23
    145e:	e1 f7       	brne	.-8      	; 0x1458 <strrev+0x4>
    1460:	32 97       	sbiw	r30, 0x02	; 2
    1462:	04 c0       	rjmp	.+8      	; 0x146c <strrev+0x18>
    1464:	7c 91       	ld	r23, X
    1466:	6d 93       	st	X+, r22
    1468:	70 83       	st	Z, r23
    146a:	62 91       	ld	r22, -Z
    146c:	ae 17       	cp	r26, r30
    146e:	bf 07       	cpc	r27, r31
    1470:	c8 f3       	brcs	.-14     	; 0x1464 <strrev+0x10>
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
