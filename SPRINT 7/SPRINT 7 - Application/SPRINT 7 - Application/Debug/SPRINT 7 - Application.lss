
SPRINT 7 - Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00002820  000028b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  0080018c  0080018c  00002940  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000299c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000029dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119e  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131e  00000000  00000000  000045b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  000058d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008dd6  00000000  00000000  00005ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd6  00000000  00000000  0000ec76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000f94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003252  00000000  00000000  0000fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_2>
       c:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_3>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e0 e2       	ldi	r30, 0x20	; 32
     25c:	f8 e2       	ldi	r31, 0x28	; 40
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ac 38       	cpi	r26, 0x8C	; 140
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	ac e8       	ldi	r26, 0x8C	; 140
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	ab 39       	cpi	r26, 0x9B	; 155
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
     27e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
uint32_t tempo_ms = 0;
float temp_C = 36.0;
unsigned char pressao[8] = "HHHxMMM";

ISR(INT0_vect) // interrupção externa 0, quando o botão é pressionado, a freq aumenta || a válvula de O2 aumenta
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	6c 97       	sbiw	r28, 0x1c	; 28
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	cd bf       	out	0x3d, r28	; 61
	if (flag_select == 1)
     2b8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_1+0x3c>
     2c0:	8f c0       	rjmp	.+286    	; 0x3e0 <__vector_1+0x15a>
	{
		if (FreqRespiracao < 30)
     2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c6:	8e 31       	cpi	r24, 0x1E	; 30
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <__vector_1+0x46>
     2ca:	1c c1       	rjmp	.+568    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     2cc:	7d c0       	rjmp	.+250    	; 0x3c8 <__vector_1+0x142>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a6 e1       	ldi	r26, 0x16	; 22
     2d4:	b3 e4       	ldi	r27, 0x43	; 67
     2d6:	8d 83       	std	Y+5, r24	; 0x05
     2d8:	9e 83       	std	Y+6, r25	; 0x06
     2da:	af 83       	std	Y+7, r26	; 0x07
     2dc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a e7       	ldi	r20, 0x7A	; 122
     2e4:	55 e4       	ldi	r21, 0x45	; 69
     2e6:	6d 81       	ldd	r22, Y+5	; 0x05
     2e8:	7e 81       	ldd	r23, Y+6	; 0x06
     2ea:	8f 81       	ldd	r24, Y+7	; 0x07
     2ec:	98 85       	ldd	r25, Y+8	; 0x08
     2ee:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	89 87       	std	Y+9, r24	; 0x09
     2f8:	9a 87       	std	Y+10, r25	; 0x0a
     2fa:	ab 87       	std	Y+11, r26	; 0x0b
     2fc:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	69 85       	ldd	r22, Y+9	; 0x09
     308:	7a 85       	ldd	r23, Y+10	; 0x0a
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	2c f4       	brge	.+10     	; 0x320 <__vector_1+0x9a>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9e 87       	std	Y+14, r25	; 0x0e
     31c:	8d 87       	std	Y+13, r24	; 0x0d
     31e:	3f c0       	rjmp	.+126    	; 0x39e <__vector_1+0x118>
	else if (__tmp > 65535)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	69 85       	ldd	r22, Y+9	; 0x09
     32a:	7a 85       	ldd	r23, Y+10	; 0x0a
     32c:	8b 85       	ldd	r24, Y+11	; 0x0b
     32e:	9c 85       	ldd	r25, Y+12	; 0x0c
     330:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	4c f5       	brge	.+82     	; 0x38a <__vector_1+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	6d 81       	ldd	r22, Y+5	; 0x05
     342:	7e 81       	ldd	r23, Y+6	; 0x06
     344:	8f 81       	ldd	r24, Y+7	; 0x07
     346:	98 85       	ldd	r25, Y+8	; 0x08
     348:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9e 87       	std	Y+14, r25	; 0x0e
     35e:	8d 87       	std	Y+13, r24	; 0x0d
     360:	0f c0       	rjmp	.+30     	; 0x380 <__vector_1+0xfa>
     362:	80 e9       	ldi	r24, 0x90	; 144
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	98 8b       	std	Y+16, r25	; 0x10
     368:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36a:	8f 85       	ldd	r24, Y+15	; 0x0f
     36c:	98 89       	ldd	r25, Y+16	; 0x10
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <__vector_1+0xe8>
     372:	98 8b       	std	Y+16, r25	; 0x10
     374:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	8d 85       	ldd	r24, Y+13	; 0x0d
     378:	9e 85       	ldd	r25, Y+14	; 0x0e
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9e 87       	std	Y+14, r25	; 0x0e
     37e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	8d 85       	ldd	r24, Y+13	; 0x0d
     382:	9e 85       	ldd	r25, Y+14	; 0x0e
     384:	89 2b       	or	r24, r25
     386:	69 f7       	brne	.-38     	; 0x362 <__vector_1+0xdc>
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <__vector_1+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38a:	69 85       	ldd	r22, Y+9	; 0x09
     38c:	7a 85       	ldd	r23, Y+10	; 0x0a
     38e:	8b 85       	ldd	r24, Y+11	; 0x0b
     390:	9c 85       	ldd	r25, Y+12	; 0x0c
     392:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	9e 87       	std	Y+14, r25	; 0x0e
     39c:	8d 87       	std	Y+13, r24	; 0x0d
     39e:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a2:	9a 8b       	std	Y+18, r25	; 0x12
     3a4:	89 8b       	std	Y+17, r24	; 0x11
     3a6:	89 89       	ldd	r24, Y+17	; 0x11
     3a8:	9a 89       	ldd	r25, Y+18	; 0x12
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <__vector_1+0x124>
     3ae:	9a 8b       	std	Y+18, r25	; 0x12
     3b0:	89 8b       	std	Y+17, r24	; 0x11
			{
				_delay_ms(150);
				if (FreqRespiracao < 30)
     3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b6:	8e 31       	cpi	r24, 0x1E	; 30
     3b8:	28 f4       	brcc	.+10     	; 0x3c4 <__vector_1+0x13e>
					FreqRespiracao++;
     3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				showResp_O2();	
     3c4:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
{
	if (flag_select == 1)
	{
		if (FreqRespiracao < 30)
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     3c8:	89 e2       	ldi	r24, 0x29	; 41
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	84 70       	andi	r24, 0x04	; 4
     3d6:	99 27       	eor	r25, r25
     3d8:	89 2b       	or	r24, r25
     3da:	09 f4       	brne	.+2      	; 0x3de <__vector_1+0x158>
     3dc:	78 cf       	rjmp	.-272    	; 0x2ce <__vector_1+0x48>
			}
		}
	}
	
	
}
     3de:	92 c0       	rjmp	.+292    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			}
		}
	}
	else
	{
		if (valve_O2 < 100)
     3e0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     3e4:	84 36       	cpi	r24, 0x64	; 100
     3e6:	08 f0       	brcs	.+2      	; 0x3ea <__vector_1+0x164>
     3e8:	8d c0       	rjmp	.+282    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     3ea:	81 c0       	rjmp	.+258    	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a6 e1       	ldi	r26, 0x16	; 22
     3f2:	b3 e4       	ldi	r27, 0x43	; 67
     3f4:	89 83       	std	Y+1, r24	; 0x01
     3f6:	9a 83       	std	Y+2, r25	; 0x02
     3f8:	ab 83       	std	Y+3, r26	; 0x03
     3fa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	4a e7       	ldi	r20, 0x7A	; 122
     402:	55 e4       	ldi	r21, 0x45	; 69
     404:	69 81       	ldd	r22, Y+1	; 0x01
     406:	7a 81       	ldd	r23, Y+2	; 0x02
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	8b 8b       	std	Y+19, r24	; 0x13
     416:	9c 8b       	std	Y+20, r25	; 0x14
     418:	ad 8b       	std	Y+21, r26	; 0x15
     41a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e8       	ldi	r20, 0x80	; 128
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	6b 89       	ldd	r22, Y+19	; 0x13
     426:	7c 89       	ldd	r23, Y+20	; 0x14
     428:	8d 89       	ldd	r24, Y+21	; 0x15
     42a:	9e 89       	ldd	r25, Y+22	; 0x16
     42c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     430:	88 23       	and	r24, r24
     432:	2c f4       	brge	.+10     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		__ticks = 1;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	98 8f       	std	Y+24, r25	; 0x18
     43a:	8f 8b       	std	Y+23, r24	; 0x17
     43c:	3f c0       	rjmp	.+126    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
	else if (__tmp > 65535)
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	3f ef       	ldi	r19, 0xFF	; 255
     442:	4f e7       	ldi	r20, 0x7F	; 127
     444:	57 e4       	ldi	r21, 0x47	; 71
     446:	6b 89       	ldd	r22, Y+19	; 0x13
     448:	7c 89       	ldd	r23, Y+20	; 0x14
     44a:	8d 89       	ldd	r24, Y+21	; 0x15
     44c:	9e 89       	ldd	r25, Y+22	; 0x16
     44e:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
     452:	18 16       	cp	r1, r24
     454:	4c f5       	brge	.+82     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e2       	ldi	r20, 0x20	; 32
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	69 81       	ldd	r22, Y+1	; 0x01
     460:	7a 81       	ldd	r23, Y+2	; 0x02
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	9c 81       	ldd	r25, Y+4	; 0x04
     466:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     476:	dc 01       	movw	r26, r24
     478:	cb 01       	movw	r24, r22
     47a:	98 8f       	std	Y+24, r25	; 0x18
     47c:	8f 8b       	std	Y+23, r24	; 0x17
     47e:	0f c0       	rjmp	.+30     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     480:	80 e9       	ldi	r24, 0x90	; 144
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	9a 8f       	std	Y+26, r25	; 0x1a
     486:	89 8f       	std	Y+25, r24	; 0x19
     488:	89 8d       	ldd	r24, Y+25	; 0x19
     48a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     490:	9a 8f       	std	Y+26, r25	; 0x1a
     492:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     494:	8f 89       	ldd	r24, Y+23	; 0x17
     496:	98 8d       	ldd	r25, Y+24	; 0x18
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	98 8f       	std	Y+24, r25	; 0x18
     49c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     49e:	8f 89       	ldd	r24, Y+23	; 0x17
     4a0:	98 8d       	ldd	r25, Y+24	; 0x18
     4a2:	89 2b       	or	r24, r25
     4a4:	69 f7       	brne	.-38     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     4a6:	14 c0       	rjmp	.+40     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4a8:	6b 89       	ldd	r22, Y+19	; 0x13
     4aa:	7c 89       	ldd	r23, Y+20	; 0x14
     4ac:	8d 89       	ldd	r24, Y+21	; 0x15
     4ae:	9e 89       	ldd	r25, Y+22	; 0x16
     4b0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	98 8f       	std	Y+24, r25	; 0x18
     4ba:	8f 8b       	std	Y+23, r24	; 0x17
     4bc:	8f 89       	ldd	r24, Y+23	; 0x17
     4be:	98 8d       	ldd	r25, Y+24	; 0x18
     4c0:	9c 8f       	std	Y+28, r25	; 0x1c
     4c2:	8b 8f       	std	Y+27, r24	; 0x1b
     4c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4cc:	9c 8f       	std	Y+28, r25	; 0x1c
     4ce:	8b 8f       	std	Y+27, r24	; 0x1b
			{
				_delay_ms(150);
				if (valve_O2 < 100)
     4d0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     4d4:	84 36       	cpi	r24, 0x64	; 100
     4d6:	28 f4       	brcc	.+10     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
					valve_O2 +=10;	
     4d8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     4dc:	86 5f       	subi	r24, 0xF6	; 246
     4de:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
				showResp_O2();
     4e2:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
				controlValve(&valve_O2);	
     4e6:	8c e8       	ldi	r24, 0x8C	; 140
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 96 0a 	call	0x152c	; 0x152c <controlValve>
	}
	else
	{
		if (valve_O2 < 100)
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     4ee:	89 e2       	ldi	r24, 0x29	; 41
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	84 70       	andi	r24, 0x04	; 4
     4fc:	99 27       	eor	r25, r25
     4fe:	89 2b       	or	r24, r25
     500:	09 f4       	brne	.+2      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     502:	74 cf       	rjmp	.-280    	; 0x3ec <__vector_1+0x166>
			}
		}
	}
	
	
}
     504:	00 00       	nop
     506:	6c 96       	adiw	r28, 0x1c	; 28
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	7f 91       	pop	r23
     524:	6f 91       	pop	r22
     526:	5f 91       	pop	r21
     528:	4f 91       	pop	r20
     52a:	3f 91       	pop	r19
     52c:	2f 91       	pop	r18
     52e:	0f 90       	pop	r0
     530:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_2>:
ISR(INT1_vect) // interrupção externa 1, quando o botão é pressionado, a freq diminui || a válvula de O2 diminui
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     542:	0f 92       	push	r0
     544:	11 24       	eor	r1, r1
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	6c 97       	sbiw	r28, 0x1c	; 28
     568:	de bf       	out	0x3e, r29	; 62
     56a:	cd bf       	out	0x3d, r28	; 61
	if (flag_select == 1)
     56c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	09 f0       	breq	.+2      	; 0x576 <__vector_2+0x3c>
     574:	8f c0       	rjmp	.+286    	; 0x694 <__vector_2+0x15a>
	{
		if (FreqRespiracao > 5)
     576:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     57a:	86 30       	cpi	r24, 0x06	; 6
     57c:	08 f4       	brcc	.+2      	; 0x580 <__vector_2+0x46>
     57e:	1c c1       	rjmp	.+568    	; 0x7b8 <__vector_2+0x27e>
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     580:	7d c0       	rjmp	.+250    	; 0x67c <__vector_2+0x142>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a6 e1       	ldi	r26, 0x16	; 22
     588:	b3 e4       	ldi	r27, 0x43	; 67
     58a:	8d 83       	std	Y+5, r24	; 0x05
     58c:	9e 83       	std	Y+6, r25	; 0x06
     58e:	af 83       	std	Y+7, r26	; 0x07
     590:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	4a e7       	ldi	r20, 0x7A	; 122
     598:	55 e4       	ldi	r21, 0x45	; 69
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	89 87       	std	Y+9, r24	; 0x09
     5ac:	9a 87       	std	Y+10, r25	; 0x0a
     5ae:	ab 87       	std	Y+11, r26	; 0x0b
     5b0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e8       	ldi	r20, 0x80	; 128
     5b8:	5f e3       	ldi	r21, 0x3F	; 63
     5ba:	69 85       	ldd	r22, Y+9	; 0x09
     5bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     5be:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5c2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     5c6:	88 23       	and	r24, r24
     5c8:	2c f4       	brge	.+10     	; 0x5d4 <__vector_2+0x9a>
		__ticks = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9e 87       	std	Y+14, r25	; 0x0e
     5d0:	8d 87       	std	Y+13, r24	; 0x0d
     5d2:	3f c0       	rjmp	.+126    	; 0x652 <__vector_2+0x118>
	else if (__tmp > 65535)
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	3f ef       	ldi	r19, 0xFF	; 255
     5d8:	4f e7       	ldi	r20, 0x7F	; 127
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	69 85       	ldd	r22, Y+9	; 0x09
     5de:	7a 85       	ldd	r23, Y+10	; 0x0a
     5e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e4:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
     5e8:	18 16       	cp	r1, r24
     5ea:	4c f5       	brge	.+82     	; 0x63e <__vector_2+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e2       	ldi	r20, 0x20	; 32
     5f2:	51 e4       	ldi	r21, 0x41	; 65
     5f4:	6d 81       	ldd	r22, Y+5	; 0x05
     5f6:	7e 81       	ldd	r23, Y+6	; 0x06
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
     604:	bc 01       	movw	r22, r24
     606:	cd 01       	movw	r24, r26
     608:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	9e 87       	std	Y+14, r25	; 0x0e
     612:	8d 87       	std	Y+13, r24	; 0x0d
     614:	0f c0       	rjmp	.+30     	; 0x634 <__vector_2+0xfa>
     616:	80 e9       	ldi	r24, 0x90	; 144
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	98 8b       	std	Y+16, r25	; 0x10
     61c:	8f 87       	std	Y+15, r24	; 0x0f
     61e:	8f 85       	ldd	r24, Y+15	; 0x0f
     620:	98 89       	ldd	r25, Y+16	; 0x10
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <__vector_2+0xe8>
     626:	98 8b       	std	Y+16, r25	; 0x10
     628:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     62a:	8d 85       	ldd	r24, Y+13	; 0x0d
     62c:	9e 85       	ldd	r25, Y+14	; 0x0e
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	9e 87       	std	Y+14, r25	; 0x0e
     632:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     634:	8d 85       	ldd	r24, Y+13	; 0x0d
     636:	9e 85       	ldd	r25, Y+14	; 0x0e
     638:	89 2b       	or	r24, r25
     63a:	69 f7       	brne	.-38     	; 0x616 <__vector_2+0xdc>
     63c:	14 c0       	rjmp	.+40     	; 0x666 <__vector_2+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     63e:	69 85       	ldd	r22, Y+9	; 0x09
     640:	7a 85       	ldd	r23, Y+10	; 0x0a
     642:	8b 85       	ldd	r24, Y+11	; 0x0b
     644:	9c 85       	ldd	r25, Y+12	; 0x0c
     646:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	9e 87       	std	Y+14, r25	; 0x0e
     650:	8d 87       	std	Y+13, r24	; 0x0d
     652:	8d 85       	ldd	r24, Y+13	; 0x0d
     654:	9e 85       	ldd	r25, Y+14	; 0x0e
     656:	9a 8b       	std	Y+18, r25	; 0x12
     658:	89 8b       	std	Y+17, r24	; 0x11
     65a:	89 89       	ldd	r24, Y+17	; 0x11
     65c:	9a 89       	ldd	r25, Y+18	; 0x12
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <__vector_2+0x124>
     662:	9a 8b       	std	Y+18, r25	; 0x12
     664:	89 8b       	std	Y+17, r24	; 0x11
			{
				_delay_ms(150);
				if (FreqRespiracao > 5)
     666:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     66a:	86 30       	cpi	r24, 0x06	; 6
     66c:	28 f0       	brcs	.+10     	; 0x678 <__vector_2+0x13e>
				FreqRespiracao--;
     66e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     672:	81 50       	subi	r24, 0x01	; 1
     674:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				showResp_O2();
     678:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
{
	if (flag_select == 1)
	{
		if (FreqRespiracao > 5)
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     67c:	89 e2       	ldi	r24, 0x29	; 41
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	88 70       	andi	r24, 0x08	; 8
     68a:	99 27       	eor	r25, r25
     68c:	89 2b       	or	r24, r25
     68e:	09 f4       	brne	.+2      	; 0x692 <__vector_2+0x158>
     690:	78 cf       	rjmp	.-272    	; 0x582 <__vector_2+0x48>
				showResp_O2();
				controlValve(&valve_O2);
			}
		}
	}
}
     692:	92 c0       	rjmp	.+292    	; 0x7b8 <__vector_2+0x27e>
			}
		}
	}
	else
	{
		if (valve_O2 > 0)
     694:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     698:	88 23       	and	r24, r24
     69a:	09 f4       	brne	.+2      	; 0x69e <__vector_2+0x164>
     69c:	8d c0       	rjmp	.+282    	; 0x7b8 <__vector_2+0x27e>
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     69e:	81 c0       	rjmp	.+258    	; 0x7a2 <__vector_2+0x268>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	a6 e1       	ldi	r26, 0x16	; 22
     6a6:	b3 e4       	ldi	r27, 0x43	; 67
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	ab 83       	std	Y+3, r26	; 0x03
     6ae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4a e7       	ldi	r20, 0x7A	; 122
     6b6:	55 e4       	ldi	r21, 0x45	; 69
     6b8:	69 81       	ldd	r22, Y+1	; 0x01
     6ba:	7a 81       	ldd	r23, Y+2	; 0x02
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     6c4:	dc 01       	movw	r26, r24
     6c6:	cb 01       	movw	r24, r22
     6c8:	8b 8b       	std	Y+19, r24	; 0x13
     6ca:	9c 8b       	std	Y+20, r25	; 0x14
     6cc:	ad 8b       	std	Y+21, r26	; 0x15
     6ce:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	6b 89       	ldd	r22, Y+19	; 0x13
     6da:	7c 89       	ldd	r23, Y+20	; 0x14
     6dc:	8d 89       	ldd	r24, Y+21	; 0x15
     6de:	9e 89       	ldd	r25, Y+22	; 0x16
     6e0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
     6e4:	88 23       	and	r24, r24
     6e6:	2c f4       	brge	.+10     	; 0x6f2 <__vector_2+0x1b8>
		__ticks = 1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	98 8f       	std	Y+24, r25	; 0x18
     6ee:	8f 8b       	std	Y+23, r24	; 0x17
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <__vector_2+0x236>
	else if (__tmp > 65535)
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	3f ef       	ldi	r19, 0xFF	; 255
     6f6:	4f e7       	ldi	r20, 0x7F	; 127
     6f8:	57 e4       	ldi	r21, 0x47	; 71
     6fa:	6b 89       	ldd	r22, Y+19	; 0x13
     6fc:	7c 89       	ldd	r23, Y+20	; 0x14
     6fe:	8d 89       	ldd	r24, Y+21	; 0x15
     700:	9e 89       	ldd	r25, Y+22	; 0x16
     702:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
     706:	18 16       	cp	r1, r24
     708:	4c f5       	brge	.+82     	; 0x75c <__vector_2+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e2       	ldi	r20, 0x20	; 32
     710:	51 e4       	ldi	r21, 0x41	; 65
     712:	69 81       	ldd	r22, Y+1	; 0x01
     714:	7a 81       	ldd	r23, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	9c 81       	ldd	r25, Y+4	; 0x04
     71a:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	bc 01       	movw	r22, r24
     724:	cd 01       	movw	r24, r26
     726:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	98 8f       	std	Y+24, r25	; 0x18
     730:	8f 8b       	std	Y+23, r24	; 0x17
     732:	0f c0       	rjmp	.+30     	; 0x752 <__vector_2+0x218>
     734:	80 e9       	ldi	r24, 0x90	; 144
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	9a 8f       	std	Y+26, r25	; 0x1a
     73a:	89 8f       	std	Y+25, r24	; 0x19
     73c:	89 8d       	ldd	r24, Y+25	; 0x19
     73e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <__vector_2+0x206>
     744:	9a 8f       	std	Y+26, r25	; 0x1a
     746:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     748:	8f 89       	ldd	r24, Y+23	; 0x17
     74a:	98 8d       	ldd	r25, Y+24	; 0x18
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	98 8f       	std	Y+24, r25	; 0x18
     750:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     752:	8f 89       	ldd	r24, Y+23	; 0x17
     754:	98 8d       	ldd	r25, Y+24	; 0x18
     756:	89 2b       	or	r24, r25
     758:	69 f7       	brne	.-38     	; 0x734 <__vector_2+0x1fa>
     75a:	14 c0       	rjmp	.+40     	; 0x784 <__vector_2+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     75c:	6b 89       	ldd	r22, Y+19	; 0x13
     75e:	7c 89       	ldd	r23, Y+20	; 0x14
     760:	8d 89       	ldd	r24, Y+21	; 0x15
     762:	9e 89       	ldd	r25, Y+22	; 0x16
     764:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	98 8f       	std	Y+24, r25	; 0x18
     76e:	8f 8b       	std	Y+23, r24	; 0x17
     770:	8f 89       	ldd	r24, Y+23	; 0x17
     772:	98 8d       	ldd	r25, Y+24	; 0x18
     774:	9c 8f       	std	Y+28, r25	; 0x1c
     776:	8b 8f       	std	Y+27, r24	; 0x1b
     778:	8b 8d       	ldd	r24, Y+27	; 0x1b
     77a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <__vector_2+0x242>
     780:	9c 8f       	std	Y+28, r25	; 0x1c
     782:	8b 8f       	std	Y+27, r24	; 0x1b
			{
				_delay_ms(150);
				if (valve_O2 > 0)
     784:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     788:	88 23       	and	r24, r24
     78a:	29 f0       	breq	.+10     	; 0x796 <__vector_2+0x25c>
				valve_O2 -=10;
     78c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     790:	8a 50       	subi	r24, 0x0A	; 10
     792:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
				showResp_O2();
     796:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
				controlValve(&valve_O2);
     79a:	8c e8       	ldi	r24, 0x8C	; 140
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 96 0a 	call	0x152c	; 0x152c <controlValve>
	}
	else
	{
		if (valve_O2 > 0)
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     7a2:	89 e2       	ldi	r24, 0x29	; 41
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	88 70       	andi	r24, 0x08	; 8
     7b0:	99 27       	eor	r25, r25
     7b2:	89 2b       	or	r24, r25
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <__vector_2+0x27e>
     7b6:	74 cf       	rjmp	.-280    	; 0x6a0 <__vector_2+0x166>
				showResp_O2();
				controlValve(&valve_O2);
			}
		}
	}
}
     7b8:	00 00       	nop
     7ba:	6c 96       	adiw	r28, 0x1c	; 28
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	bf 91       	pop	r27
     7d0:	af 91       	pop	r26
     7d2:	9f 91       	pop	r25
     7d4:	8f 91       	pop	r24
     7d6:	7f 91       	pop	r23
     7d8:	6f 91       	pop	r22
     7da:	5f 91       	pop	r21
     7dc:	4f 91       	pop	r20
     7de:	3f 91       	pop	r19
     7e0:	2f 91       	pop	r18
     7e2:	0f 90       	pop	r0
     7e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7e8:	0f 90       	pop	r0
     7ea:	1f 90       	pop	r1
     7ec:	18 95       	reti

000007ee <__vector_14>:
ISR(TIMER0_COMPA_vect) // interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
{
     7ee:	1f 92       	push	r1
     7f0:	0f 92       	push	r0
     7f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
	tempo_ms++;
     81a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     81e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     822:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     826:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	a1 1d       	adc	r26, r1
     82e:	b1 1d       	adc	r27, r1
     830:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <tempo_ms>
     834:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <tempo_ms+0x1>
     838:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <tempo_ms+0x2>
     83c:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <tempo_ms+0x3>
	if ((tempo_ms % 150) == 0) // mudança de canal a cada 150ms
     840:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     844:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     848:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     84c:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     850:	26 e9       	ldi	r18, 0x96	; 150
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	bc 01       	movw	r22, r24
     85a:	cd 01       	movw	r24, r26
     85c:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodsi4>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	89 2b       	or	r24, r25
     866:	8a 2b       	or	r24, r26
     868:	8b 2b       	or	r24, r27
     86a:	11 f4       	brne	.+4      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
	mudacanal();
     86c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <mudacanal>
	if((tempo_ms % 200) == 0) // mostrando os dados no LCD a cada 200ms
     870:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     874:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     878:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     87c:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     880:	28 ec       	ldi	r18, 0xC8	; 200
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	bc 01       	movw	r22, r24
     88a:	cd 01       	movw	r24, r26
     88c:	0e 94 c2 10 	call	0x2184	; 0x2184 <__udivmodsi4>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	89 2b       	or	r24, r25
     896:	8a 2b       	or	r24, r26
     898:	8b 2b       	or	r24, r27
     89a:	49 f4       	brne	.+18     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
	{
		if (flag_select == 0)
     89c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     8a0:	88 23       	and	r24, r24
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
			showHP();
     8a4:	0e 94 e7 06 	call	0xdce	; 0xdce <showHP>
		else
			showResp_O2();		
	}
}
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
	if((tempo_ms % 200) == 0) // mostrando os dados no LCD a cada 200ms
	{
		if (flag_select == 0)
			showHP();
		else
			showResp_O2();		
     8aa:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
	}
}
     8ae:	00 00       	nop
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	ff 91       	pop	r31
     8b6:	ef 91       	pop	r30
     8b8:	bf 91       	pop	r27
     8ba:	af 91       	pop	r26
     8bc:	9f 91       	pop	r25
     8be:	8f 91       	pop	r24
     8c0:	7f 91       	pop	r23
     8c2:	6f 91       	pop	r22
     8c4:	5f 91       	pop	r21
     8c6:	4f 91       	pop	r20
     8c8:	3f 91       	pop	r19
     8ca:	2f 91       	pop	r18
     8cc:	0f 90       	pop	r0
     8ce:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_5>:
ISR(PCINT2_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	2f 93       	push	r18
     8ee:	3f 93       	push	r19
     8f0:	4f 93       	push	r20
     8f2:	5f 93       	push	r21
     8f4:	6f 93       	push	r22
     8f6:	7f 93       	push	r23
     8f8:	8f 93       	push	r24
     8fa:	9f 93       	push	r25
     8fc:	af 93       	push	r26
     8fe:	bf 93       	push	r27
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	static uint32_t catch_tempo; // variável para capturar o tempo anterior
	
	bpm = (1000.0*60.0)/((tempo_ms - catch_tempo)*2.0); // *2.0 porque a interrupção ocorre a cada T/2 (subida e descida)
     90c:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <tempo_ms>
     910:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <tempo_ms+0x1>
     914:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <tempo_ms+0x2>
     918:	50 91 91 01 	lds	r21, 0x0191	; 0x800191 <tempo_ms+0x3>
     91c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <catch_tempo.2175>
     920:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <catch_tempo.2175+0x1>
     924:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <catch_tempo.2175+0x2>
     928:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <catch_tempo.2175+0x3>
     92c:	79 01       	movw	r14, r18
     92e:	8a 01       	movw	r16, r20
     930:	e8 1a       	sub	r14, r24
     932:	f9 0a       	sbc	r15, r25
     934:	0a 0b       	sbc	r16, r26
     936:	1b 0b       	sbc	r17, r27
     938:	d8 01       	movw	r26, r16
     93a:	c7 01       	movw	r24, r14
     93c:	bc 01       	movw	r22, r24
     93e:	cd 01       	movw	r24, r26
     940:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__floatunsisf>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	9c 01       	movw	r18, r24
     94a:	ad 01       	movw	r20, r26
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__addsf3>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	9c 01       	movw	r18, r24
     95a:	ad 01       	movw	r20, r26
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e6       	ldi	r23, 0x60	; 96
     960:	8a e6       	ldi	r24, 0x6A	; 106
     962:	97 e4       	ldi	r25, 0x47	; 71
     964:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <bpm>
	if (catch_tempo < tempo_ms)
     97c:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <catch_tempo.2175>
     980:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <catch_tempo.2175+0x1>
     984:	40 91 94 01 	lds	r20, 0x0194	; 0x800194 <catch_tempo.2175+0x2>
     988:	50 91 95 01 	lds	r21, 0x0195	; 0x800195 <catch_tempo.2175+0x3>
     98c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     990:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     994:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     998:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     99c:	28 17       	cp	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	4a 07       	cpc	r20, r26
     9a2:	5b 07       	cpc	r21, r27
     9a4:	80 f4       	brcc	.+32     	; 0x9c6 <__stack+0xc7>
	catch_tempo = tempo_ms; // "Capturando" o tempo atual
     9a6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     9aa:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     9ae:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     9b2:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     9b6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <catch_tempo.2175>
     9ba:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <catch_tempo.2175+0x1>
     9be:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <catch_tempo.2175+0x2>
     9c2:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <catch_tempo.2175+0x3>
}
     9c6:	00 00       	nop
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	bf 91       	pop	r27
     9d2:	af 91       	pop	r26
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	7f 91       	pop	r23
     9da:	6f 91       	pop	r22
     9dc:	5f 91       	pop	r21
     9de:	4f 91       	pop	r20
     9e0:	3f 91       	pop	r19
     9e2:	2f 91       	pop	r18
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	0f 90       	pop	r0
     9ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <__vector_18>:
ISR(USART_RX_vect)
{
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	2f 93       	push	r18
     a06:	3f 93       	push	r19
     a08:	4f 93       	push	r20
     a0a:	5f 93       	push	r21
     a0c:	6f 93       	push	r22
     a0e:	7f 93       	push	r23
     a10:	8f 93       	push	r24
     a12:	9f 93       	push	r25
     a14:	af 93       	push	r26
     a16:	bf 93       	push	r27
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	1f 92       	push	r1
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
	static uint8_t flag_UART, cont;
	unsigned char recebido = USART_Receive(); // Esse recebido é para não chamar a função de receber sempre
     a26:	0e 94 f5 08 	call	0x11ea	; 0x11ea <USART_Receive>
     a2a:	89 83       	std	Y+1, r24	; 0x01
	
	if (recebido == ';')
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	8b 33       	cpi	r24, 0x3B	; 59
     a30:	31 f4       	brne	.+12     	; 0xa3e <__vector_18+0x46>
	{
		flag_UART = 1; // Dado início ao recebimento
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <flag_UART.2181>
		cont = 0;
     a38:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <cont.2182>
			sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
		}
		if ((flag_UART == 1) && (cont >= 1)) // Iniciar o recebimento da palavra a partir da letra após o ';'
		USART_pressao(recebido);
	}
}
     a3c:	42 c0       	rjmp	.+132    	; 0xac2 <__vector_18+0xca>
	if (recebido == ';')
	{
		flag_UART = 1; // Dado início ao recebimento
		cont = 0;
	}
	else if (recebido == ':')
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	8a 33       	cpi	r24, 0x3A	; 58
     a42:	81 f4       	brne	.+32     	; 0xa64 <__vector_18+0x6c>
	{
		flag_UART = 0; // Finalizado o recebimento
     a44:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <flag_UART.2181>
		if (cont < 7)  // Caso a palavra esteja menor que o tamanho correto
     a48:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cont.2182>
     a4c:	87 30       	cpi	r24, 0x07	; 7
     a4e:	c8 f5       	brcc	.+114    	; 0xac2 <__vector_18+0xca>
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
     a50:	86 e0       	ldi	r24, 0x06	; 6
     a52:	ef e0       	ldi	r30, 0x0F	; 15
     a54:	f1 e0       	ldi	r31, 0x01	; 1
     a56:	a7 e0       	ldi	r26, 0x07	; 7
     a58:	b1 e0       	ldi	r27, 0x01	; 1
     a5a:	01 90       	ld	r0, Z+
     a5c:	0d 92       	st	X+, r0
     a5e:	8a 95       	dec	r24
     a60:	e1 f7       	brne	.-8      	; 0xa5a <__vector_18+0x62>
			sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
		}
		if ((flag_UART == 1) && (cont >= 1)) // Iniciar o recebimento da palavra a partir da letra após o ';'
		USART_pressao(recebido);
	}
}
     a62:	2f c0       	rjmp	.+94     	; 0xac2 <__vector_18+0xca>
		if (cont < 7)  // Caso a palavra esteja menor que o tamanho correto
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
	}
	else
	{
		if (flag_UART == 1)
     a64:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <flag_UART.2181>
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	31 f4       	brne	.+12     	; 0xa78 <__vector_18+0x80>
		cont++; // Contando o tamanho da palavra recebida, não foi colocado no if de setar a flag
     a6c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cont.2182>
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <cont.2182>
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <__vector_18+0x92>
				// porquê ele só contaria os inícios, e não o real tamanho
		else
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
     a78:	86 e0       	ldi	r24, 0x06	; 6
     a7a:	ef e0       	ldi	r30, 0x0F	; 15
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	a7 e0       	ldi	r26, 0x07	; 7
     a80:	b1 e0       	ldi	r27, 0x01	; 1
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	8a 95       	dec	r24
     a88:	e1 f7       	brne	.-8      	; 0xa82 <__vector_18+0x8a>
		if (cont > 7) // Estouro do tamanho da palavra
     a8a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cont.2182>
     a8e:	88 30       	cpi	r24, 0x08	; 8
     a90:	68 f0       	brcs	.+26     	; 0xaac <__vector_18+0xb4>
		{
			cont = 0;
     a92:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <cont.2182>
			flag_UART = 0;
     a96:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <flag_UART.2181>
			sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão
     a9a:	86 e0       	ldi	r24, 0x06	; 6
     a9c:	ef e0       	ldi	r30, 0x0F	; 15
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	a7 e0       	ldi	r26, 0x07	; 7
     aa2:	b1 e0       	ldi	r27, 0x01	; 1
     aa4:	01 90       	ld	r0, Z+
     aa6:	0d 92       	st	X+, r0
     aa8:	8a 95       	dec	r24
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <__vector_18+0xac>
		}
		if ((flag_UART == 1) && (cont >= 1)) // Iniciar o recebimento da palavra a partir da letra após o ';'
     aac:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <flag_UART.2181>
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	39 f4       	brne	.+14     	; 0xac2 <__vector_18+0xca>
     ab4:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <cont.2182>
     ab8:	88 23       	and	r24, r24
     aba:	19 f0       	breq	.+6      	; 0xac2 <__vector_18+0xca>
		USART_pressao(recebido);
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	0e 94 07 09 	call	0x120e	; 0x120e <USART_pressao>
	}
}
     ac2:	00 00       	nop
     ac4:	0f 90       	pop	r0
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <__vector_3>:
ISR(PCINT0_vect)
{	
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
	if (!(PINB & (1<<6)))
     b1a:	83 e2       	ldi	r24, 0x23	; 35
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	80 74       	andi	r24, 0x40	; 64
     b28:	99 27       	eor	r25, r25
     b2a:	89 2b       	or	r24, r25
     b2c:	29 f4       	brne	.+10     	; 0xb38 <__vector_3+0x4a>
		flag_select++;
     b2e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <flag_select>
			
	if (flag_select == 0)
     b38:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     b3c:	88 23       	and	r24, r24
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__vector_3+0x58>
		showHP();
     b40:	0e 94 e7 06 	call	0xdce	; 0xdce <showHP>
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__vector_3+0x5c>
	else
		showResp_O2();
     b46:	0e 94 8a 06 	call	0xd14	; 0xd14 <showResp_O2>
	if (flag_select > 2)
     b4a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	10 f0       	brcs	.+4      	; 0xb56 <__vector_3+0x68>
		flag_select = 0;		
     b52:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <flag_select>
}
     b56:	00 00       	nop
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <main>:
int main(void)
{
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	DDRD  = 0b10000000; // PD0..6 - ENTRADA, PD7 - SAÍDA
     b88:	8a e2       	ldi	r24, 0x2A	; 42
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	20 e8       	ldi	r18, 0x80	; 128
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
	PORTD = 0b10001100; // Habilita os resistores de pull-up das portas PD2, PD3 e PD7
     b92:	8b e2       	ldi	r24, 0x2B	; 43
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	2c e8       	ldi	r18, 0x8C	; 140
     b98:	fc 01       	movw	r30, r24
     b9a:	20 83       	st	Z, r18
	DDRB  = 0b00000110; // PB1,2 = SAÍDA DOS SERVOS
     b9c:	84 e2       	ldi	r24, 0x24	; 36
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	26 e0       	ldi	r18, 0x06	; 6
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
	PORTB = 0b01000000; // Habilita o pull-up de PB6
     ba6:	85 e2       	ldi	r24, 0x25	; 37
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	20 e4       	ldi	r18, 0x40	; 64
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
	DDRC  = 0b01111100; // saída do LCD PC2...PC6; PC0 e PC1 - Entradas das fontes variáveis
     bb0:	87 e2       	ldi	r24, 0x27	; 39
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2c e7       	ldi	r18, 0x7C	; 124
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18
	PORTC = 0b00000000; // Desabilitando os pull-ups da porta
     bba:	88 e2       	ldi	r24, 0x28	; 40
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	10 82       	st	Z, r1
	
	// Configuração das interrupções
	EICRA  = 0b00001010; // interrupções externas INT0 e INT1 na borda de descida
     bc2:	89 e6       	ldi	r24, 0x69	; 105
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2a e0       	ldi	r18, 0x0A	; 10
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
	EIMSK  = 0b00000011; // habilita as interrupções externas INT0 e INT1
     bcc:	8d e3       	ldi	r24, 0x3D	; 61
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	23 e0       	ldi	r18, 0x03	; 3
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18
	PCICR  = 0b00000101; // interrupções pin change 2 (porta D) e pin change 0 (Porta B)
     bd6:	88 e6       	ldi	r24, 0x68	; 104
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	25 e0       	ldi	r18, 0x05	; 5
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
	PCMSK2 = 0b00010000; // interrupção pin change PD4 - Contador de BPM
     be0:	8d e6       	ldi	r24, 0x6D	; 109
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	20 e1       	ldi	r18, 0x10	; 16
     be6:	fc 01       	movw	r30, r24
     be8:	20 83       	st	Z, r18
	PCMSK0 = 0b01000000; // interrupção pin change PB6 - Chave Seletora
     bea:	8b e6       	ldi	r24, 0x6B	; 107
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	20 e4       	ldi	r18, 0x40	; 64
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
	
	// Configuração do Timer de 1 ms
	TCCR0A = 0b00000010; // habilita modo CTC do TC0
     bf4:	84 e4       	ldi	r24, 0x44	; 68
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	22 e0       	ldi	r18, 0x02	; 2
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; // liga TC0 com prescaler = 64
     bfe:	85 e4       	ldi	r24, 0x45	; 69
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	23 e0       	ldi	r18, 0x03	; 3
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
	OCR0A  = 249;		 // ajusta o comparador para o TC0 contar até 249
     c08:	87 e4       	ldi	r24, 0x47	; 71
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	29 ef       	ldi	r18, 0xF9	; 249
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010; // habilita a interrupção na igualdade de comparação com OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     c12:	8e e6       	ldi	r24, 0x6E	; 110
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	22 e0       	ldi	r18, 0x02	; 2
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
	
	// Configura ADC
	ADCSRA  = 0b11100111;    // habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
     c1c:	8a e7       	ldi	r24, 0x7A	; 122
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	27 ee       	ldi	r18, 0xE7	; 231
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
	ADCSRB  = 0b00000000;    // modo de conversão contínua
     c26:	8b e7       	ldi	r24, 0x7B	; 123
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	10 82       	st	Z, r1
	// medição inicial
	ADMUX   = 0b01000000;    // Tensão interna de ref VCC, canal 0
     c2e:	8c e7       	ldi	r24, 0x7C	; 124
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	20 e4       	ldi	r18, 0x40	; 64
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
	DIDR0   = 0b00111110;    // habilita pino PC0 como entrada de ADC0
     c38:	8e e7       	ldi	r24, 0x7E	; 126
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	2e e3       	ldi	r18, 0x3E	; 62
     c3e:	fc 01       	movw	r30, r24
     c40:	20 83       	st	Z, r18
	temp_C  = 10.0*(5.0*ADC/1023.0 + 1.0);
     c42:	88 e7       	ldi	r24, 0x78	; 120
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	cc 01       	movw	r24, r24
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__floatunsisf>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 ea       	ldi	r20, 0xA0	; 160
     c64:	50 e4       	ldi	r21, 0x40	; 64
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 ec       	ldi	r19, 0xC0	; 192
     c76:	4f e7       	ldi	r20, 0x7F	; 127
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__addsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e2       	ldi	r20, 0x20	; 32
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_C>
     cb2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <temp_C+0x1>
     cb6:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <temp_C+0x2>
     cba:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <temp_C+0x3>
	
	// Fast PWM, Timer TC1, OC1A e OC1B habilitados
	ICR1 = 39999; // Período do PWM - TOP = F_CPU/(freq*prescaler) - 1 = 16M/(50*8) - 1 -> T = 20ms
     cbe:	86 e8       	ldi	r24, 0x86	; 134
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	2f e3       	ldi	r18, 0x3F	; 63
     cc4:	3c e9       	ldi	r19, 0x9C	; 156
     cc6:	fc 01       	movw	r30, r24
     cc8:	31 83       	std	Z+1, r19	; 0x01
     cca:	20 83       	st	Z, r18
	TCCR1A = 0b10100010; // PWM não invertido nos pinos OC1A e OC1B, via ICR1
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	22 ea       	ldi	r18, 0xA2	; 162
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
	TCCR1B = 0b00011010; // liga TC1, prescaler = 8
     cd6:	81 e8       	ldi	r24, 0x81	; 129
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	2a e1       	ldi	r18, 0x1A	; 26
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
	// variando de 2000 a 4000, para 0° a 180°, sendo inicializados em 0°
	OCR1A = 2000; // Servo BVM
     ce0:	88 e8       	ldi	r24, 0x88	; 136
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	20 ed       	ldi	r18, 0xD0	; 208
     ce6:	37 e0       	ldi	r19, 0x07	; 7
     ce8:	fc 01       	movw	r30, r24
     cea:	31 83       	std	Z+1, r19	; 0x01
     cec:	20 83       	st	Z, r18
	OCR1B = 2000; // servo O2
     cee:	8a e8       	ldi	r24, 0x8A	; 138
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	20 ed       	ldi	r18, 0xD0	; 208
     cf4:	37 e0       	ldi	r19, 0x07	; 7
     cf6:	fc 01       	movw	r30, r24
     cf8:	31 83       	std	Z+1, r19	; 0x01
     cfa:	20 83       	st	Z, r18
	
	sei(); // habilita interrupções globais, ativando o bit I do SREG
     cfc:	78 94       	sei
	
	USART_Init(MYUBRR); // Inicializando a USART
     cfe:	85 ec       	ldi	r24, 0xC5	; 197
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	0e 94 b6 08 	call	0x116c	; 0x116c <USART_Init>
//	nokia_lcd_init(); // Inicia o LCD
//	showHP();
	
	while (1)
	{
		nokia_lcd_init(); // Inicia o LCD
     d06:	0e 94 4b 0b 	call	0x1696	; 0x1696 <nokia_lcd_init>
		controlSlaveBVM(&FreqRespiracao);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	0e 94 4d 09 	call	0x129a	; 0x129a <controlSlaveBVM>
	}
     d12:	f9 cf       	rjmp	.-14     	; 0xd06 <main+0x186>

00000d14 <showResp_O2>:
		PORTB &= ~(1<<j);
		mydelay(60000.0/((*freq)*16.0));
	}
}*/
void showResp_O2(void)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	nokia_lcd_clear(); // Limpa o LCD
     d1c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <nokia_lcd_clear>
	
	// Início
	nokia_lcd_set_cursor(0, 0);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Parametros", 1);
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	85 e1       	ldi	r24, 0x15	; 21
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 7);
     d32:	67 e0       	ldi	r22, 0x07	; 7
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("~~~~~~~~~~~~~~", 1);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	

	// Frequência de Respiração
	nokia_lcd_set_cursor(0, 15); // Muda o cursor para a posição 0,0
     d44:	6f e0       	ldi	r22, 0x0F	; 15
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_int(FreqRespiracao, 1); // Escreve uma variável de tamanho 1
     d4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(35, 15); // Muda o cursor para a posição no argumento
     d5a:	6f e0       	ldi	r22, 0x0F	; 15
     d5c:	83 e2       	ldi	r24, 0x23	; 35
     d5e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("resp/min", 1);// Escreve um texto do tamanho 1
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	8f e2       	ldi	r24, 0x2F	; 47
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	// Válvula de O2
	nokia_lcd_set_cursor(0, 25);
     d6c:	69 e1       	ldi	r22, 0x19	; 25
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_int(valve_O2, 1);
     d74:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(35, 25);
     d82:	69 e1       	ldi	r22, 0x19	; 25
     d84:	83 e2       	ldi	r24, 0x23	; 35
     d86:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("%O2", 1);
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	88 e3       	ldi	r24, 0x38	; 56
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	// Indicador de seleção
	if (flag_select == 1)
     d94:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <flag_select>
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	51 f4       	brne	.+20     	; 0xdb0 <showResp_O2+0x9c>
	{
		nokia_lcd_set_cursor(20, 15);
     d9c:	6f e0       	ldi	r22, 0x0F	; 15
     d9e:	84 e1       	ldi	r24, 0x14	; 20
     da0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("->", 1);
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	8c e3       	ldi	r24, 0x3C	; 60
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <showResp_O2+0xae>
	}
	else
	{
		nokia_lcd_set_cursor(20, 25);
     db0:	69 e1       	ldi	r22, 0x19	; 25
     db2:	84 e1       	ldi	r24, 0x14	; 20
     db4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
		nokia_lcd_write_string("->", 1);
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	8c e3       	ldi	r24, 0x3C	; 60
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	}
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
     dc2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <nokia_lcd_render>
}
     dc6:	00 00       	nop
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <showHP>:
void showHP (void)
{
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
	nokia_lcd_clear(); // Limpa o LCD
     dd6:	0e 94 cb 0c 	call	0x1996	; 0x1996 <nokia_lcd_clear>
	
	// Início
	nokia_lcd_set_cursor(0, 0);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Sinais Vitais", 1);
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8f e3       	ldi	r24, 0x3F	; 63
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	//	Frequência Cardíaca
	nokia_lcd_set_cursor(0, 10);
     dec:	6a e0       	ldi	r22, 0x0A	; 10
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_int(bpm, 1);
     df4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <bpm>
     df8:	88 2f       	mov	r24, r24
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(45, 10);
     e02:	6a e0       	ldi	r22, 0x0A	; 10
     e04:	8d e2       	ldi	r24, 0x2D	; 45
     e06:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("bpm", 1);
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	8d e4       	ldi	r24, 0x4D	; 77
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	// Saturação de O2 no sangue
	nokia_lcd_set_cursor(0, 20);   // As coordenadas das novas variáveis escritas irão tomar como base
     e14:	64 e1       	ldi	r22, 0x14	; 20
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_int(satO2, 1); // a diferença entre as coordenadas
     e1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <satO2>
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(45, 20);
     e2a:	64 e1       	ldi	r22, 0x14	; 20
     e2c:	8d e2       	ldi	r24, 0x2D	; 45
     e2e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("% SpO2", 1);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	81 e5       	ldi	r24, 0x51	; 81
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	// Temperatura Corporal
	nokia_lcd_set_cursor(0, 30);
     e3c:	6e e1       	ldi	r22, 0x1E	; 30
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_int(temp_C, 1);
     e44:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_C>
     e48:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_C+0x1>
     e4c:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <temp_C+0x2>
     e50:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <temp_C+0x3>
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fixsfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(45, 30);
     e66:	6e e1       	ldi	r22, 0x1E	; 30
     e68:	8d e2       	ldi	r24, 0x2D	; 45
     e6a:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("ºC", 1);
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	88 e5       	ldi	r24, 0x58	; 88
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	// Pressão Sanguínea
	nokia_lcd_set_cursor(0, 40);
     e78:	68 e2       	ldi	r22, 0x28	; 40
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string(pressao, 1);
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45, 40);
     e8a:	68 e2       	ldi	r22, 0x28	; 40
     e8c:	8d e2       	ldi	r24, 0x2D	; 45
     e8e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("mmHg", 1);
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	8b e5       	ldi	r24, 0x5B	; 91
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
	
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
     e9c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <nokia_lcd_render>
}
     ea0:	00 00       	nop
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <mydelay>:
void mydelay(uint32_t tempo)
{
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	2e 97       	sbiw	r28, 0x0e	; 14
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	6b 87       	std	Y+11, r22	; 0x0b
     ebe:	7c 87       	std	Y+12, r23	; 0x0c
     ec0:	8d 87       	std	Y+13, r24	; 0x0d
     ec2:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t *aux;
	aux = &tempo_ms;                 // variável auxiliar apontando para tempo_ms
     ec4:	8e e8       	ldi	r24, 0x8E	; 142
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	9a 87       	std	Y+10, r25	; 0x0a
     eca:	89 87       	std	Y+9, r24	; 0x09
	uint32_t cont = tempo;           // contador, para a variação de tempo desejada
     ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ece:	9c 85       	ldd	r25, Y+12	; 0x0c
     ed0:	ad 85       	ldd	r26, Y+13	; 0x0d
     ed2:	be 85       	ldd	r27, Y+14	; 0x0e
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	ab 83       	std	Y+3, r26	; 0x03
     eda:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
     edc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <tempo_ms>
     ee0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <tempo_ms+0x1>
     ee4:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <tempo_ms+0x2>
     ee8:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <tempo_ms+0x3>
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	9e 83       	std	Y+6, r25	; 0x06
     ef0:	af 83       	std	Y+7, r26	; 0x07
     ef2:	b8 87       	std	Y+8, r27	; 0x08
	
	while(cont > 0) // *aux <= tempo + catch_tempo - alternativa
     ef4:	26 c0       	rjmp	.+76     	; 0xf42 <mydelay+0x9a>
	{
		if (catch_tempo < *aux)
     ef6:	89 85       	ldd	r24, Y+9	; 0x09
     ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
     efa:	fc 01       	movw	r30, r24
     efc:	20 81       	ld	r18, Z
     efe:	31 81       	ldd	r19, Z+1	; 0x01
     f00:	42 81       	ldd	r20, Z+2	; 0x02
     f02:	53 81       	ldd	r21, Z+3	; 0x03
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	af 81       	ldd	r26, Y+7	; 0x07
     f0a:	b8 85       	ldd	r27, Y+8	; 0x08
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	a4 07       	cpc	r26, r20
     f12:	b5 07       	cpc	r27, r21
     f14:	b0 f4       	brcc	.+44     	; 0xf42 <mydelay+0x9a>
		{
			catch_tempo++;
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	af 81       	ldd	r26, Y+7	; 0x07
     f1c:	b8 85       	ldd	r27, Y+8	; 0x08
     f1e:	01 96       	adiw	r24, 0x01	; 1
     f20:	a1 1d       	adc	r26, r1
     f22:	b1 1d       	adc	r27, r1
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	af 83       	std	Y+7, r26	; 0x07
     f2a:	b8 87       	std	Y+8, r27	; 0x08
			cont--;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	ab 81       	ldd	r26, Y+3	; 0x03
     f32:	bc 81       	ldd	r27, Y+4	; 0x04
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	a1 09       	sbc	r26, r1
     f38:	b1 09       	sbc	r27, r1
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	ab 83       	std	Y+3, r26	; 0x03
     f40:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t *aux;
	aux = &tempo_ms;                 // variável auxiliar apontando para tempo_ms
	uint32_t cont = tempo;           // contador, para a variação de tempo desejada
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
	
	while(cont > 0) // *aux <= tempo + catch_tempo - alternativa
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	ab 81       	ldd	r26, Y+3	; 0x03
     f48:	bc 81       	ldd	r27, Y+4	; 0x04
     f4a:	89 2b       	or	r24, r25
     f4c:	8a 2b       	or	r24, r26
     f4e:	8b 2b       	or	r24, r27
     f50:	91 f6       	brne	.-92     	; 0xef6 <mydelay+0x4e>
		{
			catch_tempo++;
			cont--;
		}
	}
	if(*aux >= 4294967295) // 2^32 - 1 = 4294967295
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	fc 01       	movw	r30, r24
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	a2 81       	ldd	r26, Z+2	; 0x02
     f5e:	b3 81       	ldd	r27, Z+3	; 0x03
     f60:	8f 3f       	cpi	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	af 4f       	sbci	r26, 0xFF	; 255
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	39 f4       	brne	.+14     	; 0xf78 <mydelay+0xd0>
	*aux = 0; // zerando tempo_ms para impedir overflow quando o programa passar muito tempo sendo executado
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	fc 01       	movw	r30, r24
     f70:	10 82       	st	Z, r1
     f72:	11 82       	std	Z+1, r1	; 0x01
     f74:	12 82       	std	Z+2, r1	; 0x02
     f76:	13 82       	std	Z+3, r1	; 0x03
}
     f78:	00 00       	nop
     f7a:	2e 96       	adiw	r28, 0x0e	; 14
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <mudacanal>:
void mudacanal(void)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	if (ADMUX == 0b01000000)
     f94:	8c e7       	ldi	r24, 0x7C	; 124
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	80 34       	cpi	r24, 0x40	; 64
     f9e:	a9 f5       	brne	.+106    	; 0x100a <mudacanal+0x7e>
	{
		ADMUX = 0b01000001;       // Tensão interna de ref VCC, canal 1
     fa0:	8c e7       	ldi	r24, 0x7C	; 124
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	21 e4       	ldi	r18, 0x41	; 65
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
		DIDR0 = 0b00111101;       // habilita pino PC1 como entrada de ADC1
     faa:	8e e7       	ldi	r24, 0x7E	; 126
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	2d e3       	ldi	r18, 0x3D	; 61
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
		satO2 = ADC*125.0/1023.0; // A fonte, por algum motivo, só toma 5V como valor de referência.
     fb4:	88 e7       	ldi	r24, 0x78	; 120
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	91 81       	ldd	r25, Z+1	; 0x01
     fbe:	cc 01       	movw	r24, r24
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__floatunsisf>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4a ef       	ldi	r20, 0xFA	; 250
     fd6:	52 e4       	ldi	r21, 0x42	; 66
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 ec       	ldi	r19, 0xC0	; 192
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <satO2>
    1008:	48 c0       	rjmp	.+144    	; 0x109a <mudacanal+0x10e>
//		satO2 = ADC;
	}
	else
	{
		ADMUX   = 0b01000000;
    100a:	8c e7       	ldi	r24, 0x7C	; 124
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	20 e4       	ldi	r18, 0x40	; 64
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
		DIDR0   = 0b00111110;
    1014:	8e e7       	ldi	r24, 0x7E	; 126
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	2e e3       	ldi	r18, 0x3E	; 62
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
		temp_C  = 10.0*((5.0*ADC)/1023.0 + 1.0); // A fonte, por algum motivo, só toma 5V como valor de referência.
    101e:	88 e7       	ldi	r24, 0x78	; 120
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	cc 01       	movw	r24, r24
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <__floatunsisf>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 ea       	ldi	r20, 0xA0	; 160
    1040:	50 e4       	ldi	r21, 0x40	; 64
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 ec       	ldi	r19, 0xC0	; 192
    1052:	4f e7       	ldi	r20, 0x7F	; 127
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__addsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_C>
    108e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <temp_C+0x1>
    1092:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <temp_C+0x2>
    1096:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <temp_C+0x3>
//		temp_C = ADC;
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
    109a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_C>
    109e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_C+0x1>
    10a2:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <temp_C+0x2>
    10a6:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <temp_C+0x3>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	4c e0       	ldi	r20, 0x0C	; 12
    10b0:	52 e4       	ldi	r21, 0x42	; 66
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	b4 f0       	brlt	.+44     	; 0x10ea <mudacanal+0x15e>
    10be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_C>
    10c2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_C+0x1>
    10c6:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <temp_C+0x2>
    10ca:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <temp_C+0x3>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	44 e2       	ldi	r20, 0x24	; 36
    10d4:	52 e4       	ldi	r21, 0x42	; 66
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
    10de:	18 16       	cp	r1, r24
    10e0:	24 f0       	brlt	.+8      	; 0x10ea <mudacanal+0x15e>
    10e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <satO2>
    10e6:	8c 33       	cpi	r24, 0x3C	; 60
    10e8:	50 f4       	brcc	.+20     	; 0x10fe <mudacanal+0x172>
	PORTD |= 0b10000000;
    10ea:	8b e2       	ldi	r24, 0x2B	; 43
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	2b e2       	ldi	r18, 0x2B	; 43
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	f9 01       	movw	r30, r18
    10f4:	20 81       	ld	r18, Z
    10f6:	20 68       	ori	r18, 0x80	; 128
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
	PORTD &= 0b01111111;
}
    10fc:	33 c0       	rjmp	.+102    	; 0x1164 <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    10fe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_C>
    1102:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_C+0x1>
    1106:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <temp_C+0x2>
    110a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <temp_C+0x3>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	4c e0       	ldi	r20, 0x0C	; 12
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	bc 01       	movw	r22, r24
    1118:	cd 01       	movw	r24, r26
    111a:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
    111e:	88 23       	and	r24, r24
    1120:	0c f4       	brge	.+2      	; 0x1124 <mudacanal+0x198>
	PORTD &= 0b01111111;
}
    1122:	20 c0       	rjmp	.+64     	; 0x1164 <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    1124:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_C>
    1128:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_C+0x1>
    112c:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <temp_C+0x2>
    1130:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <temp_C+0x3>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	44 e2       	ldi	r20, 0x24	; 36
    113a:	52 e4       	ldi	r21, 0x42	; 66
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1144:	18 16       	cp	r1, r24
    1146:	0c f4       	brge	.+2      	; 0x114a <mudacanal+0x1be>
	PORTD &= 0b01111111;
}
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    114a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <satO2>
    114e:	8c 33       	cpi	r24, 0x3C	; 60
    1150:	48 f0       	brcs	.+18     	; 0x1164 <mudacanal+0x1d8>
	PORTD &= 0b01111111;
    1152:	8b e2       	ldi	r24, 0x2B	; 43
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	2b e2       	ldi	r18, 0x2B	; 43
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	f9 01       	movw	r30, r18
    115c:	20 81       	ld	r18, Z
    115e:	2f 77       	andi	r18, 0x7F	; 127
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
}
    1164:	00 00       	nop
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <USART_Init>:
// Função para inicialização da USART
void USART_Init(unsigned int ubrr)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	00 d0       	rcall	.+0      	; 0x1172 <USART_Init+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8);          // Ajusta a taxa de transmissão - 8bits >>
    117a:	85 ec       	ldi	r24, 0xC5	; 197
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	3a 81       	ldd	r19, Y+2	; 0x02
    1182:	23 2f       	mov	r18, r19
    1184:	33 27       	eor	r19, r19
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
    118a:	84 ec       	ldi	r24, 0xC4	; 196
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	29 81       	ldd	r18, Y+1	; 0x01
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); // Habilita o transmissor e o receptor
    1194:	81 ec       	ldi	r24, 0xC1	; 193
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	28 e9       	ldi	r18, 0x98	; 152
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);            // Ajusta o formato do frame: 8 bits de dados e 1 de parada
    119e:	82 ec       	ldi	r24, 0xC2	; 194
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	26 e0       	ldi	r18, 0x06	; 6
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
}
    11a8:	00 00       	nop
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <USART_Transmit>:
// Função para envio de um frame de 5 a 8bits
void USART_Transmit(unsigned char data)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	1f 92       	push	r1
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0)));      // Espera a limpeza do registr. de transmissão
    11c0:	00 00       	nop
    11c2:	80 ec       	ldi	r24, 0xC0	; 192
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	80 72       	andi	r24, 0x20	; 32
    11d0:	99 27       	eor	r25, r25
    11d2:	89 2b       	or	r24, r25
    11d4:	b1 f3       	breq	.-20     	; 0x11c2 <USART_Transmit+0xe>
	UDR0 = data;                        // Coloca o dado no registrador e o envia
    11d6:	86 ec       	ldi	r24, 0xC6	; 198
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	29 81       	ldd	r18, Y+1	; 0x01
    11dc:	fc 01       	movw	r30, r24
    11de:	20 83       	st	Z, r18
}
    11e0:	00 00       	nop
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <USART_Receive>:
// Função para recepção de um frame de 5 a 8bits
unsigned char USART_Receive(void)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & (1<<RXC0)));       // Espera o dado ser recebido
    11f2:	00 00       	nop
    11f4:	80 ec       	ldi	r24, 0xC0	; 192
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	88 23       	and	r24, r24
    11fe:	d4 f7       	brge	.-12     	; 0x11f4 <USART_Receive+0xa>
	return UDR0;                        // Lê o dado recebido e retorna
    1200:	86 ec       	ldi	r24, 0xC6	; 198
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	fc 01       	movw	r30, r24
    1206:	80 81       	ld	r24, Z
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <USART_pressao>:
void USART_pressao(unsigned char recebido)
{
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	1f 92       	push	r1
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
	// Por enquanto, não haverá tratamento de erros para o caso de aparecer
	// um erro entre o ; e o :, dada a palavra com tamanho correto e também para a palavra que não termina em :
	
	static uint8_t cont; // Contador para o tamanho da palavra
	static unsigned char aux[8];
	aux[cont] = recebido;
    121a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <cont.2229>
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	87 56       	subi	r24, 0x67	; 103
    1224:	9e 4f       	sbci	r25, 0xFE	; 254
    1226:	29 81       	ldd	r18, Y+1	; 0x01
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
	USART_Transmit(aux[cont]);
    122c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <cont.2229>
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	87 56       	subi	r24, 0x67	; 103
    1236:	9e 4f       	sbci	r25, 0xFE	; 254
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <USART_Transmit>
	cont++;
    1240:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <cont.2229>
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <cont.2229>
	if (cont > 6)
    124a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <cont.2229>
    124e:	87 30       	cpi	r24, 0x07	; 7
    1250:	f8 f0       	brcs	.+62     	; 0x1290 <USART_pressao+0x82>
	{
		cont = 0; // Tamanho da palavra atingido
    1252:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <cont.2229>
		sprintf(pressao, aux);
    1256:	89 e9       	ldi	r24, 0x99	; 153
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	89 2f       	mov	r24, r25
    125c:	8f 93       	push	r24
    125e:	89 e9       	ldi	r24, 0x99	; 153
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	8f 93       	push	r24
    1264:	87 e0       	ldi	r24, 0x07	; 7
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	89 2f       	mov	r24, r25
    126a:	8f 93       	push	r24
    126c:	87 e0       	ldi	r24, 0x07	; 7
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	8f 93       	push	r24
    1272:	0e 94 14 11 	call	0x2228	; 0x2228 <sprintf>
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
		sprintf(aux, "HHHxMMM"); //Resetando o auxiliar para evitar overflow
    127e:	88 e0       	ldi	r24, 0x08	; 8
    1280:	e0 e6       	ldi	r30, 0x60	; 96
    1282:	f1 e0       	ldi	r31, 0x01	; 1
    1284:	a9 e9       	ldi	r26, 0x99	; 153
    1286:	b1 e0       	ldi	r27, 0x01	; 1
    1288:	01 90       	ld	r0, Z+
    128a:	0d 92       	st	X+, r0
    128c:	8a 95       	dec	r24
    128e:	e1 f7       	brne	.-8      	; 0x1288 <USART_pressao+0x7a>
	}
}
    1290:	00 00       	nop
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <controlSlaveBVM>:
void controlSlaveBVM(uint8_t *freq)
{
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	e5 97       	sbiw	r28, 0x35	; 53
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	9d ab       	std	Y+53, r25	; 0x35
    12b0:	8c ab       	std	Y+52, r24	; 0x34
	uint32_t posicao[9] = {2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 4000}; // Pelo Teorema de Tales, posição[angulo] = (200*angulo + 36000)/18 
    12b2:	84 e2       	ldi	r24, 0x24	; 36
    12b4:	e8 e6       	ldi	r30, 0x68	; 104
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	de 01       	movw	r26, r28
    12ba:	50 96       	adiw	r26, 0x10	; 16
    12bc:	01 90       	ld	r0, Z+
    12be:	0d 92       	st	X+, r0
    12c0:	8a 95       	dec	r24
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <controlSlaveBVM+0x22>
	uint8_t i;
	
	for (i = 0; i < 8; i++)
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	d5 c0       	rjmp	.+426    	; 0x1472 <controlSlaveBVM+0x1d8>
	{
		OCR1A = posicao[i]; // Servo BVM
    12c8:	28 e8       	ldi	r18, 0x88	; 136
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	ae 01       	movw	r20, r28
    12dc:	4f 5f       	subi	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	84 0f       	add	r24, r20
    12e2:	95 1f       	adc	r25, r21
    12e4:	0f 96       	adiw	r24, 0x0f	; 15
    12e6:	fc 01       	movw	r30, r24
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	a2 81       	ldd	r26, Z+2	; 0x02
    12ee:	b3 81       	ldd	r27, Z+3	; 0x03
    12f0:	f9 01       	movw	r30, r18
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
		mydelay(60000.0/((*freq)*16.0));
    12f6:	8c a9       	ldd	r24, Y+52	; 0x34
    12f8:	9d a9       	ldd	r25, Y+53	; 0x35
    12fa:	fc 01       	movw	r30, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	09 2e       	mov	r0, r25
    1304:	00 0c       	add	r0, r0
    1306:	aa 0b       	sbc	r26, r26
    1308:	bb 0b       	sbc	r27, r27
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9c 01       	movw	r18, r24
    132c:	ad 01       	movw	r20, r26
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e6       	ldi	r23, 0x60	; 96
    1332:	8a e6       	ldi	r24, 0x6A	; 106
    1334:	97 e4       	ldi	r25, 0x47	; 71
    1336:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 54 07 	call	0xea8	; 0xea8 <mydelay>
		if (OCR1A == 2000)
    1352:	88 e8       	ldi	r24, 0x88	; 136
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	fc 01       	movw	r30, r24
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	80 3d       	cpi	r24, 0xD0	; 208
    135e:	97 40       	sbci	r25, 0x07	; 7
    1360:	09 f0       	breq	.+2      	; 0x1364 <controlSlaveBVM+0xca>
    1362:	84 c0       	rjmp	.+264    	; 0x146c <controlSlaveBVM+0x1d2>
		{	
			PORTD |= 0b10000000;
    1364:	8b e2       	ldi	r24, 0x2B	; 43
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	2b e2       	ldi	r18, 0x2B	; 43
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	20 68       	ori	r18, 0x80	; 128
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	aa ef       	ldi	r26, 0xFA	; 250
    137c:	b3 e4       	ldi	r27, 0x43	; 67
    137e:	8a 83       	std	Y+2, r24	; 0x02
    1380:	9b 83       	std	Y+3, r25	; 0x03
    1382:	ac 83       	std	Y+4, r26	; 0x04
    1384:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a e7       	ldi	r20, 0x7A	; 122
    138c:	55 e4       	ldi	r21, 0x45	; 69
    138e:	6a 81       	ldd	r22, Y+2	; 0x02
    1390:	7b 81       	ldd	r23, Y+3	; 0x03
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8e 83       	std	Y+6, r24	; 0x06
    13a0:	9f 83       	std	Y+7, r25	; 0x07
    13a2:	a8 87       	std	Y+8, r26	; 0x08
    13a4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	6e 81       	ldd	r22, Y+6	; 0x06
    13b0:	7f 81       	ldd	r23, Y+7	; 0x07
    13b2:	88 85       	ldd	r24, Y+8	; 0x08
    13b4:	99 85       	ldd	r25, Y+9	; 0x09
    13b6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <controlSlaveBVM+0x12e>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9b 87       	std	Y+11, r25	; 0x0b
    13c4:	8a 87       	std	Y+10, r24	; 0x0a
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <controlSlaveBVM+0x1ac>
	else if (__tmp > 65535)
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	6e 81       	ldd	r22, Y+6	; 0x06
    13d2:	7f 81       	ldd	r23, Y+7	; 0x07
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	99 85       	ldd	r25, Y+9	; 0x09
    13d8:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <controlSlaveBVM+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	6a 81       	ldd	r22, Y+2	; 0x02
    13ea:	7b 81       	ldd	r23, Y+3	; 0x03
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9b 87       	std	Y+11, r25	; 0x0b
    1406:	8a 87       	std	Y+10, r24	; 0x0a
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <controlSlaveBVM+0x18e>
    140a:	80 e9       	ldi	r24, 0x90	; 144
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	9d 87       	std	Y+13, r25	; 0x0d
    1410:	8c 87       	std	Y+12, r24	; 0x0c
    1412:	8c 85       	ldd	r24, Y+12	; 0x0c
    1414:	9d 85       	ldd	r25, Y+13	; 0x0d
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <controlSlaveBVM+0x17c>
    141a:	9d 87       	std	Y+13, r25	; 0x0d
    141c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1420:	9b 85       	ldd	r25, Y+11	; 0x0b
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9b 87       	std	Y+11, r25	; 0x0b
    1426:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8a 85       	ldd	r24, Y+10	; 0x0a
    142a:	9b 85       	ldd	r25, Y+11	; 0x0b
    142c:	89 2b       	or	r24, r25
    142e:	69 f7       	brne	.-38     	; 0x140a <controlSlaveBVM+0x170>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <controlSlaveBVM+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6e 81       	ldd	r22, Y+6	; 0x06
    1434:	7f 81       	ldd	r23, Y+7	; 0x07
    1436:	88 85       	ldd	r24, Y+8	; 0x08
    1438:	99 85       	ldd	r25, Y+9	; 0x09
    143a:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9b 87       	std	Y+11, r25	; 0x0b
    1444:	8a 87       	std	Y+10, r24	; 0x0a
    1446:	8a 85       	ldd	r24, Y+10	; 0x0a
    1448:	9b 85       	ldd	r25, Y+11	; 0x0b
    144a:	9f 87       	std	Y+15, r25	; 0x0f
    144c:	8e 87       	std	Y+14, r24	; 0x0e
    144e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1450:	9f 85       	ldd	r25, Y+15	; 0x0f
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <controlSlaveBVM+0x1b8>
    1456:	9f 87       	std	Y+15, r25	; 0x0f
    1458:	8e 87       	std	Y+14, r24	; 0x0e
			_delay_ms(500);
			PORTD &= 0b01111111;
    145a:	8b e2       	ldi	r24, 0x2B	; 43
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	2b e2       	ldi	r18, 0x2B	; 43
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	f9 01       	movw	r30, r18
    1464:	20 81       	ld	r18, Z
    1466:	2f 77       	andi	r18, 0x7F	; 127
    1468:	fc 01       	movw	r30, r24
    146a:	20 83       	st	Z, r18
void controlSlaveBVM(uint8_t *freq)
{
	uint32_t posicao[9] = {2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 4000}; // Pelo Teorema de Tales, posição[angulo] = (200*angulo + 36000)/18 
	uint8_t i;
	
	for (i = 0; i < 8; i++)
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	8f 5f       	subi	r24, 0xFF	; 255
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	08 f4       	brcc	.+2      	; 0x147a <controlSlaveBVM+0x1e0>
    1478:	27 cf       	rjmp	.-434    	; 0x12c8 <controlSlaveBVM+0x2e>
			PORTD |= 0b10000000;
			_delay_ms(500);
			PORTD &= 0b01111111;
		}		
	}
	for (i = 8; i > 0; i--)
    147a:	88 e0       	ldi	r24, 0x08	; 8
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	48 c0       	rjmp	.+144    	; 0x1510 <controlSlaveBVM+0x276>
	{
		OCR1A = posicao[i];
    1480:	28 e8       	ldi	r18, 0x88	; 136
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	ae 01       	movw	r20, r28
    1494:	4f 5f       	subi	r20, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	84 0f       	add	r24, r20
    149a:	95 1f       	adc	r25, r21
    149c:	0f 96       	adiw	r24, 0x0f	; 15
    149e:	fc 01       	movw	r30, r24
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	a2 81       	ldd	r26, Z+2	; 0x02
    14a6:	b3 81       	ldd	r27, Z+3	; 0x03
    14a8:	f9 01       	movw	r30, r18
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
		mydelay(60000.0/((*freq)*16.0));
    14ae:	8c a9       	ldd	r24, Y+52	; 0x34
    14b0:	9d a9       	ldd	r25, Y+53	; 0x35
    14b2:	fc 01       	movw	r30, r24
    14b4:	80 81       	ld	r24, Z
    14b6:	88 2f       	mov	r24, r24
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	09 2e       	mov	r0, r25
    14bc:	00 0c       	add	r0, r0
    14be:	aa 0b       	sbc	r26, r26
    14c0:	bb 0b       	sbc	r27, r27
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__floatsisf>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	9c 01       	movw	r18, r24
    14e4:	ad 01       	movw	r20, r26
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e6       	ldi	r23, 0x60	; 96
    14ea:	8a e6       	ldi	r24, 0x6A	; 106
    14ec:	97 e4       	ldi	r25, 0x47	; 71
    14ee:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <__divsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	bc 01       	movw	r22, r24
    14f8:	cd 01       	movw	r24, r26
    14fa:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 54 07 	call	0xea8	; 0xea8 <mydelay>
			PORTD |= 0b10000000;
			_delay_ms(500);
			PORTD &= 0b01111111;
		}		
	}
	for (i = 8; i > 0; i--)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	81 50       	subi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	88 23       	and	r24, r24
    1514:	09 f0       	breq	.+2      	; 0x1518 <controlSlaveBVM+0x27e>
    1516:	b4 cf       	rjmp	.-152    	; 0x1480 <controlSlaveBVM+0x1e6>
	{
		OCR1A = posicao[i];
		mydelay(60000.0/((*freq)*16.0));
	} 
}
    1518:	00 00       	nop
    151a:	e5 96       	adiw	r28, 0x35	; 53
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <controlValve>:
void controlValve(uint8_t *valve)
{
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	00 d0       	rcall	.+0      	; 0x1532 <controlValve+0x6>
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = 20*(*valve) + 2000; // do Teorema de Tales, N = 20*porcentagem + 2000
    153a:	8a e8       	ldi	r24, 0x8A	; 138
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	f9 01       	movw	r30, r18
    1544:	20 81       	ld	r18, Z
    1546:	42 2f       	mov	r20, r18
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	64 e1       	ldi	r22, 0x14	; 20
    154c:	64 9f       	mul	r22, r20
    154e:	90 01       	movw	r18, r0
    1550:	65 9f       	mul	r22, r21
    1552:	30 0d       	add	r19, r0
    1554:	11 24       	eor	r1, r1
    1556:	20 53       	subi	r18, 0x30	; 48
    1558:	38 4f       	sbci	r19, 0xF8	; 248
    155a:	fc 01       	movw	r30, r24
    155c:	31 83       	std	Z+1, r19	; 0x01
    155e:	20 83       	st	Z, r18
}
    1560:	00 00       	nop
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <write>:
void nokia_lcd_write_float(float num, uint8_t scale)
{
	char aux;
	sprintf(aux, "%.1f", num);
	nokia_lcd_write_string(aux, scale);
}
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	00 d0       	rcall	.+0      	; 0x1574 <write+0x8>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	6a 83       	std	Y+2, r22	; 0x02
    157c:	88 e2       	ldi	r24, 0x28	; 40
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	28 e2       	ldi	r18, 0x28	; 40
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	2f 7b       	andi	r18, 0xBF	; 191
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 23       	and	r24, r24
    1592:	51 f0       	breq	.+20     	; 0x15a8 <write+0x3c>
    1594:	88 e2       	ldi	r24, 0x28	; 40
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	28 e2       	ldi	r18, 0x28	; 40
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	28 60       	ori	r18, 0x08	; 8
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18
    15a6:	09 c0       	rjmp	.+18     	; 0x15ba <write+0x4e>
    15a8:	88 e2       	ldi	r24, 0x28	; 40
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	28 e2       	ldi	r18, 0x28	; 40
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	f9 01       	movw	r30, r18
    15b2:	20 81       	ld	r18, Z
    15b4:	27 7f       	andi	r18, 0xF7	; 247
    15b6:	fc 01       	movw	r30, r24
    15b8:	20 83       	st	Z, r18
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	3c c0       	rjmp	.+120    	; 0x1636 <write+0xca>
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	21 2f       	mov	r18, r17
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	47 e0       	ldi	r20, 0x07	; 7
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	ba 01       	movw	r22, r20
    15ce:	62 1b       	sub	r22, r18
    15d0:	73 0b       	sbc	r23, r19
    15d2:	9b 01       	movw	r18, r22
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <write+0x6e>
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	2a 95       	dec	r18
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <write+0x6a>
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	99 27       	eor	r25, r25
    15e2:	89 2b       	or	r24, r25
    15e4:	51 f0       	breq	.+20     	; 0x15fa <write+0x8e>
    15e6:	88 e2       	ldi	r24, 0x28	; 40
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	28 e2       	ldi	r18, 0x28	; 40
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	f9 01       	movw	r30, r18
    15f0:	20 81       	ld	r18, Z
    15f2:	20 61       	ori	r18, 0x10	; 16
    15f4:	fc 01       	movw	r30, r24
    15f6:	20 83       	st	Z, r18
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <write+0xa0>
    15fa:	88 e2       	ldi	r24, 0x28	; 40
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	28 e2       	ldi	r18, 0x28	; 40
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	f9 01       	movw	r30, r18
    1604:	20 81       	ld	r18, Z
    1606:	2f 7e       	andi	r18, 0xEF	; 239
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
    160c:	88 e2       	ldi	r24, 0x28	; 40
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	28 e2       	ldi	r18, 0x28	; 40
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	f9 01       	movw	r30, r18
    1616:	20 81       	ld	r18, Z
    1618:	20 62       	ori	r18, 0x20	; 32
    161a:	fc 01       	movw	r30, r24
    161c:	20 83       	st	Z, r18
    161e:	88 e2       	ldi	r24, 0x28	; 40
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	28 e2       	ldi	r18, 0x28	; 40
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	f9 01       	movw	r30, r18
    1628:	20 81       	ld	r18, Z
    162a:	2f 7d       	andi	r18, 0xDF	; 223
    162c:	fc 01       	movw	r30, r24
    162e:	20 83       	st	Z, r18
    1630:	81 2f       	mov	r24, r17
    1632:	11 e0       	ldi	r17, 0x01	; 1
    1634:	18 0f       	add	r17, r24
    1636:	18 30       	cpi	r17, 0x08	; 8
    1638:	10 f2       	brcs	.-124    	; 0x15be <write+0x52>
    163a:	88 e2       	ldi	r24, 0x28	; 40
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	28 e2       	ldi	r18, 0x28	; 40
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	f9 01       	movw	r30, r18
    1644:	20 81       	ld	r18, Z
    1646:	20 64       	ori	r18, 0x40	; 64
    1648:	fc 01       	movw	r30, r24
    164a:	20 83       	st	Z, r18
    164c:	00 00       	nop
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	08 95       	ret

0000165a <write_cmd>:
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	1f 92       	push	r1
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	0e 94 b6 0a 	call	0x156c	; 0x156c <write>
    166e:	00 00       	nop
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <write_data>:
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	1f 92       	push	r1
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	0e 94 b6 0a 	call	0x156c	; 0x156c <write>
    168c:	00 00       	nop
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <nokia_lcd_init>:
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	6c 97       	sbiw	r28, 0x1c	; 28
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	87 e2       	ldi	r24, 0x27	; 39
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	27 e2       	ldi	r18, 0x27	; 39
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	f9 01       	movw	r30, r18
    16b8:	20 81       	ld	r18, Z
    16ba:	20 64       	ori	r18, 0x40	; 64
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
    16c0:	87 e2       	ldi	r24, 0x27	; 39
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	27 e2       	ldi	r18, 0x27	; 39
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	f9 01       	movw	r30, r18
    16ca:	20 81       	ld	r18, Z
    16cc:	24 60       	ori	r18, 0x04	; 4
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
    16d2:	87 e2       	ldi	r24, 0x27	; 39
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	27 e2       	ldi	r18, 0x27	; 39
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f9 01       	movw	r30, r18
    16dc:	20 81       	ld	r18, Z
    16de:	28 60       	ori	r18, 0x08	; 8
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 83       	st	Z, r18
    16e4:	87 e2       	ldi	r24, 0x27	; 39
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	27 e2       	ldi	r18, 0x27	; 39
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	f9 01       	movw	r30, r18
    16ee:	20 81       	ld	r18, Z
    16f0:	20 61       	ori	r18, 0x10	; 16
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 83       	st	Z, r18
    16f6:	87 e2       	ldi	r24, 0x27	; 39
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	27 e2       	ldi	r18, 0x27	; 39
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	f9 01       	movw	r30, r18
    1700:	20 81       	ld	r18, Z
    1702:	20 62       	ori	r18, 0x20	; 32
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
    1708:	88 e2       	ldi	r24, 0x28	; 40
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	28 e2       	ldi	r18, 0x28	; 40
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	f9 01       	movw	r30, r18
    1712:	20 81       	ld	r18, Z
    1714:	24 60       	ori	r18, 0x04	; 4
    1716:	fc 01       	movw	r30, r24
    1718:	20 83       	st	Z, r18
    171a:	88 e2       	ldi	r24, 0x28	; 40
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	28 e2       	ldi	r18, 0x28	; 40
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	f9 01       	movw	r30, r18
    1724:	20 81       	ld	r18, Z
    1726:	20 64       	ori	r18, 0x40	; 64
    1728:	fc 01       	movw	r30, r24
    172a:	20 83       	st	Z, r18
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e2       	ldi	r26, 0x20	; 32
    1732:	b1 e4       	ldi	r27, 0x41	; 65
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	ab 83       	std	Y+3, r26	; 0x03
    173a:	bc 83       	std	Y+4, r27	; 0x04
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a e7       	ldi	r20, 0x7A	; 122
    1742:	53 e4       	ldi	r21, 0x43	; 67
    1744:	69 81       	ldd	r22, Y+1	; 0x01
    1746:	7a 81       	ldd	r23, Y+2	; 0x02
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	9c 8b       	std	Y+20, r25	; 0x14
    1758:	ad 8b       	std	Y+21, r26	; 0x15
    175a:	be 8b       	std	Y+22, r27	; 0x16
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	6b 89       	ldd	r22, Y+19	; 0x13
    1766:	7c 89       	ldd	r23, Y+20	; 0x14
    1768:	8d 89       	ldd	r24, Y+21	; 0x15
    176a:	9e 89       	ldd	r25, Y+22	; 0x16
    176c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1770:	88 23       	and	r24, r24
    1772:	2c f4       	brge	.+10     	; 0x177e <nokia_lcd_init+0xe8>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	98 8f       	std	Y+24, r25	; 0x18
    177a:	8f 8b       	std	Y+23, r24	; 0x17
    177c:	3f c0       	rjmp	.+126    	; 0x17fc <nokia_lcd_init+0x166>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	6b 89       	ldd	r22, Y+19	; 0x13
    1788:	7c 89       	ldd	r23, Y+20	; 0x14
    178a:	8d 89       	ldd	r24, Y+21	; 0x15
    178c:	9e 89       	ldd	r25, Y+22	; 0x16
    178e:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
    1792:	18 16       	cp	r1, r24
    1794:	4c f5       	brge	.+82     	; 0x17e8 <nokia_lcd_init+0x152>
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	69 81       	ldd	r22, Y+1	; 0x01
    17a0:	7a 81       	ldd	r23, Y+2	; 0x02
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	bc 01       	movw	r22, r24
    17b0:	cd 01       	movw	r24, r26
    17b2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	98 8f       	std	Y+24, r25	; 0x18
    17bc:	8f 8b       	std	Y+23, r24	; 0x17
    17be:	0f c0       	rjmp	.+30     	; 0x17de <nokia_lcd_init+0x148>
    17c0:	89 e1       	ldi	r24, 0x19	; 25
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9a 8f       	std	Y+26, r25	; 0x1a
    17c6:	89 8f       	std	Y+25, r24	; 0x19
    17c8:	89 8d       	ldd	r24, Y+25	; 0x19
    17ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <nokia_lcd_init+0x136>
    17d0:	9a 8f       	std	Y+26, r25	; 0x1a
    17d2:	89 8f       	std	Y+25, r24	; 0x19
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	98 8f       	std	Y+24, r25	; 0x18
    17dc:	8f 8b       	std	Y+23, r24	; 0x17
    17de:	8f 89       	ldd	r24, Y+23	; 0x17
    17e0:	98 8d       	ldd	r25, Y+24	; 0x18
    17e2:	89 2b       	or	r24, r25
    17e4:	69 f7       	brne	.-38     	; 0x17c0 <nokia_lcd_init+0x12a>
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <nokia_lcd_init+0x17a>
    17e8:	6b 89       	ldd	r22, Y+19	; 0x13
    17ea:	7c 89       	ldd	r23, Y+20	; 0x14
    17ec:	8d 89       	ldd	r24, Y+21	; 0x15
    17ee:	9e 89       	ldd	r25, Y+22	; 0x16
    17f0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	98 8f       	std	Y+24, r25	; 0x18
    17fa:	8f 8b       	std	Y+23, r24	; 0x17
    17fc:	8f 89       	ldd	r24, Y+23	; 0x17
    17fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1800:	9c 8f       	std	Y+28, r25	; 0x1c
    1802:	8b 8f       	std	Y+27, r24	; 0x1b
    1804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <nokia_lcd_init+0x172>
    180c:	9c 8f       	std	Y+28, r25	; 0x1c
    180e:	8b 8f       	std	Y+27, r24	; 0x1b
    1810:	88 e2       	ldi	r24, 0x28	; 40
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	28 e2       	ldi	r18, 0x28	; 40
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	f9 01       	movw	r30, r18
    181a:	20 81       	ld	r18, Z
    181c:	2b 7f       	andi	r18, 0xFB	; 251
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	ac e8       	ldi	r26, 0x8C	; 140
    1828:	b2 e4       	ldi	r27, 0x42	; 66
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	af 83       	std	Y+7, r26	; 0x07
    1830:	b8 87       	std	Y+8, r27	; 0x08
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	4a e7       	ldi	r20, 0x7A	; 122
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	6d 81       	ldd	r22, Y+5	; 0x05
    183c:	7e 81       	ldd	r23, Y+6	; 0x06
    183e:	8f 81       	ldd	r24, Y+7	; 0x07
    1840:	98 85       	ldd	r25, Y+8	; 0x08
    1842:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	89 87       	std	Y+9, r24	; 0x09
    184c:	9a 87       	std	Y+10, r25	; 0x0a
    184e:	ab 87       	std	Y+11, r26	; 0x0b
    1850:	bc 87       	std	Y+12, r27	; 0x0c
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	69 85       	ldd	r22, Y+9	; 0x09
    185c:	7a 85       	ldd	r23, Y+10	; 0x0a
    185e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1860:	9c 85       	ldd	r25, Y+12	; 0x0c
    1862:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__cmpsf2>
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <nokia_lcd_init+0x1de>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9e 87       	std	Y+14, r25	; 0x0e
    1870:	8d 87       	std	Y+13, r24	; 0x0d
    1872:	3f c0       	rjmp	.+126    	; 0x18f2 <nokia_lcd_init+0x25c>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	3f ef       	ldi	r19, 0xFF	; 255
    1878:	4f e7       	ldi	r20, 0x7F	; 127
    187a:	57 e4       	ldi	r21, 0x47	; 71
    187c:	69 85       	ldd	r22, Y+9	; 0x09
    187e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1880:	8b 85       	ldd	r24, Y+11	; 0x0b
    1882:	9c 85       	ldd	r25, Y+12	; 0x0c
    1884:	0e 94 44 10 	call	0x2088	; 0x2088 <__gesf2>
    1888:	18 16       	cp	r1, r24
    188a:	4c f5       	brge	.+82     	; 0x18de <nokia_lcd_init+0x248>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e2       	ldi	r20, 0x20	; 32
    1892:	51 e4       	ldi	r21, 0x41	; 65
    1894:	6d 81       	ldd	r22, Y+5	; 0x05
    1896:	7e 81       	ldd	r23, Y+6	; 0x06
    1898:	8f 81       	ldd	r24, Y+7	; 0x07
    189a:	98 85       	ldd	r25, Y+8	; 0x08
    189c:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	9e 87       	std	Y+14, r25	; 0x0e
    18b2:	8d 87       	std	Y+13, r24	; 0x0d
    18b4:	0f c0       	rjmp	.+30     	; 0x18d4 <nokia_lcd_init+0x23e>
    18b6:	89 e1       	ldi	r24, 0x19	; 25
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
    18be:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c0:	98 89       	ldd	r25, Y+16	; 0x10
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <nokia_lcd_init+0x22c>
    18c6:	98 8b       	std	Y+16, r25	; 0x10
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	9e 87       	std	Y+14, r25	; 0x0e
    18d2:	8d 87       	std	Y+13, r24	; 0x0d
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d8:	89 2b       	or	r24, r25
    18da:	69 f7       	brne	.-38     	; 0x18b6 <nokia_lcd_init+0x220>
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <nokia_lcd_init+0x270>
    18de:	69 85       	ldd	r22, Y+9	; 0x09
    18e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    18e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    18e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    18e6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 87       	std	Y+14, r25	; 0x0e
    18f0:	8d 87       	std	Y+13, r24	; 0x0d
    18f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
    18fa:	89 89       	ldd	r24, Y+17	; 0x11
    18fc:	9a 89       	ldd	r25, Y+18	; 0x12
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <nokia_lcd_init+0x268>
    1902:	9a 8b       	std	Y+18, r25	; 0x12
    1904:	89 8b       	std	Y+17, r24	; 0x11
    1906:	88 e2       	ldi	r24, 0x28	; 40
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	28 e2       	ldi	r18, 0x28	; 40
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	f9 01       	movw	r30, r18
    1910:	20 81       	ld	r18, Z
    1912:	24 60       	ori	r18, 0x04	; 4
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18
    1918:	88 e2       	ldi	r24, 0x28	; 40
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	28 e2       	ldi	r18, 0x28	; 40
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	2f 7b       	andi	r18, 0xBF	; 191
    1926:	fc 01       	movw	r30, r24
    1928:	20 83       	st	Z, r18
    192a:	81 e2       	ldi	r24, 0x21	; 33
    192c:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1930:	83 e1       	ldi	r24, 0x13	; 19
    1932:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1936:	86 e0       	ldi	r24, 0x06	; 6
    1938:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    193c:	82 ec       	ldi	r24, 0xC2	; 194
    193e:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1942:	80 e2       	ldi	r24, 0x20	; 32
    1944:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1948:	89 e0       	ldi	r24, 0x09	; 9
    194a:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    194e:	80 e8       	ldi	r24, 0x80	; 128
    1950:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1954:	80 e4       	ldi	r24, 0x40	; 64
    1956:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    195a:	00 e0       	ldi	r16, 0x00	; 0
    195c:	10 e0       	ldi	r17, 0x00	; 0
    195e:	05 c0       	rjmp	.+10     	; 0x196a <nokia_lcd_init+0x2d4>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 3c 0b 	call	0x1678	; 0x1678 <write_data>
    1966:	0f 5f       	subi	r16, 0xFF	; 255
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	08 3f       	cpi	r16, 0xF8	; 248
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	1f 07       	cpc	r17, r31
    1970:	b8 f3       	brcs	.-18     	; 0x1960 <nokia_lcd_init+0x2ca>
    1972:	88 e0       	ldi	r24, 0x08	; 8
    1974:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    1978:	8c e0       	ldi	r24, 0x0C	; 12
    197a:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    197e:	00 00       	nop
    1980:	6c 96       	adiw	r28, 0x1c	; 28
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <nokia_lcd_clear>:
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	80 e8       	ldi	r24, 0x80	; 128
    19a4:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    19a8:	80 e4       	ldi	r24, 0x40	; 64
    19aa:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
    19ae:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <nokia_lcd+0x1f8>
    19b2:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <nokia_lcd+0x1f9>
    19b6:	00 e0       	ldi	r16, 0x00	; 0
    19b8:	10 e0       	ldi	r17, 0x00	; 0
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <nokia_lcd_clear+0x34>
    19bc:	c8 01       	movw	r24, r16
    19be:	8f 55       	subi	r24, 0x5F	; 95
    19c0:	9e 4f       	sbci	r25, 0xFE	; 254
    19c2:	fc 01       	movw	r30, r24
    19c4:	10 82       	st	Z, r1
    19c6:	0f 5f       	subi	r16, 0xFF	; 255
    19c8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ca:	08 3f       	cpi	r16, 0xF8	; 248
    19cc:	f1 e0       	ldi	r31, 0x01	; 1
    19ce:	1f 07       	cpc	r17, r31
    19d0:	a8 f3       	brcs	.-22     	; 0x19bc <nokia_lcd_clear+0x26>
    19d2:	00 00       	nop
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	08 95       	ret

000019de <nokia_lcd_set_pixel>:
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <nokia_lcd_set_pixel+0x6>
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <nokia_lcd_set_pixel+0x8>
    19e6:	1f 92       	push	r1
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	6c 83       	std	Y+4, r22	; 0x04
    19f0:	4d 83       	std	Y+5, r20	; 0x05
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	86 95       	lsr	r24
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	44 e5       	ldi	r20, 0x54	; 84
    1a00:	48 9f       	mul	r20, r24
    1a02:	90 01       	movw	r18, r0
    1a04:	49 9f       	mul	r20, r25
    1a06:	30 0d       	add	r19, r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	82 0f       	add	r24, r18
    1a12:	93 1f       	adc	r25, r19
    1a14:	8f 55       	subi	r24, 0x5F	; 95
    1a16:	9e 4f       	sbci	r25, 0xFE	; 254
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	88 23       	and	r24, r24
    1a20:	c9 f0       	breq	.+50     	; 0x1a54 <nokia_lcd_set_pixel+0x76>
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	fc 01       	movw	r30, r24
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 01       	movw	r18, r24
    1a34:	27 70       	andi	r18, 0x07	; 7
    1a36:	33 27       	eor	r19, r19
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <nokia_lcd_set_pixel+0x64>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	2a 95       	dec	r18
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <nokia_lcd_set_pixel+0x60>
    1a46:	84 2b       	or	r24, r20
    1a48:	28 2f       	mov	r18, r24
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
    1a52:	19 c0       	rjmp	.+50     	; 0x1a86 <nokia_lcd_set_pixel+0xa8>
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	fc 01       	movw	r30, r24
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9c 01       	movw	r18, r24
    1a66:	27 70       	andi	r18, 0x07	; 7
    1a68:	33 27       	eor	r19, r19
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <nokia_lcd_set_pixel+0x96>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	2a 95       	dec	r18
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <nokia_lcd_set_pixel+0x92>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	fc 01       	movw	r30, r24
    1a84:	20 83       	st	Z, r18
    1a86:	00 00       	nop
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <nokia_lcd_write_char>:
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <nokia_lcd_write_char+0xa>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <nokia_lcd_write_char+0xc>
    1aa4:	1f 92       	push	r1
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8c 83       	std	Y+4, r24	; 0x04
    1aac:	6d 83       	std	Y+5, r22	; 0x05
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	65 c0       	rjmp	.+202    	; 0x1b7c <nokia_lcd_write_char+0xe4>
    1ab2:	00 e0       	ldi	r16, 0x00	; 0
    1ab4:	4e c0       	rjmp	.+156    	; 0x1b52 <nokia_lcd_write_char+0xba>
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	20 52       	subi	r18, 0x20	; 32
    1ac0:	31 09       	sbc	r19, r1
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	81 2f       	mov	r24, r17
    1ac6:	69 2f       	mov	r22, r25
    1ac8:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodqi4>
    1acc:	48 2f       	mov	r20, r24
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	84 0f       	add	r24, r20
    1ae0:	95 1f       	adc	r25, r21
    1ae2:	88 59       	subi	r24, 0x98	; 152
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	fc 01       	movw	r30, r24
    1af0:	84 91       	lpm	r24, Z
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	80 2f       	mov	r24, r16
    1afe:	69 2f       	mov	r22, r25
    1b00:	0e 94 b6 10 	call	0x216c	; 0x216c <__udivmodqi4>
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a9 01       	movw	r20, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <nokia_lcd_write_char+0x78>
    1b0c:	55 95       	asr	r21
    1b0e:	47 95       	ror	r20
    1b10:	8a 95       	dec	r24
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <nokia_lcd_write_char+0x74>
    1b14:	ca 01       	movw	r24, r20
    1b16:	81 70       	andi	r24, 0x01	; 1
    1b18:	99 27       	eor	r25, r25
    1b1a:	89 2b       	or	r24, r25
    1b1c:	61 f0       	breq	.+24     	; 0x1b36 <nokia_lcd_write_char+0x9e>
    1b1e:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <nokia_lcd+0x1f9>
    1b22:	98 2f       	mov	r25, r24
    1b24:	90 0f       	add	r25, r16
    1b26:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <nokia_lcd+0x1f8>
    1b2a:	81 0f       	add	r24, r17
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	69 2f       	mov	r22, r25
    1b30:	0e 94 ef 0c 	call	0x19de	; 0x19de <nokia_lcd_set_pixel>
    1b34:	0b c0       	rjmp	.+22     	; 0x1b4c <nokia_lcd_write_char+0xb4>
    1b36:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <nokia_lcd+0x1f9>
    1b3a:	98 2f       	mov	r25, r24
    1b3c:	90 0f       	add	r25, r16
    1b3e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <nokia_lcd+0x1f8>
    1b42:	81 0f       	add	r24, r17
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	69 2f       	mov	r22, r25
    1b48:	0e 94 ef 0c 	call	0x19de	; 0x19de <nokia_lcd_set_pixel>
    1b4c:	80 2f       	mov	r24, r16
    1b4e:	01 e0       	ldi	r16, 0x01	; 1
    1b50:	08 0f       	add	r16, r24
    1b52:	40 2f       	mov	r20, r16
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	c9 01       	movw	r24, r18
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	82 1b       	sub	r24, r18
    1b6c:	93 0b       	sbc	r25, r19
    1b6e:	48 17       	cp	r20, r24
    1b70:	59 07       	cpc	r21, r25
    1b72:	0c f4       	brge	.+2      	; 0x1b76 <nokia_lcd_write_char+0xde>
    1b74:	a0 cf       	rjmp	.-192    	; 0x1ab6 <nokia_lcd_write_char+0x1e>
    1b76:	81 2f       	mov	r24, r17
    1b78:	11 e0       	ldi	r17, 0x01	; 1
    1b7a:	18 0f       	add	r17, r24
    1b7c:	41 2f       	mov	r20, r17
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	c9 01       	movw	r24, r18
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	48 17       	cp	r20, r24
    1b96:	59 07       	cpc	r21, r25
    1b98:	0c f4       	brge	.+2      	; 0x1b9c <nokia_lcd_write_char+0x104>
    1b9a:	8b cf       	rjmp	.-234    	; 0x1ab2 <nokia_lcd_write_char+0x1a>
    1b9c:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <nokia_lcd+0x1f8>
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	89 2f       	mov	r24, r25
    1ba4:	88 0f       	add	r24, r24
    1ba6:	88 0f       	add	r24, r24
    1ba8:	89 0f       	add	r24, r25
    1baa:	82 0f       	add	r24, r18
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <nokia_lcd+0x1f8>
    1bb2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <nokia_lcd+0x1f8>
    1bb6:	84 35       	cpi	r24, 0x54	; 84
    1bb8:	70 f0       	brcs	.+28     	; 0x1bd6 <nokia_lcd_write_char+0x13e>
    1bba:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <nokia_lcd+0x1f8>
    1bbe:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <nokia_lcd+0x1f9>
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	89 2f       	mov	r24, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	88 0f       	add	r24, r24
    1bca:	88 0f       	add	r24, r24
    1bcc:	89 1b       	sub	r24, r25
    1bce:	82 0f       	add	r24, r18
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <nokia_lcd+0x1f9>
    1bd6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <nokia_lcd+0x1f9>
    1bda:	80 33       	cpi	r24, 0x30	; 48
    1bdc:	20 f0       	brcs	.+8      	; 0x1be6 <nokia_lcd_write_char+0x14e>
    1bde:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <nokia_lcd+0x1f8>
    1be2:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <nokia_lcd+0x1f9>
    1be6:	00 00       	nop
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <nokia_lcd_write_string>:
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <nokia_lcd_write_string+0x6>
    1c02:	1f 92       	push	r1
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6b 83       	std	Y+3, r22	; 0x03
    1c0e:	0c c0       	rjmp	.+24     	; 0x1c28 <nokia_lcd_write_string+0x2c>
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	9c 01       	movw	r18, r24
    1c16:	2f 5f       	subi	r18, 0xFF	; 255
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	3a 83       	std	Y+2, r19	; 0x02
    1c1c:	29 83       	std	Y+1, r18	; 0x01
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	6b 81       	ldd	r22, Y+3	; 0x03
    1c24:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <nokia_lcd_write_char>
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 23       	and	r24, r24
    1c32:	71 f7       	brne	.-36     	; 0x1c10 <nokia_lcd_write_string+0x14>
    1c34:	00 00       	nop
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <nokia_lcd_write_int>:
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <nokia_lcd_write_int+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <nokia_lcd_write_int+0x8>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	9b 83       	std	Y+3, r25	; 0x03
    1c50:	8a 83       	std	Y+2, r24	; 0x02
    1c52:	6c 83       	std	Y+4, r22	; 0x04
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	88 2f       	mov	r24, r24
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	4a e0       	ldi	r20, 0x0A	; 10
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	b9 01       	movw	r22, r18
    1c66:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <itoa>
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	88 2f       	mov	r24, r24
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	6c 81       	ldd	r22, Y+4	; 0x04
    1c72:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <nokia_lcd_write_string>
    1c76:	00 00       	nop
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <nokia_lcd_set_cursor>:
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <nokia_lcd_set_cursor+0x6>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <nokia_lcd+0x1f9>
}
    1ca0:	00 00       	nop
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	08 95       	ret

00001cac <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1cb8:	80 e8       	ldi	r24, 0x80	; 128
    1cba:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>
	write_cmd(0x40);
    1cbe:	80 e4       	ldi	r24, 0x40	; 64
    1cc0:	0e 94 2d 0b 	call	0x165a	; 0x165a <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1cc4:	00 e0       	ldi	r16, 0x00	; 0
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1cca:	c8 01       	movw	r24, r16
    1ccc:	8f 55       	subi	r24, 0x5F	; 95
    1cce:	9e 4f       	sbci	r25, 0xFE	; 254
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1cd8:	0f 5f       	subi	r16, 0xFF	; 255
    1cda:	1f 4f       	sbci	r17, 0xFF	; 255
    1cdc:	08 3f       	cpi	r16, 0xF8	; 248
    1cde:	f1 e0       	ldi	r31, 0x01	; 1
    1ce0:	1f 07       	cpc	r17, r31
    1ce2:	98 f3       	brcs	.-26     	; 0x1cca <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1ce4:	00 00       	nop
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <__subsf3>:
    1cf0:	50 58       	subi	r21, 0x80	; 128

00001cf2 <__addsf3>:
    1cf2:	bb 27       	eor	r27, r27
    1cf4:	aa 27       	eor	r26, r26
    1cf6:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__addsf3x>
    1cfa:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_round>
    1cfe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fp_pscA>
    1d02:	38 f0       	brcs	.+14     	; 0x1d12 <__addsf3+0x20>
    1d04:	0e 94 03 10 	call	0x2006	; 0x2006 <__fp_pscB>
    1d08:	20 f0       	brcs	.+8      	; 0x1d12 <__addsf3+0x20>
    1d0a:	39 f4       	brne	.+14     	; 0x1d1a <__addsf3+0x28>
    1d0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <__addsf3+0x24>
    1d10:	26 f4       	brtc	.+8      	; 0x1d1a <__addsf3+0x28>
    1d12:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_nan>
    1d16:	0e f4       	brtc	.+2      	; 0x1d1a <__addsf3+0x28>
    1d18:	e0 95       	com	r30
    1d1a:	e7 fb       	bst	r30, 7
    1d1c:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_inf>

00001d20 <__addsf3x>:
    1d20:	e9 2f       	mov	r30, r25
    1d22:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fp_split3>
    1d26:	58 f3       	brcs	.-42     	; 0x1cfe <__addsf3+0xc>
    1d28:	ba 17       	cp	r27, r26
    1d2a:	62 07       	cpc	r22, r18
    1d2c:	73 07       	cpc	r23, r19
    1d2e:	84 07       	cpc	r24, r20
    1d30:	95 07       	cpc	r25, r21
    1d32:	20 f0       	brcs	.+8      	; 0x1d3c <__addsf3x+0x1c>
    1d34:	79 f4       	brne	.+30     	; 0x1d54 <__addsf3x+0x34>
    1d36:	a6 f5       	brtc	.+104    	; 0x1da0 <__addsf3x+0x80>
    1d38:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_zero>
    1d3c:	0e f4       	brtc	.+2      	; 0x1d40 <__addsf3x+0x20>
    1d3e:	e0 95       	com	r30
    1d40:	0b 2e       	mov	r0, r27
    1d42:	ba 2f       	mov	r27, r26
    1d44:	a0 2d       	mov	r26, r0
    1d46:	0b 01       	movw	r0, r22
    1d48:	b9 01       	movw	r22, r18
    1d4a:	90 01       	movw	r18, r0
    1d4c:	0c 01       	movw	r0, r24
    1d4e:	ca 01       	movw	r24, r20
    1d50:	a0 01       	movw	r20, r0
    1d52:	11 24       	eor	r1, r1
    1d54:	ff 27       	eor	r31, r31
    1d56:	59 1b       	sub	r21, r25
    1d58:	99 f0       	breq	.+38     	; 0x1d80 <__addsf3x+0x60>
    1d5a:	59 3f       	cpi	r21, 0xF9	; 249
    1d5c:	50 f4       	brcc	.+20     	; 0x1d72 <__addsf3x+0x52>
    1d5e:	50 3e       	cpi	r21, 0xE0	; 224
    1d60:	68 f1       	brcs	.+90     	; 0x1dbc <__addsf3x+0x9c>
    1d62:	1a 16       	cp	r1, r26
    1d64:	f0 40       	sbci	r31, 0x00	; 0
    1d66:	a2 2f       	mov	r26, r18
    1d68:	23 2f       	mov	r18, r19
    1d6a:	34 2f       	mov	r19, r20
    1d6c:	44 27       	eor	r20, r20
    1d6e:	58 5f       	subi	r21, 0xF8	; 248
    1d70:	f3 cf       	rjmp	.-26     	; 0x1d58 <__addsf3x+0x38>
    1d72:	46 95       	lsr	r20
    1d74:	37 95       	ror	r19
    1d76:	27 95       	ror	r18
    1d78:	a7 95       	ror	r26
    1d7a:	f0 40       	sbci	r31, 0x00	; 0
    1d7c:	53 95       	inc	r21
    1d7e:	c9 f7       	brne	.-14     	; 0x1d72 <__addsf3x+0x52>
    1d80:	7e f4       	brtc	.+30     	; 0x1da0 <__addsf3x+0x80>
    1d82:	1f 16       	cp	r1, r31
    1d84:	ba 0b       	sbc	r27, r26
    1d86:	62 0b       	sbc	r22, r18
    1d88:	73 0b       	sbc	r23, r19
    1d8a:	84 0b       	sbc	r24, r20
    1d8c:	ba f0       	brmi	.+46     	; 0x1dbc <__addsf3x+0x9c>
    1d8e:	91 50       	subi	r25, 0x01	; 1
    1d90:	a1 f0       	breq	.+40     	; 0x1dba <__addsf3x+0x9a>
    1d92:	ff 0f       	add	r31, r31
    1d94:	bb 1f       	adc	r27, r27
    1d96:	66 1f       	adc	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	88 1f       	adc	r24, r24
    1d9c:	c2 f7       	brpl	.-16     	; 0x1d8e <__addsf3x+0x6e>
    1d9e:	0e c0       	rjmp	.+28     	; 0x1dbc <__addsf3x+0x9c>
    1da0:	ba 0f       	add	r27, r26
    1da2:	62 1f       	adc	r22, r18
    1da4:	73 1f       	adc	r23, r19
    1da6:	84 1f       	adc	r24, r20
    1da8:	48 f4       	brcc	.+18     	; 0x1dbc <__addsf3x+0x9c>
    1daa:	87 95       	ror	r24
    1dac:	77 95       	ror	r23
    1dae:	67 95       	ror	r22
    1db0:	b7 95       	ror	r27
    1db2:	f7 95       	ror	r31
    1db4:	9e 3f       	cpi	r25, 0xFE	; 254
    1db6:	08 f0       	brcs	.+2      	; 0x1dba <__addsf3x+0x9a>
    1db8:	b0 cf       	rjmp	.-160    	; 0x1d1a <__addsf3+0x28>
    1dba:	93 95       	inc	r25
    1dbc:	88 0f       	add	r24, r24
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <__addsf3x+0xa2>
    1dc0:	99 27       	eor	r25, r25
    1dc2:	ee 0f       	add	r30, r30
    1dc4:	97 95       	ror	r25
    1dc6:	87 95       	ror	r24
    1dc8:	08 95       	ret

00001dca <__cmpsf2>:
    1dca:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_cmp>
    1dce:	08 f4       	brcc	.+2      	; 0x1dd2 <__cmpsf2+0x8>
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	08 95       	ret

00001dd4 <__divsf3>:
    1dd4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__divsf3x>
    1dd8:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_round>
    1ddc:	0e 94 03 10 	call	0x2006	; 0x2006 <__fp_pscB>
    1de0:	58 f0       	brcs	.+22     	; 0x1df8 <__divsf3+0x24>
    1de2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fp_pscA>
    1de6:	40 f0       	brcs	.+16     	; 0x1df8 <__divsf3+0x24>
    1de8:	29 f4       	brne	.+10     	; 0x1df4 <__divsf3+0x20>
    1dea:	5f 3f       	cpi	r21, 0xFF	; 255
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <__divsf3+0x24>
    1dee:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_inf>
    1df2:	51 11       	cpse	r21, r1
    1df4:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_szero>
    1df8:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_nan>

00001dfc <__divsf3x>:
    1dfc:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fp_split3>
    1e00:	68 f3       	brcs	.-38     	; 0x1ddc <__divsf3+0x8>

00001e02 <__divsf3_pse>:
    1e02:	99 23       	and	r25, r25
    1e04:	b1 f3       	breq	.-20     	; 0x1df2 <__divsf3+0x1e>
    1e06:	55 23       	and	r21, r21
    1e08:	91 f3       	breq	.-28     	; 0x1dee <__divsf3+0x1a>
    1e0a:	95 1b       	sub	r25, r21
    1e0c:	55 0b       	sbc	r21, r21
    1e0e:	bb 27       	eor	r27, r27
    1e10:	aa 27       	eor	r26, r26
    1e12:	62 17       	cp	r22, r18
    1e14:	73 07       	cpc	r23, r19
    1e16:	84 07       	cpc	r24, r20
    1e18:	38 f0       	brcs	.+14     	; 0x1e28 <__divsf3_pse+0x26>
    1e1a:	9f 5f       	subi	r25, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	44 1f       	adc	r20, r20
    1e24:	aa 1f       	adc	r26, r26
    1e26:	a9 f3       	breq	.-22     	; 0x1e12 <__divsf3_pse+0x10>
    1e28:	35 d0       	rcall	.+106    	; 0x1e94 <__divsf3_pse+0x92>
    1e2a:	0e 2e       	mov	r0, r30
    1e2c:	3a f0       	brmi	.+14     	; 0x1e3c <__divsf3_pse+0x3a>
    1e2e:	e0 e8       	ldi	r30, 0x80	; 128
    1e30:	32 d0       	rcall	.+100    	; 0x1e96 <__divsf3_pse+0x94>
    1e32:	91 50       	subi	r25, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	e6 95       	lsr	r30
    1e38:	00 1c       	adc	r0, r0
    1e3a:	ca f7       	brpl	.-14     	; 0x1e2e <__divsf3_pse+0x2c>
    1e3c:	2b d0       	rcall	.+86     	; 0x1e94 <__divsf3_pse+0x92>
    1e3e:	fe 2f       	mov	r31, r30
    1e40:	29 d0       	rcall	.+82     	; 0x1e94 <__divsf3_pse+0x92>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	26 17       	cp	r18, r22
    1e4c:	37 07       	cpc	r19, r23
    1e4e:	48 07       	cpc	r20, r24
    1e50:	ab 07       	cpc	r26, r27
    1e52:	b0 e8       	ldi	r27, 0x80	; 128
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <__divsf3_pse+0x56>
    1e56:	bb 0b       	sbc	r27, r27
    1e58:	80 2d       	mov	r24, r0
    1e5a:	bf 01       	movw	r22, r30
    1e5c:	ff 27       	eor	r31, r31
    1e5e:	93 58       	subi	r25, 0x83	; 131
    1e60:	5f 4f       	sbci	r21, 0xFF	; 255
    1e62:	3a f0       	brmi	.+14     	; 0x1e72 <__divsf3_pse+0x70>
    1e64:	9e 3f       	cpi	r25, 0xFE	; 254
    1e66:	51 05       	cpc	r21, r1
    1e68:	78 f0       	brcs	.+30     	; 0x1e88 <__divsf3_pse+0x86>
    1e6a:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_inf>
    1e6e:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_szero>
    1e72:	5f 3f       	cpi	r21, 0xFF	; 255
    1e74:	e4 f3       	brlt	.-8      	; 0x1e6e <__divsf3_pse+0x6c>
    1e76:	98 3e       	cpi	r25, 0xE8	; 232
    1e78:	d4 f3       	brlt	.-12     	; 0x1e6e <__divsf3_pse+0x6c>
    1e7a:	86 95       	lsr	r24
    1e7c:	77 95       	ror	r23
    1e7e:	67 95       	ror	r22
    1e80:	b7 95       	ror	r27
    1e82:	f7 95       	ror	r31
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__divsf3_pse+0x78>
    1e88:	88 0f       	add	r24, r24
    1e8a:	91 1d       	adc	r25, r1
    1e8c:	96 95       	lsr	r25
    1e8e:	87 95       	ror	r24
    1e90:	97 f9       	bld	r25, 7
    1e92:	08 95       	ret
    1e94:	e1 e0       	ldi	r30, 0x01	; 1
    1e96:	66 0f       	add	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	62 17       	cp	r22, r18
    1ea0:	73 07       	cpc	r23, r19
    1ea2:	84 07       	cpc	r24, r20
    1ea4:	ba 07       	cpc	r27, r26
    1ea6:	20 f0       	brcs	.+8      	; 0x1eb0 <__divsf3_pse+0xae>
    1ea8:	62 1b       	sub	r22, r18
    1eaa:	73 0b       	sbc	r23, r19
    1eac:	84 0b       	sbc	r24, r20
    1eae:	ba 0b       	sbc	r27, r26
    1eb0:	ee 1f       	adc	r30, r30
    1eb2:	88 f7       	brcc	.-30     	; 0x1e96 <__divsf3_pse+0x94>
    1eb4:	e0 95       	com	r30
    1eb6:	08 95       	ret

00001eb8 <__fixsfsi>:
    1eb8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__fixunssfsi>
    1ebc:	68 94       	set
    1ebe:	b1 11       	cpse	r27, r1
    1ec0:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_szero>
    1ec4:	08 95       	ret

00001ec6 <__fixunssfsi>:
    1ec6:	0e 94 23 10 	call	0x2046	; 0x2046 <__fp_splitA>
    1eca:	88 f0       	brcs	.+34     	; 0x1eee <__fixunssfsi+0x28>
    1ecc:	9f 57       	subi	r25, 0x7F	; 127
    1ece:	98 f0       	brcs	.+38     	; 0x1ef6 <__fixunssfsi+0x30>
    1ed0:	b9 2f       	mov	r27, r25
    1ed2:	99 27       	eor	r25, r25
    1ed4:	b7 51       	subi	r27, 0x17	; 23
    1ed6:	b0 f0       	brcs	.+44     	; 0x1f04 <__fixunssfsi+0x3e>
    1ed8:	e1 f0       	breq	.+56     	; 0x1f12 <__fixunssfsi+0x4c>
    1eda:	66 0f       	add	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	1a f0       	brmi	.+6      	; 0x1eea <__fixunssfsi+0x24>
    1ee4:	ba 95       	dec	r27
    1ee6:	c9 f7       	brne	.-14     	; 0x1eda <__fixunssfsi+0x14>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <__fixunssfsi+0x4c>
    1eea:	b1 30       	cpi	r27, 0x01	; 1
    1eec:	91 f0       	breq	.+36     	; 0x1f12 <__fixunssfsi+0x4c>
    1eee:	0e 94 3d 10 	call	0x207a	; 0x207a <__fp_zero>
    1ef2:	b1 e0       	ldi	r27, 0x01	; 1
    1ef4:	08 95       	ret
    1ef6:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__fp_zero>
    1efa:	67 2f       	mov	r22, r23
    1efc:	78 2f       	mov	r23, r24
    1efe:	88 27       	eor	r24, r24
    1f00:	b8 5f       	subi	r27, 0xF8	; 248
    1f02:	39 f0       	breq	.+14     	; 0x1f12 <__fixunssfsi+0x4c>
    1f04:	b9 3f       	cpi	r27, 0xF9	; 249
    1f06:	cc f3       	brlt	.-14     	; 0x1efa <__fixunssfsi+0x34>
    1f08:	86 95       	lsr	r24
    1f0a:	77 95       	ror	r23
    1f0c:	67 95       	ror	r22
    1f0e:	b3 95       	inc	r27
    1f10:	d9 f7       	brne	.-10     	; 0x1f08 <__fixunssfsi+0x42>
    1f12:	3e f4       	brtc	.+14     	; 0x1f22 <__fixunssfsi+0x5c>
    1f14:	90 95       	com	r25
    1f16:	80 95       	com	r24
    1f18:	70 95       	com	r23
    1f1a:	61 95       	neg	r22
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f20:	9f 4f       	sbci	r25, 0xFF	; 255
    1f22:	08 95       	ret

00001f24 <__floatunsisf>:
    1f24:	e8 94       	clt
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <__floatsisf+0x12>

00001f28 <__floatsisf>:
    1f28:	97 fb       	bst	r25, 7
    1f2a:	3e f4       	brtc	.+14     	; 0x1f3a <__floatsisf+0x12>
    1f2c:	90 95       	com	r25
    1f2e:	80 95       	com	r24
    1f30:	70 95       	com	r23
    1f32:	61 95       	neg	r22
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	8f 4f       	sbci	r24, 0xFF	; 255
    1f38:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3a:	99 23       	and	r25, r25
    1f3c:	a9 f0       	breq	.+42     	; 0x1f68 <__floatsisf+0x40>
    1f3e:	f9 2f       	mov	r31, r25
    1f40:	96 e9       	ldi	r25, 0x96	; 150
    1f42:	bb 27       	eor	r27, r27
    1f44:	93 95       	inc	r25
    1f46:	f6 95       	lsr	r31
    1f48:	87 95       	ror	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	b7 95       	ror	r27
    1f50:	f1 11       	cpse	r31, r1
    1f52:	f8 cf       	rjmp	.-16     	; 0x1f44 <__floatsisf+0x1c>
    1f54:	fa f4       	brpl	.+62     	; 0x1f94 <__floatsisf+0x6c>
    1f56:	bb 0f       	add	r27, r27
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <__floatsisf+0x36>
    1f5a:	60 ff       	sbrs	r22, 0
    1f5c:	1b c0       	rjmp	.+54     	; 0x1f94 <__floatsisf+0x6c>
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	8f 4f       	sbci	r24, 0xFF	; 255
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	16 c0       	rjmp	.+44     	; 0x1f94 <__floatsisf+0x6c>
    1f68:	88 23       	and	r24, r24
    1f6a:	11 f0       	breq	.+4      	; 0x1f70 <__floatsisf+0x48>
    1f6c:	96 e9       	ldi	r25, 0x96	; 150
    1f6e:	11 c0       	rjmp	.+34     	; 0x1f92 <__floatsisf+0x6a>
    1f70:	77 23       	and	r23, r23
    1f72:	21 f0       	breq	.+8      	; 0x1f7c <__floatsisf+0x54>
    1f74:	9e e8       	ldi	r25, 0x8E	; 142
    1f76:	87 2f       	mov	r24, r23
    1f78:	76 2f       	mov	r23, r22
    1f7a:	05 c0       	rjmp	.+10     	; 0x1f86 <__floatsisf+0x5e>
    1f7c:	66 23       	and	r22, r22
    1f7e:	71 f0       	breq	.+28     	; 0x1f9c <__floatsisf+0x74>
    1f80:	96 e8       	ldi	r25, 0x86	; 134
    1f82:	86 2f       	mov	r24, r22
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	2a f0       	brmi	.+10     	; 0x1f94 <__floatsisf+0x6c>
    1f8a:	9a 95       	dec	r25
    1f8c:	66 0f       	add	r22, r22
    1f8e:	77 1f       	adc	r23, r23
    1f90:	88 1f       	adc	r24, r24
    1f92:	da f7       	brpl	.-10     	; 0x1f8a <__floatsisf+0x62>
    1f94:	88 0f       	add	r24, r24
    1f96:	96 95       	lsr	r25
    1f98:	87 95       	ror	r24
    1f9a:	97 f9       	bld	r25, 7
    1f9c:	08 95       	ret

00001f9e <__fp_cmp>:
    1f9e:	99 0f       	add	r25, r25
    1fa0:	00 08       	sbc	r0, r0
    1fa2:	55 0f       	add	r21, r21
    1fa4:	aa 0b       	sbc	r26, r26
    1fa6:	e0 e8       	ldi	r30, 0x80	; 128
    1fa8:	fe ef       	ldi	r31, 0xFE	; 254
    1faa:	16 16       	cp	r1, r22
    1fac:	17 06       	cpc	r1, r23
    1fae:	e8 07       	cpc	r30, r24
    1fb0:	f9 07       	cpc	r31, r25
    1fb2:	c0 f0       	brcs	.+48     	; 0x1fe4 <__fp_cmp+0x46>
    1fb4:	12 16       	cp	r1, r18
    1fb6:	13 06       	cpc	r1, r19
    1fb8:	e4 07       	cpc	r30, r20
    1fba:	f5 07       	cpc	r31, r21
    1fbc:	98 f0       	brcs	.+38     	; 0x1fe4 <__fp_cmp+0x46>
    1fbe:	62 1b       	sub	r22, r18
    1fc0:	73 0b       	sbc	r23, r19
    1fc2:	84 0b       	sbc	r24, r20
    1fc4:	95 0b       	sbc	r25, r21
    1fc6:	39 f4       	brne	.+14     	; 0x1fd6 <__fp_cmp+0x38>
    1fc8:	0a 26       	eor	r0, r26
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <__fp_cmp+0x46>
    1fcc:	23 2b       	or	r18, r19
    1fce:	24 2b       	or	r18, r20
    1fd0:	25 2b       	or	r18, r21
    1fd2:	21 f4       	brne	.+8      	; 0x1fdc <__fp_cmp+0x3e>
    1fd4:	08 95       	ret
    1fd6:	0a 26       	eor	r0, r26
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <__fp_cmp+0x3e>
    1fda:	a1 40       	sbci	r26, 0x01	; 1
    1fdc:	a6 95       	lsr	r26
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	81 1d       	adc	r24, r1
    1fe2:	81 1d       	adc	r24, r1
    1fe4:	08 95       	ret

00001fe6 <__fp_inf>:
    1fe6:	97 f9       	bld	r25, 7
    1fe8:	9f 67       	ori	r25, 0x7F	; 127
    1fea:	80 e8       	ldi	r24, 0x80	; 128
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	08 95       	ret

00001ff2 <__fp_nan>:
    1ff2:	9f ef       	ldi	r25, 0xFF	; 255
    1ff4:	80 ec       	ldi	r24, 0xC0	; 192
    1ff6:	08 95       	ret

00001ff8 <__fp_pscA>:
    1ff8:	00 24       	eor	r0, r0
    1ffa:	0a 94       	dec	r0
    1ffc:	16 16       	cp	r1, r22
    1ffe:	17 06       	cpc	r1, r23
    2000:	18 06       	cpc	r1, r24
    2002:	09 06       	cpc	r0, r25
    2004:	08 95       	ret

00002006 <__fp_pscB>:
    2006:	00 24       	eor	r0, r0
    2008:	0a 94       	dec	r0
    200a:	12 16       	cp	r1, r18
    200c:	13 06       	cpc	r1, r19
    200e:	14 06       	cpc	r1, r20
    2010:	05 06       	cpc	r0, r21
    2012:	08 95       	ret

00002014 <__fp_round>:
    2014:	09 2e       	mov	r0, r25
    2016:	03 94       	inc	r0
    2018:	00 0c       	add	r0, r0
    201a:	11 f4       	brne	.+4      	; 0x2020 <__fp_round+0xc>
    201c:	88 23       	and	r24, r24
    201e:	52 f0       	brmi	.+20     	; 0x2034 <__fp_round+0x20>
    2020:	bb 0f       	add	r27, r27
    2022:	40 f4       	brcc	.+16     	; 0x2034 <__fp_round+0x20>
    2024:	bf 2b       	or	r27, r31
    2026:	11 f4       	brne	.+4      	; 0x202c <__fp_round+0x18>
    2028:	60 ff       	sbrs	r22, 0
    202a:	04 c0       	rjmp	.+8      	; 0x2034 <__fp_round+0x20>
    202c:	6f 5f       	subi	r22, 0xFF	; 255
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	8f 4f       	sbci	r24, 0xFF	; 255
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	08 95       	ret

00002036 <__fp_split3>:
    2036:	57 fd       	sbrc	r21, 7
    2038:	90 58       	subi	r25, 0x80	; 128
    203a:	44 0f       	add	r20, r20
    203c:	55 1f       	adc	r21, r21
    203e:	59 f0       	breq	.+22     	; 0x2056 <__fp_splitA+0x10>
    2040:	5f 3f       	cpi	r21, 0xFF	; 255
    2042:	71 f0       	breq	.+28     	; 0x2060 <__fp_splitA+0x1a>
    2044:	47 95       	ror	r20

00002046 <__fp_splitA>:
    2046:	88 0f       	add	r24, r24
    2048:	97 fb       	bst	r25, 7
    204a:	99 1f       	adc	r25, r25
    204c:	61 f0       	breq	.+24     	; 0x2066 <__fp_splitA+0x20>
    204e:	9f 3f       	cpi	r25, 0xFF	; 255
    2050:	79 f0       	breq	.+30     	; 0x2070 <__fp_splitA+0x2a>
    2052:	87 95       	ror	r24
    2054:	08 95       	ret
    2056:	12 16       	cp	r1, r18
    2058:	13 06       	cpc	r1, r19
    205a:	14 06       	cpc	r1, r20
    205c:	55 1f       	adc	r21, r21
    205e:	f2 cf       	rjmp	.-28     	; 0x2044 <__fp_split3+0xe>
    2060:	46 95       	lsr	r20
    2062:	f1 df       	rcall	.-30     	; 0x2046 <__fp_splitA>
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <__fp_splitA+0x30>
    2066:	16 16       	cp	r1, r22
    2068:	17 06       	cpc	r1, r23
    206a:	18 06       	cpc	r1, r24
    206c:	99 1f       	adc	r25, r25
    206e:	f1 cf       	rjmp	.-30     	; 0x2052 <__fp_splitA+0xc>
    2070:	86 95       	lsr	r24
    2072:	71 05       	cpc	r23, r1
    2074:	61 05       	cpc	r22, r1
    2076:	08 94       	sec
    2078:	08 95       	ret

0000207a <__fp_zero>:
    207a:	e8 94       	clt

0000207c <__fp_szero>:
    207c:	bb 27       	eor	r27, r27
    207e:	66 27       	eor	r22, r22
    2080:	77 27       	eor	r23, r23
    2082:	cb 01       	movw	r24, r22
    2084:	97 f9       	bld	r25, 7
    2086:	08 95       	ret

00002088 <__gesf2>:
    2088:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_cmp>
    208c:	08 f4       	brcc	.+2      	; 0x2090 <__gesf2+0x8>
    208e:	8f ef       	ldi	r24, 0xFF	; 255
    2090:	08 95       	ret

00002092 <__mulsf3>:
    2092:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__mulsf3x>
    2096:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__fp_round>
    209a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__fp_pscA>
    209e:	38 f0       	brcs	.+14     	; 0x20ae <__mulsf3+0x1c>
    20a0:	0e 94 03 10 	call	0x2006	; 0x2006 <__fp_pscB>
    20a4:	20 f0       	brcs	.+8      	; 0x20ae <__mulsf3+0x1c>
    20a6:	95 23       	and	r25, r21
    20a8:	11 f0       	breq	.+4      	; 0x20ae <__mulsf3+0x1c>
    20aa:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_inf>
    20ae:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__fp_nan>
    20b2:	11 24       	eor	r1, r1
    20b4:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_szero>

000020b8 <__mulsf3x>:
    20b8:	0e 94 1b 10 	call	0x2036	; 0x2036 <__fp_split3>
    20bc:	70 f3       	brcs	.-36     	; 0x209a <__mulsf3+0x8>

000020be <__mulsf3_pse>:
    20be:	95 9f       	mul	r25, r21
    20c0:	c1 f3       	breq	.-16     	; 0x20b2 <__mulsf3+0x20>
    20c2:	95 0f       	add	r25, r21
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	55 1f       	adc	r21, r21
    20c8:	62 9f       	mul	r22, r18
    20ca:	f0 01       	movw	r30, r0
    20cc:	72 9f       	mul	r23, r18
    20ce:	bb 27       	eor	r27, r27
    20d0:	f0 0d       	add	r31, r0
    20d2:	b1 1d       	adc	r27, r1
    20d4:	63 9f       	mul	r22, r19
    20d6:	aa 27       	eor	r26, r26
    20d8:	f0 0d       	add	r31, r0
    20da:	b1 1d       	adc	r27, r1
    20dc:	aa 1f       	adc	r26, r26
    20de:	64 9f       	mul	r22, r20
    20e0:	66 27       	eor	r22, r22
    20e2:	b0 0d       	add	r27, r0
    20e4:	a1 1d       	adc	r26, r1
    20e6:	66 1f       	adc	r22, r22
    20e8:	82 9f       	mul	r24, r18
    20ea:	22 27       	eor	r18, r18
    20ec:	b0 0d       	add	r27, r0
    20ee:	a1 1d       	adc	r26, r1
    20f0:	62 1f       	adc	r22, r18
    20f2:	73 9f       	mul	r23, r19
    20f4:	b0 0d       	add	r27, r0
    20f6:	a1 1d       	adc	r26, r1
    20f8:	62 1f       	adc	r22, r18
    20fa:	83 9f       	mul	r24, r19
    20fc:	a0 0d       	add	r26, r0
    20fe:	61 1d       	adc	r22, r1
    2100:	22 1f       	adc	r18, r18
    2102:	74 9f       	mul	r23, r20
    2104:	33 27       	eor	r19, r19
    2106:	a0 0d       	add	r26, r0
    2108:	61 1d       	adc	r22, r1
    210a:	23 1f       	adc	r18, r19
    210c:	84 9f       	mul	r24, r20
    210e:	60 0d       	add	r22, r0
    2110:	21 1d       	adc	r18, r1
    2112:	82 2f       	mov	r24, r18
    2114:	76 2f       	mov	r23, r22
    2116:	6a 2f       	mov	r22, r26
    2118:	11 24       	eor	r1, r1
    211a:	9f 57       	subi	r25, 0x7F	; 127
    211c:	50 40       	sbci	r21, 0x00	; 0
    211e:	9a f0       	brmi	.+38     	; 0x2146 <__mulsf3_pse+0x88>
    2120:	f1 f0       	breq	.+60     	; 0x215e <__mulsf3_pse+0xa0>
    2122:	88 23       	and	r24, r24
    2124:	4a f0       	brmi	.+18     	; 0x2138 <__mulsf3_pse+0x7a>
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	bb 1f       	adc	r27, r27
    212c:	66 1f       	adc	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	91 50       	subi	r25, 0x01	; 1
    2134:	50 40       	sbci	r21, 0x00	; 0
    2136:	a9 f7       	brne	.-22     	; 0x2122 <__mulsf3_pse+0x64>
    2138:	9e 3f       	cpi	r25, 0xFE	; 254
    213a:	51 05       	cpc	r21, r1
    213c:	80 f0       	brcs	.+32     	; 0x215e <__mulsf3_pse+0xa0>
    213e:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__fp_inf>
    2142:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_szero>
    2146:	5f 3f       	cpi	r21, 0xFF	; 255
    2148:	e4 f3       	brlt	.-8      	; 0x2142 <__mulsf3_pse+0x84>
    214a:	98 3e       	cpi	r25, 0xE8	; 232
    214c:	d4 f3       	brlt	.-12     	; 0x2142 <__mulsf3_pse+0x84>
    214e:	86 95       	lsr	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	b7 95       	ror	r27
    2156:	f7 95       	ror	r31
    2158:	e7 95       	ror	r30
    215a:	9f 5f       	subi	r25, 0xFF	; 255
    215c:	c1 f7       	brne	.-16     	; 0x214e <__mulsf3_pse+0x90>
    215e:	fe 2b       	or	r31, r30
    2160:	88 0f       	add	r24, r24
    2162:	91 1d       	adc	r25, r1
    2164:	96 95       	lsr	r25
    2166:	87 95       	ror	r24
    2168:	97 f9       	bld	r25, 7
    216a:	08 95       	ret

0000216c <__udivmodqi4>:
    216c:	99 1b       	sub	r25, r25
    216e:	79 e0       	ldi	r23, 0x09	; 9
    2170:	04 c0       	rjmp	.+8      	; 0x217a <__udivmodqi4_ep>

00002172 <__udivmodqi4_loop>:
    2172:	99 1f       	adc	r25, r25
    2174:	96 17       	cp	r25, r22
    2176:	08 f0       	brcs	.+2      	; 0x217a <__udivmodqi4_ep>
    2178:	96 1b       	sub	r25, r22

0000217a <__udivmodqi4_ep>:
    217a:	88 1f       	adc	r24, r24
    217c:	7a 95       	dec	r23
    217e:	c9 f7       	brne	.-14     	; 0x2172 <__udivmodqi4_loop>
    2180:	80 95       	com	r24
    2182:	08 95       	ret

00002184 <__udivmodsi4>:
    2184:	a1 e2       	ldi	r26, 0x21	; 33
    2186:	1a 2e       	mov	r1, r26
    2188:	aa 1b       	sub	r26, r26
    218a:	bb 1b       	sub	r27, r27
    218c:	fd 01       	movw	r30, r26
    218e:	0d c0       	rjmp	.+26     	; 0x21aa <__udivmodsi4_ep>

00002190 <__udivmodsi4_loop>:
    2190:	aa 1f       	adc	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	ee 1f       	adc	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	a2 17       	cp	r26, r18
    219a:	b3 07       	cpc	r27, r19
    219c:	e4 07       	cpc	r30, r20
    219e:	f5 07       	cpc	r31, r21
    21a0:	20 f0       	brcs	.+8      	; 0x21aa <__udivmodsi4_ep>
    21a2:	a2 1b       	sub	r26, r18
    21a4:	b3 0b       	sbc	r27, r19
    21a6:	e4 0b       	sbc	r30, r20
    21a8:	f5 0b       	sbc	r31, r21

000021aa <__udivmodsi4_ep>:
    21aa:	66 1f       	adc	r22, r22
    21ac:	77 1f       	adc	r23, r23
    21ae:	88 1f       	adc	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	1a 94       	dec	r1
    21b4:	69 f7       	brne	.-38     	; 0x2190 <__udivmodsi4_loop>
    21b6:	60 95       	com	r22
    21b8:	70 95       	com	r23
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	9b 01       	movw	r18, r22
    21c0:	ac 01       	movw	r20, r24
    21c2:	bd 01       	movw	r22, r26
    21c4:	cf 01       	movw	r24, r30
    21c6:	08 95       	ret

000021c8 <itoa>:
    21c8:	45 32       	cpi	r20, 0x25	; 37
    21ca:	51 05       	cpc	r21, r1
    21cc:	20 f4       	brcc	.+8      	; 0x21d6 <itoa+0xe>
    21ce:	42 30       	cpi	r20, 0x02	; 2
    21d0:	10 f0       	brcs	.+4      	; 0x21d6 <itoa+0xe>
    21d2:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__itoa_ncheck>
    21d6:	fb 01       	movw	r30, r22
    21d8:	10 82       	st	Z, r1
    21da:	cb 01       	movw	r24, r22
    21dc:	08 95       	ret

000021de <__itoa_ncheck>:
    21de:	bb 27       	eor	r27, r27
    21e0:	4a 30       	cpi	r20, 0x0A	; 10
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <__itoa_ncheck+0x12>
    21e4:	99 23       	and	r25, r25
    21e6:	22 f4       	brpl	.+8      	; 0x21f0 <__itoa_ncheck+0x12>
    21e8:	bd e2       	ldi	r27, 0x2D	; 45
    21ea:	90 95       	com	r25
    21ec:	81 95       	neg	r24
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <__utoa_common>

000021f4 <__utoa_ncheck>:
    21f4:	bb 27       	eor	r27, r27

000021f6 <__utoa_common>:
    21f6:	fb 01       	movw	r30, r22
    21f8:	55 27       	eor	r21, r21
    21fa:	aa 27       	eor	r26, r26
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	aa 1f       	adc	r26, r26
    2202:	a4 17       	cp	r26, r20
    2204:	10 f0       	brcs	.+4      	; 0x220a <__utoa_common+0x14>
    2206:	a4 1b       	sub	r26, r20
    2208:	83 95       	inc	r24
    220a:	50 51       	subi	r21, 0x10	; 16
    220c:	b9 f7       	brne	.-18     	; 0x21fc <__utoa_common+0x6>
    220e:	a0 5d       	subi	r26, 0xD0	; 208
    2210:	aa 33       	cpi	r26, 0x3A	; 58
    2212:	08 f0       	brcs	.+2      	; 0x2216 <__utoa_common+0x20>
    2214:	a9 5d       	subi	r26, 0xD9	; 217
    2216:	a1 93       	st	Z+, r26
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	79 f7       	brne	.-34     	; 0x21fa <__utoa_common+0x4>
    221c:	b1 11       	cpse	r27, r1
    221e:	b1 93       	st	Z+, r27
    2220:	11 92       	st	Z+, r1
    2222:	cb 01       	movw	r24, r22
    2224:	0c 94 2d 13 	jmp	0x265a	; 0x265a <strrev>

00002228 <sprintf>:
    2228:	ae e0       	ldi	r26, 0x0E	; 14
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	ea e1       	ldi	r30, 0x1A	; 26
    222e:	f1 e1       	ldi	r31, 0x11	; 17
    2230:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__prologue_saves__+0x1c>
    2234:	0d 89       	ldd	r16, Y+21	; 0x15
    2236:	1e 89       	ldd	r17, Y+22	; 0x16
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	8c 83       	std	Y+4, r24	; 0x04
    223c:	1a 83       	std	Y+2, r17	; 0x02
    223e:	09 83       	std	Y+1, r16	; 0x01
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	9f e7       	ldi	r25, 0x7F	; 127
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	ae 01       	movw	r20, r28
    224a:	47 5e       	subi	r20, 0xE7	; 231
    224c:	5f 4f       	sbci	r21, 0xFF	; 255
    224e:	6f 89       	ldd	r22, Y+23	; 0x17
    2250:	78 8d       	ldd	r23, Y+24	; 0x18
    2252:	ce 01       	movw	r24, r28
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	0e 94 36 11 	call	0x226c	; 0x226c <vfprintf>
    225a:	ef 81       	ldd	r30, Y+7	; 0x07
    225c:	f8 85       	ldd	r31, Y+8	; 0x08
    225e:	e0 0f       	add	r30, r16
    2260:	f1 1f       	adc	r31, r17
    2262:	10 82       	st	Z, r1
    2264:	2e 96       	adiw	r28, 0x0e	; 14
    2266:	e4 e0       	ldi	r30, 0x04	; 4
    2268:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__epilogue_restores__+0x1c>

0000226c <vfprintf>:
    226c:	ab e0       	ldi	r26, 0x0B	; 11
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ec e3       	ldi	r30, 0x3C	; 60
    2272:	f1 e1       	ldi	r31, 0x11	; 17
    2274:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__prologue_saves__>
    2278:	6c 01       	movw	r12, r24
    227a:	7b 01       	movw	r14, r22
    227c:	8a 01       	movw	r16, r20
    227e:	fc 01       	movw	r30, r24
    2280:	17 82       	std	Z+7, r1	; 0x07
    2282:	16 82       	std	Z+6, r1	; 0x06
    2284:	83 81       	ldd	r24, Z+3	; 0x03
    2286:	81 ff       	sbrs	r24, 1
    2288:	cc c1       	rjmp	.+920    	; 0x2622 <vfprintf+0x3b6>
    228a:	ce 01       	movw	r24, r28
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	3c 01       	movw	r6, r24
    2290:	f6 01       	movw	r30, r12
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	f7 01       	movw	r30, r14
    2296:	93 fd       	sbrc	r25, 3
    2298:	85 91       	lpm	r24, Z+
    229a:	93 ff       	sbrs	r25, 3
    229c:	81 91       	ld	r24, Z+
    229e:	7f 01       	movw	r14, r30
    22a0:	88 23       	and	r24, r24
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <vfprintf+0x3a>
    22a4:	ba c1       	rjmp	.+884    	; 0x261a <vfprintf+0x3ae>
    22a6:	85 32       	cpi	r24, 0x25	; 37
    22a8:	39 f4       	brne	.+14     	; 0x22b8 <vfprintf+0x4c>
    22aa:	93 fd       	sbrc	r25, 3
    22ac:	85 91       	lpm	r24, Z+
    22ae:	93 ff       	sbrs	r25, 3
    22b0:	81 91       	ld	r24, Z+
    22b2:	7f 01       	movw	r14, r30
    22b4:	85 32       	cpi	r24, 0x25	; 37
    22b6:	29 f4       	brne	.+10     	; 0x22c2 <vfprintf+0x56>
    22b8:	b6 01       	movw	r22, r12
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    22c0:	e7 cf       	rjmp	.-50     	; 0x2290 <vfprintf+0x24>
    22c2:	91 2c       	mov	r9, r1
    22c4:	21 2c       	mov	r2, r1
    22c6:	31 2c       	mov	r3, r1
    22c8:	ff e1       	ldi	r31, 0x1F	; 31
    22ca:	f3 15       	cp	r31, r3
    22cc:	d8 f0       	brcs	.+54     	; 0x2304 <vfprintf+0x98>
    22ce:	8b 32       	cpi	r24, 0x2B	; 43
    22d0:	79 f0       	breq	.+30     	; 0x22f0 <vfprintf+0x84>
    22d2:	38 f4       	brcc	.+14     	; 0x22e2 <vfprintf+0x76>
    22d4:	80 32       	cpi	r24, 0x20	; 32
    22d6:	79 f0       	breq	.+30     	; 0x22f6 <vfprintf+0x8a>
    22d8:	83 32       	cpi	r24, 0x23	; 35
    22da:	a1 f4       	brne	.+40     	; 0x2304 <vfprintf+0x98>
    22dc:	23 2d       	mov	r18, r3
    22de:	20 61       	ori	r18, 0x10	; 16
    22e0:	1d c0       	rjmp	.+58     	; 0x231c <vfprintf+0xb0>
    22e2:	8d 32       	cpi	r24, 0x2D	; 45
    22e4:	61 f0       	breq	.+24     	; 0x22fe <vfprintf+0x92>
    22e6:	80 33       	cpi	r24, 0x30	; 48
    22e8:	69 f4       	brne	.+26     	; 0x2304 <vfprintf+0x98>
    22ea:	23 2d       	mov	r18, r3
    22ec:	21 60       	ori	r18, 0x01	; 1
    22ee:	16 c0       	rjmp	.+44     	; 0x231c <vfprintf+0xb0>
    22f0:	83 2d       	mov	r24, r3
    22f2:	82 60       	ori	r24, 0x02	; 2
    22f4:	38 2e       	mov	r3, r24
    22f6:	e3 2d       	mov	r30, r3
    22f8:	e4 60       	ori	r30, 0x04	; 4
    22fa:	3e 2e       	mov	r3, r30
    22fc:	2a c0       	rjmp	.+84     	; 0x2352 <vfprintf+0xe6>
    22fe:	f3 2d       	mov	r31, r3
    2300:	f8 60       	ori	r31, 0x08	; 8
    2302:	1d c0       	rjmp	.+58     	; 0x233e <vfprintf+0xd2>
    2304:	37 fc       	sbrc	r3, 7
    2306:	2d c0       	rjmp	.+90     	; 0x2362 <vfprintf+0xf6>
    2308:	20 ed       	ldi	r18, 0xD0	; 208
    230a:	28 0f       	add	r18, r24
    230c:	2a 30       	cpi	r18, 0x0A	; 10
    230e:	40 f0       	brcs	.+16     	; 0x2320 <vfprintf+0xb4>
    2310:	8e 32       	cpi	r24, 0x2E	; 46
    2312:	b9 f4       	brne	.+46     	; 0x2342 <vfprintf+0xd6>
    2314:	36 fc       	sbrc	r3, 6
    2316:	81 c1       	rjmp	.+770    	; 0x261a <vfprintf+0x3ae>
    2318:	23 2d       	mov	r18, r3
    231a:	20 64       	ori	r18, 0x40	; 64
    231c:	32 2e       	mov	r3, r18
    231e:	19 c0       	rjmp	.+50     	; 0x2352 <vfprintf+0xe6>
    2320:	36 fe       	sbrs	r3, 6
    2322:	06 c0       	rjmp	.+12     	; 0x2330 <vfprintf+0xc4>
    2324:	8a e0       	ldi	r24, 0x0A	; 10
    2326:	98 9e       	mul	r9, r24
    2328:	20 0d       	add	r18, r0
    232a:	11 24       	eor	r1, r1
    232c:	92 2e       	mov	r9, r18
    232e:	11 c0       	rjmp	.+34     	; 0x2352 <vfprintf+0xe6>
    2330:	ea e0       	ldi	r30, 0x0A	; 10
    2332:	2e 9e       	mul	r2, r30
    2334:	20 0d       	add	r18, r0
    2336:	11 24       	eor	r1, r1
    2338:	22 2e       	mov	r2, r18
    233a:	f3 2d       	mov	r31, r3
    233c:	f0 62       	ori	r31, 0x20	; 32
    233e:	3f 2e       	mov	r3, r31
    2340:	08 c0       	rjmp	.+16     	; 0x2352 <vfprintf+0xe6>
    2342:	8c 36       	cpi	r24, 0x6C	; 108
    2344:	21 f4       	brne	.+8      	; 0x234e <vfprintf+0xe2>
    2346:	83 2d       	mov	r24, r3
    2348:	80 68       	ori	r24, 0x80	; 128
    234a:	38 2e       	mov	r3, r24
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <vfprintf+0xe6>
    234e:	88 36       	cpi	r24, 0x68	; 104
    2350:	41 f4       	brne	.+16     	; 0x2362 <vfprintf+0xf6>
    2352:	f7 01       	movw	r30, r14
    2354:	93 fd       	sbrc	r25, 3
    2356:	85 91       	lpm	r24, Z+
    2358:	93 ff       	sbrs	r25, 3
    235a:	81 91       	ld	r24, Z+
    235c:	7f 01       	movw	r14, r30
    235e:	81 11       	cpse	r24, r1
    2360:	b3 cf       	rjmp	.-154    	; 0x22c8 <vfprintf+0x5c>
    2362:	98 2f       	mov	r25, r24
    2364:	9f 7d       	andi	r25, 0xDF	; 223
    2366:	95 54       	subi	r25, 0x45	; 69
    2368:	93 30       	cpi	r25, 0x03	; 3
    236a:	28 f4       	brcc	.+10     	; 0x2376 <vfprintf+0x10a>
    236c:	0c 5f       	subi	r16, 0xFC	; 252
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	9f e3       	ldi	r25, 0x3F	; 63
    2372:	99 83       	std	Y+1, r25	; 0x01
    2374:	0d c0       	rjmp	.+26     	; 0x2390 <vfprintf+0x124>
    2376:	83 36       	cpi	r24, 0x63	; 99
    2378:	31 f0       	breq	.+12     	; 0x2386 <vfprintf+0x11a>
    237a:	83 37       	cpi	r24, 0x73	; 115
    237c:	71 f0       	breq	.+28     	; 0x239a <vfprintf+0x12e>
    237e:	83 35       	cpi	r24, 0x53	; 83
    2380:	09 f0       	breq	.+2      	; 0x2384 <vfprintf+0x118>
    2382:	59 c0       	rjmp	.+178    	; 0x2436 <vfprintf+0x1ca>
    2384:	21 c0       	rjmp	.+66     	; 0x23c8 <vfprintf+0x15c>
    2386:	f8 01       	movw	r30, r16
    2388:	80 81       	ld	r24, Z
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	0e 5f       	subi	r16, 0xFE	; 254
    238e:	1f 4f       	sbci	r17, 0xFF	; 255
    2390:	88 24       	eor	r8, r8
    2392:	83 94       	inc	r8
    2394:	91 2c       	mov	r9, r1
    2396:	53 01       	movw	r10, r6
    2398:	13 c0       	rjmp	.+38     	; 0x23c0 <vfprintf+0x154>
    239a:	28 01       	movw	r4, r16
    239c:	f2 e0       	ldi	r31, 0x02	; 2
    239e:	4f 0e       	add	r4, r31
    23a0:	51 1c       	adc	r5, r1
    23a2:	f8 01       	movw	r30, r16
    23a4:	a0 80       	ld	r10, Z
    23a6:	b1 80       	ldd	r11, Z+1	; 0x01
    23a8:	36 fe       	sbrs	r3, 6
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <vfprintf+0x146>
    23ac:	69 2d       	mov	r22, r9
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <vfprintf+0x14a>
    23b2:	6f ef       	ldi	r22, 0xFF	; 255
    23b4:	7f ef       	ldi	r23, 0xFF	; 255
    23b6:	c5 01       	movw	r24, r10
    23b8:	0e 94 22 13 	call	0x2644	; 0x2644 <strnlen>
    23bc:	4c 01       	movw	r8, r24
    23be:	82 01       	movw	r16, r4
    23c0:	f3 2d       	mov	r31, r3
    23c2:	ff 77       	andi	r31, 0x7F	; 127
    23c4:	3f 2e       	mov	r3, r31
    23c6:	16 c0       	rjmp	.+44     	; 0x23f4 <vfprintf+0x188>
    23c8:	28 01       	movw	r4, r16
    23ca:	22 e0       	ldi	r18, 0x02	; 2
    23cc:	42 0e       	add	r4, r18
    23ce:	51 1c       	adc	r5, r1
    23d0:	f8 01       	movw	r30, r16
    23d2:	a0 80       	ld	r10, Z
    23d4:	b1 80       	ldd	r11, Z+1	; 0x01
    23d6:	36 fe       	sbrs	r3, 6
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <vfprintf+0x174>
    23da:	69 2d       	mov	r22, r9
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <vfprintf+0x178>
    23e0:	6f ef       	ldi	r22, 0xFF	; 255
    23e2:	7f ef       	ldi	r23, 0xFF	; 255
    23e4:	c5 01       	movw	r24, r10
    23e6:	0e 94 17 13 	call	0x262e	; 0x262e <strnlen_P>
    23ea:	4c 01       	movw	r8, r24
    23ec:	f3 2d       	mov	r31, r3
    23ee:	f0 68       	ori	r31, 0x80	; 128
    23f0:	3f 2e       	mov	r3, r31
    23f2:	82 01       	movw	r16, r4
    23f4:	33 fc       	sbrc	r3, 3
    23f6:	1b c0       	rjmp	.+54     	; 0x242e <vfprintf+0x1c2>
    23f8:	82 2d       	mov	r24, r2
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	88 16       	cp	r8, r24
    23fe:	99 06       	cpc	r9, r25
    2400:	b0 f4       	brcc	.+44     	; 0x242e <vfprintf+0x1c2>
    2402:	b6 01       	movw	r22, r12
    2404:	80 e2       	ldi	r24, 0x20	; 32
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    240c:	2a 94       	dec	r2
    240e:	f4 cf       	rjmp	.-24     	; 0x23f8 <vfprintf+0x18c>
    2410:	f5 01       	movw	r30, r10
    2412:	37 fc       	sbrc	r3, 7
    2414:	85 91       	lpm	r24, Z+
    2416:	37 fe       	sbrs	r3, 7
    2418:	81 91       	ld	r24, Z+
    241a:	5f 01       	movw	r10, r30
    241c:	b6 01       	movw	r22, r12
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    2424:	21 10       	cpse	r2, r1
    2426:	2a 94       	dec	r2
    2428:	21 e0       	ldi	r18, 0x01	; 1
    242a:	82 1a       	sub	r8, r18
    242c:	91 08       	sbc	r9, r1
    242e:	81 14       	cp	r8, r1
    2430:	91 04       	cpc	r9, r1
    2432:	71 f7       	brne	.-36     	; 0x2410 <vfprintf+0x1a4>
    2434:	e8 c0       	rjmp	.+464    	; 0x2606 <vfprintf+0x39a>
    2436:	84 36       	cpi	r24, 0x64	; 100
    2438:	11 f0       	breq	.+4      	; 0x243e <vfprintf+0x1d2>
    243a:	89 36       	cpi	r24, 0x69	; 105
    243c:	41 f5       	brne	.+80     	; 0x248e <vfprintf+0x222>
    243e:	f8 01       	movw	r30, r16
    2440:	37 fe       	sbrs	r3, 7
    2442:	07 c0       	rjmp	.+14     	; 0x2452 <vfprintf+0x1e6>
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	0c 5f       	subi	r16, 0xFC	; 252
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	08 c0       	rjmp	.+16     	; 0x2462 <vfprintf+0x1f6>
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	07 2e       	mov	r0, r23
    2458:	00 0c       	add	r0, r0
    245a:	88 0b       	sbc	r24, r24
    245c:	99 0b       	sbc	r25, r25
    245e:	0e 5f       	subi	r16, 0xFE	; 254
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	f3 2d       	mov	r31, r3
    2464:	ff 76       	andi	r31, 0x6F	; 111
    2466:	3f 2e       	mov	r3, r31
    2468:	97 ff       	sbrs	r25, 7
    246a:	09 c0       	rjmp	.+18     	; 0x247e <vfprintf+0x212>
    246c:	90 95       	com	r25
    246e:	80 95       	com	r24
    2470:	70 95       	com	r23
    2472:	61 95       	neg	r22
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	8f 4f       	sbci	r24, 0xFF	; 255
    2478:	9f 4f       	sbci	r25, 0xFF	; 255
    247a:	f0 68       	ori	r31, 0x80	; 128
    247c:	3f 2e       	mov	r3, r31
    247e:	2a e0       	ldi	r18, 0x0A	; 10
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	a3 01       	movw	r20, r6
    2484:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__ultoa_invert>
    2488:	88 2e       	mov	r8, r24
    248a:	86 18       	sub	r8, r6
    248c:	45 c0       	rjmp	.+138    	; 0x2518 <vfprintf+0x2ac>
    248e:	85 37       	cpi	r24, 0x75	; 117
    2490:	31 f4       	brne	.+12     	; 0x249e <vfprintf+0x232>
    2492:	23 2d       	mov	r18, r3
    2494:	2f 7e       	andi	r18, 0xEF	; 239
    2496:	b2 2e       	mov	r11, r18
    2498:	2a e0       	ldi	r18, 0x0A	; 10
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	25 c0       	rjmp	.+74     	; 0x24e8 <vfprintf+0x27c>
    249e:	93 2d       	mov	r25, r3
    24a0:	99 7f       	andi	r25, 0xF9	; 249
    24a2:	b9 2e       	mov	r11, r25
    24a4:	8f 36       	cpi	r24, 0x6F	; 111
    24a6:	c1 f0       	breq	.+48     	; 0x24d8 <vfprintf+0x26c>
    24a8:	18 f4       	brcc	.+6      	; 0x24b0 <vfprintf+0x244>
    24aa:	88 35       	cpi	r24, 0x58	; 88
    24ac:	79 f0       	breq	.+30     	; 0x24cc <vfprintf+0x260>
    24ae:	b5 c0       	rjmp	.+362    	; 0x261a <vfprintf+0x3ae>
    24b0:	80 37       	cpi	r24, 0x70	; 112
    24b2:	19 f0       	breq	.+6      	; 0x24ba <vfprintf+0x24e>
    24b4:	88 37       	cpi	r24, 0x78	; 120
    24b6:	21 f0       	breq	.+8      	; 0x24c0 <vfprintf+0x254>
    24b8:	b0 c0       	rjmp	.+352    	; 0x261a <vfprintf+0x3ae>
    24ba:	e9 2f       	mov	r30, r25
    24bc:	e0 61       	ori	r30, 0x10	; 16
    24be:	be 2e       	mov	r11, r30
    24c0:	b4 fe       	sbrs	r11, 4
    24c2:	0d c0       	rjmp	.+26     	; 0x24de <vfprintf+0x272>
    24c4:	fb 2d       	mov	r31, r11
    24c6:	f4 60       	ori	r31, 0x04	; 4
    24c8:	bf 2e       	mov	r11, r31
    24ca:	09 c0       	rjmp	.+18     	; 0x24de <vfprintf+0x272>
    24cc:	34 fe       	sbrs	r3, 4
    24ce:	0a c0       	rjmp	.+20     	; 0x24e4 <vfprintf+0x278>
    24d0:	29 2f       	mov	r18, r25
    24d2:	26 60       	ori	r18, 0x06	; 6
    24d4:	b2 2e       	mov	r11, r18
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <vfprintf+0x278>
    24d8:	28 e0       	ldi	r18, 0x08	; 8
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	05 c0       	rjmp	.+10     	; 0x24e8 <vfprintf+0x27c>
    24de:	20 e1       	ldi	r18, 0x10	; 16
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <vfprintf+0x27c>
    24e4:	20 e1       	ldi	r18, 0x10	; 16
    24e6:	32 e0       	ldi	r19, 0x02	; 2
    24e8:	f8 01       	movw	r30, r16
    24ea:	b7 fe       	sbrs	r11, 7
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <vfprintf+0x290>
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	0c 5f       	subi	r16, 0xFC	; 252
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <vfprintf+0x29c>
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 5f       	subi	r16, 0xFE	; 254
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	a3 01       	movw	r20, r6
    250a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__ultoa_invert>
    250e:	88 2e       	mov	r8, r24
    2510:	86 18       	sub	r8, r6
    2512:	fb 2d       	mov	r31, r11
    2514:	ff 77       	andi	r31, 0x7F	; 127
    2516:	3f 2e       	mov	r3, r31
    2518:	36 fe       	sbrs	r3, 6
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <vfprintf+0x2ca>
    251c:	23 2d       	mov	r18, r3
    251e:	2e 7f       	andi	r18, 0xFE	; 254
    2520:	a2 2e       	mov	r10, r18
    2522:	89 14       	cp	r8, r9
    2524:	58 f4       	brcc	.+22     	; 0x253c <vfprintf+0x2d0>
    2526:	34 fe       	sbrs	r3, 4
    2528:	0b c0       	rjmp	.+22     	; 0x2540 <vfprintf+0x2d4>
    252a:	32 fc       	sbrc	r3, 2
    252c:	09 c0       	rjmp	.+18     	; 0x2540 <vfprintf+0x2d4>
    252e:	83 2d       	mov	r24, r3
    2530:	8e 7e       	andi	r24, 0xEE	; 238
    2532:	a8 2e       	mov	r10, r24
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <vfprintf+0x2d4>
    2536:	b8 2c       	mov	r11, r8
    2538:	a3 2c       	mov	r10, r3
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <vfprintf+0x2d6>
    253c:	b8 2c       	mov	r11, r8
    253e:	01 c0       	rjmp	.+2      	; 0x2542 <vfprintf+0x2d6>
    2540:	b9 2c       	mov	r11, r9
    2542:	a4 fe       	sbrs	r10, 4
    2544:	0f c0       	rjmp	.+30     	; 0x2564 <vfprintf+0x2f8>
    2546:	fe 01       	movw	r30, r28
    2548:	e8 0d       	add	r30, r8
    254a:	f1 1d       	adc	r31, r1
    254c:	80 81       	ld	r24, Z
    254e:	80 33       	cpi	r24, 0x30	; 48
    2550:	21 f4       	brne	.+8      	; 0x255a <vfprintf+0x2ee>
    2552:	9a 2d       	mov	r25, r10
    2554:	99 7e       	andi	r25, 0xE9	; 233
    2556:	a9 2e       	mov	r10, r25
    2558:	09 c0       	rjmp	.+18     	; 0x256c <vfprintf+0x300>
    255a:	a2 fe       	sbrs	r10, 2
    255c:	06 c0       	rjmp	.+12     	; 0x256a <vfprintf+0x2fe>
    255e:	b3 94       	inc	r11
    2560:	b3 94       	inc	r11
    2562:	04 c0       	rjmp	.+8      	; 0x256c <vfprintf+0x300>
    2564:	8a 2d       	mov	r24, r10
    2566:	86 78       	andi	r24, 0x86	; 134
    2568:	09 f0       	breq	.+2      	; 0x256c <vfprintf+0x300>
    256a:	b3 94       	inc	r11
    256c:	a3 fc       	sbrc	r10, 3
    256e:	11 c0       	rjmp	.+34     	; 0x2592 <vfprintf+0x326>
    2570:	a0 fe       	sbrs	r10, 0
    2572:	06 c0       	rjmp	.+12     	; 0x2580 <vfprintf+0x314>
    2574:	b2 14       	cp	r11, r2
    2576:	88 f4       	brcc	.+34     	; 0x259a <vfprintf+0x32e>
    2578:	28 0c       	add	r2, r8
    257a:	92 2c       	mov	r9, r2
    257c:	9b 18       	sub	r9, r11
    257e:	0e c0       	rjmp	.+28     	; 0x259c <vfprintf+0x330>
    2580:	b2 14       	cp	r11, r2
    2582:	60 f4       	brcc	.+24     	; 0x259c <vfprintf+0x330>
    2584:	b6 01       	movw	r22, r12
    2586:	80 e2       	ldi	r24, 0x20	; 32
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    258e:	b3 94       	inc	r11
    2590:	f7 cf       	rjmp	.-18     	; 0x2580 <vfprintf+0x314>
    2592:	b2 14       	cp	r11, r2
    2594:	18 f4       	brcc	.+6      	; 0x259c <vfprintf+0x330>
    2596:	2b 18       	sub	r2, r11
    2598:	02 c0       	rjmp	.+4      	; 0x259e <vfprintf+0x332>
    259a:	98 2c       	mov	r9, r8
    259c:	21 2c       	mov	r2, r1
    259e:	a4 fe       	sbrs	r10, 4
    25a0:	10 c0       	rjmp	.+32     	; 0x25c2 <vfprintf+0x356>
    25a2:	b6 01       	movw	r22, r12
    25a4:	80 e3       	ldi	r24, 0x30	; 48
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    25ac:	a2 fe       	sbrs	r10, 2
    25ae:	17 c0       	rjmp	.+46     	; 0x25de <vfprintf+0x372>
    25b0:	a1 fc       	sbrc	r10, 1
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <vfprintf+0x34e>
    25b4:	88 e7       	ldi	r24, 0x78	; 120
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <vfprintf+0x352>
    25ba:	88 e5       	ldi	r24, 0x58	; 88
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	b6 01       	movw	r22, r12
    25c0:	0c c0       	rjmp	.+24     	; 0x25da <vfprintf+0x36e>
    25c2:	8a 2d       	mov	r24, r10
    25c4:	86 78       	andi	r24, 0x86	; 134
    25c6:	59 f0       	breq	.+22     	; 0x25de <vfprintf+0x372>
    25c8:	a1 fe       	sbrs	r10, 1
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x364>
    25cc:	8b e2       	ldi	r24, 0x2B	; 43
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <vfprintf+0x366>
    25d0:	80 e2       	ldi	r24, 0x20	; 32
    25d2:	a7 fc       	sbrc	r10, 7
    25d4:	8d e2       	ldi	r24, 0x2D	; 45
    25d6:	b6 01       	movw	r22, r12
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    25de:	89 14       	cp	r8, r9
    25e0:	38 f4       	brcc	.+14     	; 0x25f0 <vfprintf+0x384>
    25e2:	b6 01       	movw	r22, r12
    25e4:	80 e3       	ldi	r24, 0x30	; 48
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    25ec:	9a 94       	dec	r9
    25ee:	f7 cf       	rjmp	.-18     	; 0x25de <vfprintf+0x372>
    25f0:	8a 94       	dec	r8
    25f2:	f3 01       	movw	r30, r6
    25f4:	e8 0d       	add	r30, r8
    25f6:	f1 1d       	adc	r31, r1
    25f8:	80 81       	ld	r24, Z
    25fa:	b6 01       	movw	r22, r12
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    2602:	81 10       	cpse	r8, r1
    2604:	f5 cf       	rjmp	.-22     	; 0x25f0 <vfprintf+0x384>
    2606:	22 20       	and	r2, r2
    2608:	09 f4       	brne	.+2      	; 0x260c <vfprintf+0x3a0>
    260a:	42 ce       	rjmp	.-892    	; 0x2290 <vfprintf+0x24>
    260c:	b6 01       	movw	r22, r12
    260e:	80 e2       	ldi	r24, 0x20	; 32
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 3d 13 	call	0x267a	; 0x267a <fputc>
    2616:	2a 94       	dec	r2
    2618:	f6 cf       	rjmp	.-20     	; 0x2606 <vfprintf+0x39a>
    261a:	f6 01       	movw	r30, r12
    261c:	86 81       	ldd	r24, Z+6	; 0x06
    261e:	97 81       	ldd	r25, Z+7	; 0x07
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <vfprintf+0x3ba>
    2622:	8f ef       	ldi	r24, 0xFF	; 255
    2624:	9f ef       	ldi	r25, 0xFF	; 255
    2626:	2b 96       	adiw	r28, 0x0b	; 11
    2628:	e2 e1       	ldi	r30, 0x12	; 18
    262a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__epilogue_restores__>

0000262e <strnlen_P>:
    262e:	fc 01       	movw	r30, r24
    2630:	05 90       	lpm	r0, Z+
    2632:	61 50       	subi	r22, 0x01	; 1
    2634:	70 40       	sbci	r23, 0x00	; 0
    2636:	01 10       	cpse	r0, r1
    2638:	d8 f7       	brcc	.-10     	; 0x2630 <strnlen_P+0x2>
    263a:	80 95       	com	r24
    263c:	90 95       	com	r25
    263e:	8e 0f       	add	r24, r30
    2640:	9f 1f       	adc	r25, r31
    2642:	08 95       	ret

00002644 <strnlen>:
    2644:	fc 01       	movw	r30, r24
    2646:	61 50       	subi	r22, 0x01	; 1
    2648:	70 40       	sbci	r23, 0x00	; 0
    264a:	01 90       	ld	r0, Z+
    264c:	01 10       	cpse	r0, r1
    264e:	d8 f7       	brcc	.-10     	; 0x2646 <strnlen+0x2>
    2650:	80 95       	com	r24
    2652:	90 95       	com	r25
    2654:	8e 0f       	add	r24, r30
    2656:	9f 1f       	adc	r25, r31
    2658:	08 95       	ret

0000265a <strrev>:
    265a:	dc 01       	movw	r26, r24
    265c:	fc 01       	movw	r30, r24
    265e:	67 2f       	mov	r22, r23
    2660:	71 91       	ld	r23, Z+
    2662:	77 23       	and	r23, r23
    2664:	e1 f7       	brne	.-8      	; 0x265e <strrev+0x4>
    2666:	32 97       	sbiw	r30, 0x02	; 2
    2668:	04 c0       	rjmp	.+8      	; 0x2672 <strrev+0x18>
    266a:	7c 91       	ld	r23, X
    266c:	6d 93       	st	X+, r22
    266e:	70 83       	st	Z, r23
    2670:	62 91       	ld	r22, -Z
    2672:	ae 17       	cp	r26, r30
    2674:	bf 07       	cpc	r27, r31
    2676:	c8 f3       	brcs	.-14     	; 0x266a <strrev+0x10>
    2678:	08 95       	ret

0000267a <fputc>:
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	fb 01       	movw	r30, r22
    2684:	23 81       	ldd	r18, Z+3	; 0x03
    2686:	21 fd       	sbrc	r18, 1
    2688:	03 c0       	rjmp	.+6      	; 0x2690 <fputc+0x16>
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	9f ef       	ldi	r25, 0xFF	; 255
    268e:	2c c0       	rjmp	.+88     	; 0x26e8 <fputc+0x6e>
    2690:	22 ff       	sbrs	r18, 2
    2692:	16 c0       	rjmp	.+44     	; 0x26c0 <fputc+0x46>
    2694:	46 81       	ldd	r20, Z+6	; 0x06
    2696:	57 81       	ldd	r21, Z+7	; 0x07
    2698:	24 81       	ldd	r18, Z+4	; 0x04
    269a:	35 81       	ldd	r19, Z+5	; 0x05
    269c:	42 17       	cp	r20, r18
    269e:	53 07       	cpc	r21, r19
    26a0:	44 f4       	brge	.+16     	; 0x26b2 <fputc+0x38>
    26a2:	a0 81       	ld	r26, Z
    26a4:	b1 81       	ldd	r27, Z+1	; 0x01
    26a6:	9d 01       	movw	r18, r26
    26a8:	2f 5f       	subi	r18, 0xFF	; 255
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	31 83       	std	Z+1, r19	; 0x01
    26ae:	20 83       	st	Z, r18
    26b0:	8c 93       	st	X, r24
    26b2:	26 81       	ldd	r18, Z+6	; 0x06
    26b4:	37 81       	ldd	r19, Z+7	; 0x07
    26b6:	2f 5f       	subi	r18, 0xFF	; 255
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	37 83       	std	Z+7, r19	; 0x07
    26bc:	26 83       	std	Z+6, r18	; 0x06
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <fputc+0x6e>
    26c0:	8b 01       	movw	r16, r22
    26c2:	ec 01       	movw	r28, r24
    26c4:	fb 01       	movw	r30, r22
    26c6:	00 84       	ldd	r0, Z+8	; 0x08
    26c8:	f1 85       	ldd	r31, Z+9	; 0x09
    26ca:	e0 2d       	mov	r30, r0
    26cc:	09 95       	icall
    26ce:	89 2b       	or	r24, r25
    26d0:	e1 f6       	brne	.-72     	; 0x268a <fputc+0x10>
    26d2:	d8 01       	movw	r26, r16
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	8d 91       	ld	r24, X+
    26d8:	9c 91       	ld	r25, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	17 96       	adiw	r26, 0x07	; 7
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	16 97       	sbiw	r26, 0x06	; 6
    26e6:	ce 01       	movw	r24, r28
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	08 95       	ret

000026f2 <__ultoa_invert>:
    26f2:	fa 01       	movw	r30, r20
    26f4:	aa 27       	eor	r26, r26
    26f6:	28 30       	cpi	r18, 0x08	; 8
    26f8:	51 f1       	breq	.+84     	; 0x274e <__ultoa_invert+0x5c>
    26fa:	20 31       	cpi	r18, 0x10	; 16
    26fc:	81 f1       	breq	.+96     	; 0x275e <__ultoa_invert+0x6c>
    26fe:	e8 94       	clt
    2700:	6f 93       	push	r22
    2702:	6e 7f       	andi	r22, 0xFE	; 254
    2704:	6e 5f       	subi	r22, 0xFE	; 254
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	8f 4f       	sbci	r24, 0xFF	; 255
    270a:	9f 4f       	sbci	r25, 0xFF	; 255
    270c:	af 4f       	sbci	r26, 0xFF	; 255
    270e:	b1 e0       	ldi	r27, 0x01	; 1
    2710:	3e d0       	rcall	.+124    	; 0x278e <__ultoa_invert+0x9c>
    2712:	b4 e0       	ldi	r27, 0x04	; 4
    2714:	3c d0       	rcall	.+120    	; 0x278e <__ultoa_invert+0x9c>
    2716:	67 0f       	add	r22, r23
    2718:	78 1f       	adc	r23, r24
    271a:	89 1f       	adc	r24, r25
    271c:	9a 1f       	adc	r25, r26
    271e:	a1 1d       	adc	r26, r1
    2720:	68 0f       	add	r22, r24
    2722:	79 1f       	adc	r23, r25
    2724:	8a 1f       	adc	r24, r26
    2726:	91 1d       	adc	r25, r1
    2728:	a1 1d       	adc	r26, r1
    272a:	6a 0f       	add	r22, r26
    272c:	71 1d       	adc	r23, r1
    272e:	81 1d       	adc	r24, r1
    2730:	91 1d       	adc	r25, r1
    2732:	a1 1d       	adc	r26, r1
    2734:	20 d0       	rcall	.+64     	; 0x2776 <__ultoa_invert+0x84>
    2736:	09 f4       	brne	.+2      	; 0x273a <__ultoa_invert+0x48>
    2738:	68 94       	set
    273a:	3f 91       	pop	r19
    273c:	2a e0       	ldi	r18, 0x0A	; 10
    273e:	26 9f       	mul	r18, r22
    2740:	11 24       	eor	r1, r1
    2742:	30 19       	sub	r19, r0
    2744:	30 5d       	subi	r19, 0xD0	; 208
    2746:	31 93       	st	Z+, r19
    2748:	de f6       	brtc	.-74     	; 0x2700 <__ultoa_invert+0xe>
    274a:	cf 01       	movw	r24, r30
    274c:	08 95       	ret
    274e:	46 2f       	mov	r20, r22
    2750:	47 70       	andi	r20, 0x07	; 7
    2752:	40 5d       	subi	r20, 0xD0	; 208
    2754:	41 93       	st	Z+, r20
    2756:	b3 e0       	ldi	r27, 0x03	; 3
    2758:	0f d0       	rcall	.+30     	; 0x2778 <__ultoa_invert+0x86>
    275a:	c9 f7       	brne	.-14     	; 0x274e <__ultoa_invert+0x5c>
    275c:	f6 cf       	rjmp	.-20     	; 0x274a <__ultoa_invert+0x58>
    275e:	46 2f       	mov	r20, r22
    2760:	4f 70       	andi	r20, 0x0F	; 15
    2762:	40 5d       	subi	r20, 0xD0	; 208
    2764:	4a 33       	cpi	r20, 0x3A	; 58
    2766:	18 f0       	brcs	.+6      	; 0x276e <__ultoa_invert+0x7c>
    2768:	49 5d       	subi	r20, 0xD9	; 217
    276a:	31 fd       	sbrc	r19, 1
    276c:	40 52       	subi	r20, 0x20	; 32
    276e:	41 93       	st	Z+, r20
    2770:	02 d0       	rcall	.+4      	; 0x2776 <__ultoa_invert+0x84>
    2772:	a9 f7       	brne	.-22     	; 0x275e <__ultoa_invert+0x6c>
    2774:	ea cf       	rjmp	.-44     	; 0x274a <__ultoa_invert+0x58>
    2776:	b4 e0       	ldi	r27, 0x04	; 4
    2778:	a6 95       	lsr	r26
    277a:	97 95       	ror	r25
    277c:	87 95       	ror	r24
    277e:	77 95       	ror	r23
    2780:	67 95       	ror	r22
    2782:	ba 95       	dec	r27
    2784:	c9 f7       	brne	.-14     	; 0x2778 <__ultoa_invert+0x86>
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	61 05       	cpc	r22, r1
    278a:	71 05       	cpc	r23, r1
    278c:	08 95       	ret
    278e:	9b 01       	movw	r18, r22
    2790:	ac 01       	movw	r20, r24
    2792:	0a 2e       	mov	r0, r26
    2794:	06 94       	lsr	r0
    2796:	57 95       	ror	r21
    2798:	47 95       	ror	r20
    279a:	37 95       	ror	r19
    279c:	27 95       	ror	r18
    279e:	ba 95       	dec	r27
    27a0:	c9 f7       	brne	.-14     	; 0x2794 <__ultoa_invert+0xa2>
    27a2:	62 0f       	add	r22, r18
    27a4:	73 1f       	adc	r23, r19
    27a6:	84 1f       	adc	r24, r20
    27a8:	95 1f       	adc	r25, r21
    27aa:	a0 1d       	adc	r26, r0
    27ac:	08 95       	ret

000027ae <__prologue_saves__>:
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	ca 1b       	sub	r28, r26
    27d8:	db 0b       	sbc	r29, r27
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	09 94       	ijmp

000027e6 <__epilogue_restores__>:
    27e6:	2a 88       	ldd	r2, Y+18	; 0x12
    27e8:	39 88       	ldd	r3, Y+17	; 0x11
    27ea:	48 88       	ldd	r4, Y+16	; 0x10
    27ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f8:	b9 84       	ldd	r11, Y+9	; 0x09
    27fa:	c8 84       	ldd	r12, Y+8	; 0x08
    27fc:	df 80       	ldd	r13, Y+7	; 0x07
    27fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2800:	fd 80       	ldd	r15, Y+5	; 0x05
    2802:	0c 81       	ldd	r16, Y+4	; 0x04
    2804:	1b 81       	ldd	r17, Y+3	; 0x03
    2806:	aa 81       	ldd	r26, Y+2	; 0x02
    2808:	b9 81       	ldd	r27, Y+1	; 0x01
    280a:	ce 0f       	add	r28, r30
    280c:	d1 1d       	adc	r29, r1
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	ed 01       	movw	r28, r26
    281a:	08 95       	ret

0000281c <_exit>:
    281c:	f8 94       	cli

0000281e <__stop_program>:
    281e:	ff cf       	rjmp	.-2      	; 0x281e <__stop_program>
