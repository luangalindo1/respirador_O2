
SPRINT 9 Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00002c2a  00002cbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020f  00800186  00800186  00002d44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001292  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  00004192  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014b6  00000000  00000000  00004aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00005f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008ddd  00000000  00000000  00006544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d08  00000000  00000000  0000f321  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00010029  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003252  00000000  00000000  00010129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_2>
       c:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_3>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ea e2       	ldi	r30, 0x2A	; 42
     25c:	fc e2       	ldi	r31, 0x2C	; 44
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a6 38       	cpi	r26, 0x86	; 134
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	a6 e8       	ldi	r26, 0x86	; 134
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a5 39       	cpi	r26, 0x95	; 149
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 d1 06 	call	0xda2	; 0xda2 <main>
     27e:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
static uint32_t tempo_ms;
float temp_C = 36.0;
unsigned char pressao[8] = "120x80";

ISR(INT0_vect) // interrupção externa 0, quando o botão é pressionado, a freq aumenta || a válvula de O2 aumenta || o volume de O2 aumenta
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	aa 97       	sbiw	r28, 0x2a	; 42
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	cd bf       	out	0x3d, r28	; 61
	if (flag_select == 1)
     2b8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <__vector_1+0x3c>
     2c0:	8f c0       	rjmp	.+286    	; 0x3e0 <__vector_1+0x15a>
	{
		if (FreqRespiracao < 30)
     2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c6:	8e 31       	cpi	r24, 0x1E	; 30
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <__vector_1+0x46>
     2ca:	b5 c1       	rjmp	.+874    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     2cc:	7d c0       	rjmp	.+250    	; 0x3c8 <__vector_1+0x142>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a6 e1       	ldi	r26, 0x16	; 22
     2d4:	b3 e4       	ldi	r27, 0x43	; 67
     2d6:	89 87       	std	Y+9, r24	; 0x09
     2d8:	9a 87       	std	Y+10, r25	; 0x0a
     2da:	ab 87       	std	Y+11, r26	; 0x0b
     2dc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a e7       	ldi	r20, 0x7A	; 122
     2e4:	55 e4       	ldi	r21, 0x45	; 69
     2e6:	69 85       	ldd	r22, Y+9	; 0x09
     2e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     2ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ee:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	8d 87       	std	Y+13, r24	; 0x0d
     2f8:	9e 87       	std	Y+14, r25	; 0x0e
     2fa:	af 87       	std	Y+15, r26	; 0x0f
     2fc:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	6d 85       	ldd	r22, Y+13	; 0x0d
     308:	7e 85       	ldd	r23, Y+14	; 0x0e
     30a:	8f 85       	ldd	r24, Y+15	; 0x0f
     30c:	98 89       	ldd	r25, Y+16	; 0x10
     30e:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	2c f4       	brge	.+10     	; 0x320 <__vector_1+0x9a>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9a 8b       	std	Y+18, r25	; 0x12
     31c:	89 8b       	std	Y+17, r24	; 0x11
     31e:	3f c0       	rjmp	.+126    	; 0x39e <__vector_1+0x118>
	else if (__tmp > 65535)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	6d 85       	ldd	r22, Y+13	; 0x0d
     32a:	7e 85       	ldd	r23, Y+14	; 0x0e
     32c:	8f 85       	ldd	r24, Y+15	; 0x0f
     32e:	98 89       	ldd	r25, Y+16	; 0x10
     330:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	4c f5       	brge	.+82     	; 0x38a <__vector_1+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	69 85       	ldd	r22, Y+9	; 0x09
     342:	7a 85       	ldd	r23, Y+10	; 0x0a
     344:	8b 85       	ldd	r24, Y+11	; 0x0b
     346:	9c 85       	ldd	r25, Y+12	; 0x0c
     348:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9a 8b       	std	Y+18, r25	; 0x12
     35e:	89 8b       	std	Y+17, r24	; 0x11
     360:	0f c0       	rjmp	.+30     	; 0x380 <__vector_1+0xfa>
     362:	80 e9       	ldi	r24, 0x90	; 144
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	9c 8b       	std	Y+20, r25	; 0x14
     368:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36a:	8b 89       	ldd	r24, Y+19	; 0x13
     36c:	9c 89       	ldd	r25, Y+20	; 0x14
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <__vector_1+0xe8>
     372:	9c 8b       	std	Y+20, r25	; 0x14
     374:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	89 89       	ldd	r24, Y+17	; 0x11
     378:	9a 89       	ldd	r25, Y+18	; 0x12
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9a 8b       	std	Y+18, r25	; 0x12
     37e:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	89 89       	ldd	r24, Y+17	; 0x11
     382:	9a 89       	ldd	r25, Y+18	; 0x12
     384:	89 2b       	or	r24, r25
     386:	69 f7       	brne	.-38     	; 0x362 <__vector_1+0xdc>
     388:	14 c0       	rjmp	.+40     	; 0x3b2 <__vector_1+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38a:	6d 85       	ldd	r22, Y+13	; 0x0d
     38c:	7e 85       	ldd	r23, Y+14	; 0x0e
     38e:	8f 85       	ldd	r24, Y+15	; 0x0f
     390:	98 89       	ldd	r25, Y+16	; 0x10
     392:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	9a 8b       	std	Y+18, r25	; 0x12
     39c:	89 8b       	std	Y+17, r24	; 0x11
     39e:	89 89       	ldd	r24, Y+17	; 0x11
     3a0:	9a 89       	ldd	r25, Y+18	; 0x12
     3a2:	9e 8b       	std	Y+22, r25	; 0x16
     3a4:	8d 8b       	std	Y+21, r24	; 0x15
     3a6:	8d 89       	ldd	r24, Y+21	; 0x15
     3a8:	9e 89       	ldd	r25, Y+22	; 0x16
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <__vector_1+0x124>
     3ae:	9e 8b       	std	Y+22, r25	; 0x16
     3b0:	8d 8b       	std	Y+21, r24	; 0x15
			{
				_delay_ms(150);
				if (FreqRespiracao < 30)
     3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b6:	8e 31       	cpi	r24, 0x1E	; 30
     3b8:	28 f4       	brcc	.+10     	; 0x3c4 <__vector_1+0x13e>
				FreqRespiracao++;
     3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				showResp_O2();
     3c4:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
{
	if (flag_select == 1)
	{
		if (FreqRespiracao < 30)
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     3c8:	89 e2       	ldi	r24, 0x29	; 41
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	88 2f       	mov	r24, r24
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	84 70       	andi	r24, 0x04	; 4
     3d6:	99 27       	eor	r25, r25
     3d8:	89 2b       	or	r24, r25
     3da:	09 f4       	brne	.+2      	; 0x3de <__vector_1+0x158>
     3dc:	78 cf       	rjmp	.-272    	; 0x2ce <__vector_1+0x48>
				showResp_O2();
			}
		}
	}
	
}
     3de:	2b c1       	rjmp	.+598    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
				FreqRespiracao++;
				showResp_O2();
			}
		}
	}
	else if (flag_select == 2)
     3e0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	09 f0       	breq	.+2      	; 0x3ea <__vector_1+0x164>
     3e8:	93 c0       	rjmp	.+294    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
	{
		if (valve_O2 < 100)
     3ea:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     3ee:	84 36       	cpi	r24, 0x64	; 100
     3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__vector_1+0x16e>
     3f2:	21 c1       	rjmp	.+578    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     3f4:	81 c0       	rjmp	.+258    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	a6 e1       	ldi	r26, 0x16	; 22
     3fc:	b3 e4       	ldi	r27, 0x43	; 67
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	4a e7       	ldi	r20, 0x7A	; 122
     40c:	55 e4       	ldi	r21, 0x45	; 69
     40e:	69 81       	ldd	r22, Y+1	; 0x01
     410:	7a 81       	ldd	r23, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	8f 8b       	std	Y+23, r24	; 0x17
     420:	98 8f       	std	Y+24, r25	; 0x18
     422:	a9 8f       	std	Y+25, r26	; 0x19
     424:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e8       	ldi	r20, 0x80	; 128
     42c:	5f e3       	ldi	r21, 0x3F	; 63
     42e:	6f 89       	ldd	r22, Y+23	; 0x17
     430:	78 8d       	ldd	r23, Y+24	; 0x18
     432:	89 8d       	ldd	r24, Y+25	; 0x19
     434:	9a 8d       	ldd	r25, Y+26	; 0x1a
     436:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     43a:	88 23       	and	r24, r24
     43c:	2c f4       	brge	.+10     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		__ticks = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	9c 8f       	std	Y+28, r25	; 0x1c
     444:	8b 8f       	std	Y+27, r24	; 0x1b
     446:	3f c0       	rjmp	.+126    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
	else if (__tmp > 65535)
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	3f ef       	ldi	r19, 0xFF	; 255
     44c:	4f e7       	ldi	r20, 0x7F	; 127
     44e:	57 e4       	ldi	r21, 0x47	; 71
     450:	6f 89       	ldd	r22, Y+23	; 0x17
     452:	78 8d       	ldd	r23, Y+24	; 0x18
     454:	89 8d       	ldd	r24, Y+25	; 0x19
     456:	9a 8d       	ldd	r25, Y+26	; 0x1a
     458:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     45c:	18 16       	cp	r1, r24
     45e:	4c f5       	brge	.+82     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e2       	ldi	r20, 0x20	; 32
     466:	51 e4       	ldi	r21, 0x41	; 65
     468:	69 81       	ldd	r22, Y+1	; 0x01
     46a:	7a 81       	ldd	r23, Y+2	; 0x02
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9c 8f       	std	Y+28, r25	; 0x1c
     486:	8b 8f       	std	Y+27, r24	; 0x1b
     488:	0f c0       	rjmp	.+30     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     48a:	80 e9       	ldi	r24, 0x90	; 144
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	9e 8f       	std	Y+30, r25	; 0x1e
     490:	8d 8f       	std	Y+29, r24	; 0x1d
     492:	8d 8d       	ldd	r24, Y+29	; 0x1d
     494:	9e 8d       	ldd	r25, Y+30	; 0x1e
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     49a:	9e 8f       	std	Y+30, r25	; 0x1e
     49c:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	9c 8f       	std	Y+28, r25	; 0x1c
     4a6:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4ac:	89 2b       	or	r24, r25
     4ae:	69 f7       	brne	.-38     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     4b0:	14 c0       	rjmp	.+40     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b2:	6f 89       	ldd	r22, Y+23	; 0x17
     4b4:	78 8d       	ldd	r23, Y+24	; 0x18
     4b6:	89 8d       	ldd	r24, Y+25	; 0x19
     4b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4ba:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9c 8f       	std	Y+28, r25	; 0x1c
     4c4:	8b 8f       	std	Y+27, r24	; 0x1b
     4c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4ca:	98 a3       	std	Y+32, r25	; 0x20
     4cc:	8f 8f       	std	Y+31, r24	; 0x1f
     4ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4d0:	98 a1       	ldd	r25, Y+32	; 0x20
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d6:	98 a3       	std	Y+32, r25	; 0x20
     4d8:	8f 8f       	std	Y+31, r24	; 0x1f
			{
				_delay_ms(150);
				if (valve_O2 < 100)
     4da:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     4de:	84 36       	cpi	r24, 0x64	; 100
     4e0:	28 f4       	brcc	.+10     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
				valve_O2 +=10;
     4e2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     4e6:	86 5f       	subi	r24, 0xF6	; 246
     4e8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
				showResp_O2();
     4ec:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
				controlValve(&valve_O2);
     4f0:	86 e8       	ldi	r24, 0x86	; 134
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 85 0c 	call	0x190a	; 0x190a <controlValve>
	}
	else if (flag_select == 2)
	{
		if (valve_O2 < 100)
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     4f8:	89 e2       	ldi	r24, 0x29	; 41
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	fc 01       	movw	r30, r24
     4fe:	80 81       	ld	r24, Z
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	84 70       	andi	r24, 0x04	; 4
     506:	99 27       	eor	r25, r25
     508:	89 2b       	or	r24, r25
     50a:	09 f4       	brne	.+2      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
     50c:	74 cf       	rjmp	.-280    	; 0x3f6 <__vector_1+0x170>
				showResp_O2();
			}
		}
	}
	
}
     50e:	93 c0       	rjmp	.+294    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
				showResp_O2();
				controlValve(&valve_O2);
			}
		}
	}
	else if (flag_select == 3)
     510:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     514:	83 30       	cpi	r24, 0x03	; 3
     516:	09 f0       	breq	.+2      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     518:	8e c0       	rjmp	.+284    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
	{
		if (vol_O2 < 8)
     51a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     51e:	88 30       	cpi	r24, 0x08	; 8
     520:	08 f0       	brcs	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     522:	89 c0       	rjmp	.+274    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     524:	7d c0       	rjmp	.+250    	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	a6 e1       	ldi	r26, 0x16	; 22
     52c:	b3 e4       	ldi	r27, 0x43	; 67
     52e:	8d 83       	std	Y+5, r24	; 0x05
     530:	9e 83       	std	Y+6, r25	; 0x06
     532:	af 83       	std	Y+7, r26	; 0x07
     534:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	4a e7       	ldi	r20, 0x7A	; 122
     53c:	55 e4       	ldi	r21, 0x45	; 69
     53e:	6d 81       	ldd	r22, Y+5	; 0x05
     540:	7e 81       	ldd	r23, Y+6	; 0x06
     542:	8f 81       	ldd	r24, Y+7	; 0x07
     544:	98 85       	ldd	r25, Y+8	; 0x08
     546:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	89 a3       	std	Y+33, r24	; 0x21
     550:	9a a3       	std	Y+34, r25	; 0x22
     552:	ab a3       	std	Y+35, r26	; 0x23
     554:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	40 e8       	ldi	r20, 0x80	; 128
     55c:	5f e3       	ldi	r21, 0x3F	; 63
     55e:	69 a1       	ldd	r22, Y+33	; 0x21
     560:	7a a1       	ldd	r23, Y+34	; 0x22
     562:	8b a1       	ldd	r24, Y+35	; 0x23
     564:	9c a1       	ldd	r25, Y+36	; 0x24
     566:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     56a:	88 23       	and	r24, r24
     56c:	2c f4       	brge	.+10     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
		__ticks = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	9e a3       	std	Y+38, r25	; 0x26
     574:	8d a3       	std	Y+37, r24	; 0x25
     576:	3f c0       	rjmp	.+126    	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
	else if (__tmp > 65535)
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	3f ef       	ldi	r19, 0xFF	; 255
     57c:	4f e7       	ldi	r20, 0x7F	; 127
     57e:	57 e4       	ldi	r21, 0x47	; 71
     580:	69 a1       	ldd	r22, Y+33	; 0x21
     582:	7a a1       	ldd	r23, Y+34	; 0x22
     584:	8b a1       	ldd	r24, Y+35	; 0x23
     586:	9c a1       	ldd	r25, Y+36	; 0x24
     588:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     58c:	18 16       	cp	r1, r24
     58e:	4c f5       	brge	.+82     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e2       	ldi	r20, 0x20	; 32
     596:	51 e4       	ldi	r21, 0x41	; 65
     598:	6d 81       	ldd	r22, Y+5	; 0x05
     59a:	7e 81       	ldd	r23, Y+6	; 0x06
     59c:	8f 81       	ldd	r24, Y+7	; 0x07
     59e:	98 85       	ldd	r25, Y+8	; 0x08
     5a0:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	bc 01       	movw	r22, r24
     5aa:	cd 01       	movw	r24, r26
     5ac:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     5b0:	dc 01       	movw	r26, r24
     5b2:	cb 01       	movw	r24, r22
     5b4:	9e a3       	std	Y+38, r25	; 0x26
     5b6:	8d a3       	std	Y+37, r24	; 0x25
     5b8:	0f c0       	rjmp	.+30     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     5ba:	80 e9       	ldi	r24, 0x90	; 144
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	98 a7       	std	Y+40, r25	; 0x28
     5c0:	8f a3       	std	Y+39, r24	; 0x27
     5c2:	8f a1       	ldd	r24, Y+39	; 0x27
     5c4:	98 a5       	ldd	r25, Y+40	; 0x28
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     5ca:	98 a7       	std	Y+40, r25	; 0x28
     5cc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ce:	8d a1       	ldd	r24, Y+37	; 0x25
     5d0:	9e a1       	ldd	r25, Y+38	; 0x26
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	9e a3       	std	Y+38, r25	; 0x26
     5d6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5d8:	8d a1       	ldd	r24, Y+37	; 0x25
     5da:	9e a1       	ldd	r25, Y+38	; 0x26
     5dc:	89 2b       	or	r24, r25
     5de:	69 f7       	brne	.-38     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
     5e0:	14 c0       	rjmp	.+40     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e2:	69 a1       	ldd	r22, Y+33	; 0x21
     5e4:	7a a1       	ldd	r23, Y+34	; 0x22
     5e6:	8b a1       	ldd	r24, Y+35	; 0x23
     5e8:	9c a1       	ldd	r25, Y+36	; 0x24
     5ea:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     5ee:	dc 01       	movw	r26, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	9e a3       	std	Y+38, r25	; 0x26
     5f4:	8d a3       	std	Y+37, r24	; 0x25
     5f6:	8d a1       	ldd	r24, Y+37	; 0x25
     5f8:	9e a1       	ldd	r25, Y+38	; 0x26
     5fa:	9a a7       	std	Y+42, r25	; 0x2a
     5fc:	89 a7       	std	Y+41, r24	; 0x29
     5fe:	89 a5       	ldd	r24, Y+41	; 0x29
     600:	9a a5       	ldd	r25, Y+42	; 0x2a
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
     606:	9a a7       	std	Y+42, r25	; 0x2a
     608:	89 a7       	std	Y+41, r24	; 0x29
			{
				_delay_ms(150);
				if (vol_O2 < 8)
     60a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     60e:	88 30       	cpi	r24, 0x08	; 8
     610:	28 f4       	brcc	.+10     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
				vol_O2++;
     612:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <vol_O2>
				showResp_O2();
     61c:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
	}
	else if (flag_select == 3)
	{
		if (vol_O2 < 8)
		{
			while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     620:	89 e2       	ldi	r24, 0x29	; 41
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	84 70       	andi	r24, 0x04	; 4
     62e:	99 27       	eor	r25, r25
     630:	89 2b       	or	r24, r25
     632:	09 f4       	brne	.+2      	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
     634:	78 cf       	rjmp	.-272    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
				showResp_O2();
			}
		}
	}
	
}
     636:	00 00       	nop
     638:	aa 96       	adiw	r28, 0x2a	; 42
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <__vector_2>:
ISR(INT1_vect) // interrupção externa 1, quando o botão é pressionado, a freq diminui || a válvula de O2 diminui || o volume de O2 aumenta
{
     66c:	1f 92       	push	r1
     66e:	0f 92       	push	r0
     670:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     674:	0f 92       	push	r0
     676:	11 24       	eor	r1, r1
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	aa 97       	sbiw	r28, 0x2a	; 42
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61
	if (flag_select == 1)
     69e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <__vector_2+0x3c>
     6a6:	8f c0       	rjmp	.+286    	; 0x7c6 <__vector_2+0x15a>
	{
		if (FreqRespiracao > 5)
     6a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ac:	86 30       	cpi	r24, 0x06	; 6
     6ae:	08 f4       	brcc	.+2      	; 0x6b2 <__vector_2+0x46>
     6b0:	b5 c1       	rjmp	.+874    	; 0xa1c <__stack+0x11d>
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     6b2:	7d c0       	rjmp	.+250    	; 0x7ae <__vector_2+0x142>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	a6 e1       	ldi	r26, 0x16	; 22
     6ba:	b3 e4       	ldi	r27, 0x43	; 67
     6bc:	89 87       	std	Y+9, r24	; 0x09
     6be:	9a 87       	std	Y+10, r25	; 0x0a
     6c0:	ab 87       	std	Y+11, r26	; 0x0b
     6c2:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4a e7       	ldi	r20, 0x7A	; 122
     6ca:	55 e4       	ldi	r21, 0x45	; 69
     6cc:	69 85       	ldd	r22, Y+9	; 0x09
     6ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     6d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d4:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     6d8:	dc 01       	movw	r26, r24
     6da:	cb 01       	movw	r24, r22
     6dc:	8d 87       	std	Y+13, r24	; 0x0d
     6de:	9e 87       	std	Y+14, r25	; 0x0e
     6e0:	af 87       	std	Y+15, r26	; 0x0f
     6e2:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f2:	98 89       	ldd	r25, Y+16	; 0x10
     6f4:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     6f8:	88 23       	and	r24, r24
     6fa:	2c f4       	brge	.+10     	; 0x706 <__vector_2+0x9a>
		__ticks = 1;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9a 8b       	std	Y+18, r25	; 0x12
     702:	89 8b       	std	Y+17, r24	; 0x11
     704:	3f c0       	rjmp	.+126    	; 0x784 <__vector_2+0x118>
	else if (__tmp > 65535)
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	3f ef       	ldi	r19, 0xFF	; 255
     70a:	4f e7       	ldi	r20, 0x7F	; 127
     70c:	57 e4       	ldi	r21, 0x47	; 71
     70e:	6d 85       	ldd	r22, Y+13	; 0x0d
     710:	7e 85       	ldd	r23, Y+14	; 0x0e
     712:	8f 85       	ldd	r24, Y+15	; 0x0f
     714:	98 89       	ldd	r25, Y+16	; 0x10
     716:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     71a:	18 16       	cp	r1, r24
     71c:	4c f5       	brge	.+82     	; 0x770 <__vector_2+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e2       	ldi	r20, 0x20	; 32
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	69 85       	ldd	r22, Y+9	; 0x09
     728:	7a 85       	ldd	r23, Y+10	; 0x0a
     72a:	8b 85       	ldd	r24, Y+11	; 0x0b
     72c:	9c 85       	ldd	r25, Y+12	; 0x0c
     72e:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	9a 8b       	std	Y+18, r25	; 0x12
     744:	89 8b       	std	Y+17, r24	; 0x11
     746:	0f c0       	rjmp	.+30     	; 0x766 <__vector_2+0xfa>
     748:	80 e9       	ldi	r24, 0x90	; 144
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	9c 8b       	std	Y+20, r25	; 0x14
     74e:	8b 8b       	std	Y+19, r24	; 0x13
     750:	8b 89       	ldd	r24, Y+19	; 0x13
     752:	9c 89       	ldd	r25, Y+20	; 0x14
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <__vector_2+0xe8>
     758:	9c 8b       	std	Y+20, r25	; 0x14
     75a:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75c:	89 89       	ldd	r24, Y+17	; 0x11
     75e:	9a 89       	ldd	r25, Y+18	; 0x12
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	9a 8b       	std	Y+18, r25	; 0x12
     764:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     766:	89 89       	ldd	r24, Y+17	; 0x11
     768:	9a 89       	ldd	r25, Y+18	; 0x12
     76a:	89 2b       	or	r24, r25
     76c:	69 f7       	brne	.-38     	; 0x748 <__vector_2+0xdc>
     76e:	14 c0       	rjmp	.+40     	; 0x798 <__vector_2+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     770:	6d 85       	ldd	r22, Y+13	; 0x0d
     772:	7e 85       	ldd	r23, Y+14	; 0x0e
     774:	8f 85       	ldd	r24, Y+15	; 0x0f
     776:	98 89       	ldd	r25, Y+16	; 0x10
     778:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	9a 8b       	std	Y+18, r25	; 0x12
     782:	89 8b       	std	Y+17, r24	; 0x11
     784:	89 89       	ldd	r24, Y+17	; 0x11
     786:	9a 89       	ldd	r25, Y+18	; 0x12
     788:	9e 8b       	std	Y+22, r25	; 0x16
     78a:	8d 8b       	std	Y+21, r24	; 0x15
     78c:	8d 89       	ldd	r24, Y+21	; 0x15
     78e:	9e 89       	ldd	r25, Y+22	; 0x16
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <__vector_2+0x124>
     794:	9e 8b       	std	Y+22, r25	; 0x16
     796:	8d 8b       	std	Y+21, r24	; 0x15
			{
				_delay_ms(150);
				if (FreqRespiracao > 5)
     798:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     79c:	86 30       	cpi	r24, 0x06	; 6
     79e:	28 f0       	brcs	.+10     	; 0x7aa <__vector_2+0x13e>
				FreqRespiracao--;
     7a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				showResp_O2();
     7aa:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
{
	if (flag_select == 1)
	{
		if (FreqRespiracao > 5)
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     7ae:	89 e2       	ldi	r24, 0x29	; 41
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	88 70       	andi	r24, 0x08	; 8
     7bc:	99 27       	eor	r25, r25
     7be:	89 2b       	or	r24, r25
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <__vector_2+0x158>
     7c2:	78 cf       	rjmp	.-272    	; 0x6b4 <__vector_2+0x48>
				vol_O2--;
				showResp_O2();
			}
		}
	}
}
     7c4:	2b c1       	rjmp	.+598    	; 0xa1c <__stack+0x11d>
				FreqRespiracao--;
				showResp_O2();
			}
		}
	}
	else if (flag_select == 2)
     7c6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_2+0x164>
     7ce:	93 c0       	rjmp	.+294    	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
	{
		if (valve_O2 > 0)
     7d0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     7d4:	88 23       	and	r24, r24
     7d6:	09 f4       	brne	.+2      	; 0x7da <__vector_2+0x16e>
     7d8:	21 c1       	rjmp	.+578    	; 0xa1c <__stack+0x11d>
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     7da:	81 c0       	rjmp	.+258    	; 0x8de <__DATA_REGION_LENGTH__+0xde>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a6 e1       	ldi	r26, 0x16	; 22
     7e2:	b3 e4       	ldi	r27, 0x43	; 67
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	ab 83       	std	Y+3, r26	; 0x03
     7ea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	4a e7       	ldi	r20, 0x7A	; 122
     7f2:	55 e4       	ldi	r21, 0x45	; 69
     7f4:	69 81       	ldd	r22, Y+1	; 0x01
     7f6:	7a 81       	ldd	r23, Y+2	; 0x02
     7f8:	8b 81       	ldd	r24, Y+3	; 0x03
     7fa:	9c 81       	ldd	r25, Y+4	; 0x04
     7fc:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	8f 8b       	std	Y+23, r24	; 0x17
     806:	98 8f       	std	Y+24, r25	; 0x18
     808:	a9 8f       	std	Y+25, r26	; 0x19
     80a:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e8       	ldi	r20, 0x80	; 128
     812:	5f e3       	ldi	r21, 0x3F	; 63
     814:	6f 89       	ldd	r22, Y+23	; 0x17
     816:	78 8d       	ldd	r23, Y+24	; 0x18
     818:	89 8d       	ldd	r24, Y+25	; 0x19
     81a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     81c:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     820:	88 23       	and	r24, r24
     822:	2c f4       	brge	.+10     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		__ticks = 1;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9c 8f       	std	Y+28, r25	; 0x1c
     82a:	8b 8f       	std	Y+27, r24	; 0x1b
     82c:	3f c0       	rjmp	.+126    	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
	else if (__tmp > 65535)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	3f ef       	ldi	r19, 0xFF	; 255
     832:	4f e7       	ldi	r20, 0x7F	; 127
     834:	57 e4       	ldi	r21, 0x47	; 71
     836:	6f 89       	ldd	r22, Y+23	; 0x17
     838:	78 8d       	ldd	r23, Y+24	; 0x18
     83a:	89 8d       	ldd	r24, Y+25	; 0x19
     83c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     83e:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     842:	18 16       	cp	r1, r24
     844:	4c f5       	brge	.+82     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e2       	ldi	r20, 0x20	; 32
     84c:	51 e4       	ldi	r21, 0x41	; 65
     84e:	69 81       	ldd	r22, Y+1	; 0x01
     850:	7a 81       	ldd	r23, Y+2	; 0x02
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	bc 01       	movw	r22, r24
     860:	cd 01       	movw	r24, r26
     862:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	9c 8f       	std	Y+28, r25	; 0x1c
     86c:	8b 8f       	std	Y+27, r24	; 0x1b
     86e:	0f c0       	rjmp	.+30     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
     870:	80 e9       	ldi	r24, 0x90	; 144
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9e 8f       	std	Y+30, r25	; 0x1e
     876:	8d 8f       	std	Y+29, r24	; 0x1d
     878:	8d 8d       	ldd	r24, Y+29	; 0x1d
     87a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     880:	9e 8f       	std	Y+30, r25	; 0x1e
     882:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	8b 8d       	ldd	r24, Y+27	; 0x1b
     886:	9c 8d       	ldd	r25, Y+28	; 0x1c
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	9c 8f       	std	Y+28, r25	; 0x1c
     88c:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     890:	9c 8d       	ldd	r25, Y+28	; 0x1c
     892:	89 2b       	or	r24, r25
     894:	69 f7       	brne	.-38     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     898:	6f 89       	ldd	r22, Y+23	; 0x17
     89a:	78 8d       	ldd	r23, Y+24	; 0x18
     89c:	89 8d       	ldd	r24, Y+25	; 0x19
     89e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8a0:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	9c 8f       	std	Y+28, r25	; 0x1c
     8aa:	8b 8f       	std	Y+27, r24	; 0x1b
     8ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8b0:	98 a3       	std	Y+32, r25	; 0x20
     8b2:	8f 8f       	std	Y+31, r24	; 0x1f
     8b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b6:	98 a1       	ldd	r25, Y+32	; 0x20
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
     8bc:	98 a3       	std	Y+32, r25	; 0x20
     8be:	8f 8f       	std	Y+31, r24	; 0x1f
			{
				_delay_ms(150);
				if (valve_O2 > 0)
     8c0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     8c4:	88 23       	and	r24, r24
     8c6:	29 f0       	breq	.+10     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
				valve_O2 -=10;
     8c8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     8cc:	8a 50       	subi	r24, 0x0A	; 10
     8ce:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
				showResp_O2();
     8d2:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
				controlValve(&valve_O2);
     8d6:	86 e8       	ldi	r24, 0x86	; 134
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 85 0c 	call	0x190a	; 0x190a <controlValve>
	}
	else if (flag_select == 2)
	{
		if (valve_O2 > 0)
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     8de:	89 e2       	ldi	r24, 0x29	; 41
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	88 70       	andi	r24, 0x08	; 8
     8ec:	99 27       	eor	r25, r25
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     8f2:	74 cf       	rjmp	.-280    	; 0x7dc <__vector_2+0x170>
				vol_O2--;
				showResp_O2();
			}
		}
	}
}
     8f4:	93 c0       	rjmp	.+294    	; 0xa1c <__stack+0x11d>
				showResp_O2();
				controlValve(&valve_O2);
			}
		}
	}
	else if (flag_select == 3)
     8f6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	8e c0       	rjmp	.+284    	; 0xa1c <__stack+0x11d>
	{
		if (vol_O2 > 0)
     900:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	89 c0       	rjmp	.+274    	; 0xa1c <__stack+0x11d>
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     90a:	7d c0       	rjmp	.+250    	; 0xa06 <__stack+0x107>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	a6 e1       	ldi	r26, 0x16	; 22
     912:	b3 e4       	ldi	r27, 0x43	; 67
     914:	8d 83       	std	Y+5, r24	; 0x05
     916:	9e 83       	std	Y+6, r25	; 0x06
     918:	af 83       	std	Y+7, r26	; 0x07
     91a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	4a e7       	ldi	r20, 0x7A	; 122
     922:	55 e4       	ldi	r21, 0x45	; 69
     924:	6d 81       	ldd	r22, Y+5	; 0x05
     926:	7e 81       	ldd	r23, Y+6	; 0x06
     928:	8f 81       	ldd	r24, Y+7	; 0x07
     92a:	98 85       	ldd	r25, Y+8	; 0x08
     92c:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     930:	dc 01       	movw	r26, r24
     932:	cb 01       	movw	r24, r22
     934:	89 a3       	std	Y+33, r24	; 0x21
     936:	9a a3       	std	Y+34, r25	; 0x22
     938:	ab a3       	std	Y+35, r26	; 0x23
     93a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e8       	ldi	r20, 0x80	; 128
     942:	5f e3       	ldi	r21, 0x3F	; 63
     944:	69 a1       	ldd	r22, Y+33	; 0x21
     946:	7a a1       	ldd	r23, Y+34	; 0x22
     948:	8b a1       	ldd	r24, Y+35	; 0x23
     94a:	9c a1       	ldd	r25, Y+36	; 0x24
     94c:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
     950:	88 23       	and	r24, r24
     952:	2c f4       	brge	.+10     	; 0x95e <__stack+0x5f>
		__ticks = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	9e a3       	std	Y+38, r25	; 0x26
     95a:	8d a3       	std	Y+37, r24	; 0x25
     95c:	3f c0       	rjmp	.+126    	; 0x9dc <__stack+0xdd>
	else if (__tmp > 65535)
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	3f ef       	ldi	r19, 0xFF	; 255
     962:	4f e7       	ldi	r20, 0x7F	; 127
     964:	57 e4       	ldi	r21, 0x47	; 71
     966:	69 a1       	ldd	r22, Y+33	; 0x21
     968:	7a a1       	ldd	r23, Y+34	; 0x22
     96a:	8b a1       	ldd	r24, Y+35	; 0x23
     96c:	9c a1       	ldd	r25, Y+36	; 0x24
     96e:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
     972:	18 16       	cp	r1, r24
     974:	4c f5       	brge	.+82     	; 0x9c8 <__stack+0xc9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	51 e4       	ldi	r21, 0x41	; 65
     97e:	6d 81       	ldd	r22, Y+5	; 0x05
     980:	7e 81       	ldd	r23, Y+6	; 0x06
     982:	8f 81       	ldd	r24, Y+7	; 0x07
     984:	98 85       	ldd	r25, Y+8	; 0x08
     986:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	9e a3       	std	Y+38, r25	; 0x26
     99c:	8d a3       	std	Y+37, r24	; 0x25
     99e:	0f c0       	rjmp	.+30     	; 0x9be <__stack+0xbf>
     9a0:	80 e9       	ldi	r24, 0x90	; 144
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	98 a7       	std	Y+40, r25	; 0x28
     9a6:	8f a3       	std	Y+39, r24	; 0x27
     9a8:	8f a1       	ldd	r24, Y+39	; 0x27
     9aa:	98 a5       	ldd	r25, Y+40	; 0x28
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <__stack+0xad>
     9b0:	98 a7       	std	Y+40, r25	; 0x28
     9b2:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b4:	8d a1       	ldd	r24, Y+37	; 0x25
     9b6:	9e a1       	ldd	r25, Y+38	; 0x26
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	9e a3       	std	Y+38, r25	; 0x26
     9bc:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9be:	8d a1       	ldd	r24, Y+37	; 0x25
     9c0:	9e a1       	ldd	r25, Y+38	; 0x26
     9c2:	89 2b       	or	r24, r25
     9c4:	69 f7       	brne	.-38     	; 0x9a0 <__stack+0xa1>
     9c6:	14 c0       	rjmp	.+40     	; 0x9f0 <__stack+0xf1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c8:	69 a1       	ldd	r22, Y+33	; 0x21
     9ca:	7a a1       	ldd	r23, Y+34	; 0x22
     9cc:	8b a1       	ldd	r24, Y+35	; 0x23
     9ce:	9c a1       	ldd	r25, Y+36	; 0x24
     9d0:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	9e a3       	std	Y+38, r25	; 0x26
     9da:	8d a3       	std	Y+37, r24	; 0x25
     9dc:	8d a1       	ldd	r24, Y+37	; 0x25
     9de:	9e a1       	ldd	r25, Y+38	; 0x26
     9e0:	9a a7       	std	Y+42, r25	; 0x2a
     9e2:	89 a7       	std	Y+41, r24	; 0x29
     9e4:	89 a5       	ldd	r24, Y+41	; 0x29
     9e6:	9a a5       	ldd	r25, Y+42	; 0x2a
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	f1 f7       	brne	.-4      	; 0x9e8 <__stack+0xe9>
     9ec:	9a a7       	std	Y+42, r25	; 0x2a
     9ee:	89 a7       	std	Y+41, r24	; 0x29
			{
				_delay_ms(150);
				if (vol_O2 > 0)
     9f0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     9f4:	88 23       	and	r24, r24
     9f6:	29 f0       	breq	.+10     	; 0xa02 <__stack+0x103>
				vol_O2--;
     9f8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <vol_O2>
				showResp_O2();
     a02:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
	}
	else if (flag_select == 3)
	{
		if (vol_O2 > 0)
		{
			while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     a06:	89 e2       	ldi	r24, 0x29	; 41
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	88 70       	andi	r24, 0x08	; 8
     a14:	99 27       	eor	r25, r25
     a16:	89 2b       	or	r24, r25
     a18:	09 f4       	brne	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	78 cf       	rjmp	.-272    	; 0x90c <__stack+0xd>
				vol_O2--;
				showResp_O2();
			}
		}
	}
}
     a1c:	00 00       	nop
     a1e:	aa 96       	adiw	r28, 0x2a	; 42
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_14>:
ISR(TIMER0_COMPA_vect) // interrupção do TC0 a cada 1ms = (64*(249+1))/16MHz
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
	tempo_ms++;
     a7e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
     a82:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
     a86:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
     a8a:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	a1 1d       	adc	r26, r1
     a92:	b1 1d       	adc	r27, r1
     a94:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <tempo_ms>
     a98:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <tempo_ms+0x1>
     a9c:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <tempo_ms+0x2>
     aa0:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <tempo_ms+0x3>
	if ((tempo_ms % 150) == 0) // mudança de canal a cada 150ms
     aa4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
     aa8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
     aac:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
     ab0:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
     ab4:	26 e9       	ldi	r18, 0x96	; 150
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	bc 01       	movw	r22, r24
     abe:	cd 01       	movw	r24, r26
     ac0:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	89 2b       	or	r24, r25
     aca:	8a 2b       	or	r24, r26
     acc:	8b 2b       	or	r24, r27
     ace:	11 f4       	brne	.+4      	; 0xad4 <__vector_14+0x82>
		mudacanal();
     ad0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <mudacanal>
	if((tempo_ms % 200) == 0) // mostrando os dados no LCD a cada 200ms
     ad4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
     ad8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
     adc:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
     ae0:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
     ae4:	28 ec       	ldi	r18, 0xC8	; 200
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	bc 01       	movw	r22, r24
     aee:	cd 01       	movw	r24, r26
     af0:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	89 2b       	or	r24, r25
     afa:	8a 2b       	or	r24, r26
     afc:	8b 2b       	or	r24, r27
     afe:	49 f4       	brne	.+18     	; 0xb12 <__vector_14+0xc0>
	{
		if (flag_select == 0)
     b00:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     b04:	88 23       	and	r24, r24
     b06:	19 f4       	brne	.+6      	; 0xb0e <__vector_14+0xbc>
			showHP();
     b08:	0e 94 1a 08 	call	0x1034	; 0x1034 <showHP>
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <__vector_14+0xc0>
		else
			showResp_O2();
     b0e:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>
	}
	if ((tempo_ms % 5000) == 0)
     b12:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
     b16:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
     b1a:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
     b1e:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
     b22:	28 e8       	ldi	r18, 0x88	; 136
     b24:	33 e1       	ldi	r19, 0x13	; 19
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	bc 01       	movw	r22, r24
     b2c:	cd 01       	movw	r24, r26
     b2e:	0e 94 07 13 	call	0x260e	; 0x260e <__udivmodsi4>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	89 2b       	or	r24, r25
     b38:	8a 2b       	or	r24, r26
     b3a:	8b 2b       	or	r24, r27
     b3c:	11 f4       	brne	.+4      	; 0xb42 <__vector_14+0xf0>
		nokia_lcd_init(); // Reiniciando o LCD a cada 5s
     b3e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nokia_lcd_init>
}
     b42:	00 00       	nop
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_5>:
ISR(PCINT2_vect) // Contador de BPM
{
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	4f 93       	push	r20
     b86:	5f 93       	push	r21
     b88:	6f 93       	push	r22
     b8a:	7f 93       	push	r23
     b8c:	8f 93       	push	r24
     b8e:	9f 93       	push	r25
     b90:	af 93       	push	r26
     b92:	bf 93       	push	r27
     b94:	ef 93       	push	r30
     b96:	ff 93       	push	r31
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	static uint32_t catch_tempo; // variável para capturar o tempo anterior
	
	bpm = (60000.0)/((tempo_ms - catch_tempo)*2.0); // *2.0 porque a interrupção ocorre a cada T/2 (subida e descida) | freq(hertz) = freq(BPM)/60
     ba0:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <tempo_ms>
     ba4:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <tempo_ms+0x1>
     ba8:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <tempo_ms+0x2>
     bac:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <tempo_ms+0x3>
     bb0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <catch_tempo.2182>
     bb4:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <catch_tempo.2182+0x1>
     bb8:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <catch_tempo.2182+0x2>
     bbc:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <catch_tempo.2182+0x3>
     bc0:	79 01       	movw	r14, r18
     bc2:	8a 01       	movw	r16, r20
     bc4:	e8 1a       	sub	r14, r24
     bc6:	f9 0a       	sbc	r15, r25
     bc8:	0a 0b       	sbc	r16, r26
     bca:	1b 0b       	sbc	r17, r27
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	9c 01       	movw	r18, r24
     bde:	ad 01       	movw	r20, r26
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9c 01       	movw	r18, r24
     bee:	ad 01       	movw	r20, r26
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	70 e6       	ldi	r23, 0x60	; 96
     bf4:	8a e6       	ldi	r24, 0x6A	; 106
     bf6:	97 e4       	ldi	r25, 0x47	; 71
     bf8:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <bpm>
     c10:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <bpm+0x1>
     c14:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <bpm+0x2>
     c18:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <bpm+0x3>
	catch_tempo = tempo_ms; // "Capturando" o tempo atual
     c1c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
     c20:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
     c24:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
     c28:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
     c2c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <catch_tempo.2182>
     c30:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <catch_tempo.2182+0x1>
     c34:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <catch_tempo.2182+0x2>
     c38:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <catch_tempo.2182+0x3>
}
     c3c:	00 00       	nop
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	0f 90       	pop	r0
     c64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_18>:
ISR(USART_RX_vect) // Controle da entrada serial da pressão
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	1f 92       	push	r1
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t flag_UART;
	unsigned char recebido = USART_Receive(); // Esse recebido é para não chamar a função de receber sempre
     c9c:	0e 94 28 0a 	call	0x1450	; 0x1450 <USART_Receive>
     ca0:	89 83       	std	Y+1, r24	; 0x01
	
	if (recebido == ';')
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	8b 33       	cpi	r24, 0x3B	; 59
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <__vector_18+0x42>
	flag_UART = 1; // Dado início ao recebimento
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <flag_UART.2188>
		if (flag_UART == 1)
		USART_pressao(recebido);
		else
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão, caso chegue um recebido e a flag esteja em zero
	}
}
     cae:	1a c0       	rjmp	.+52     	; 0xce4 <__vector_18+0x76>
	static uint8_t flag_UART;
	unsigned char recebido = USART_Receive(); // Esse recebido é para não chamar a função de receber sempre
	
	if (recebido == ';')
	flag_UART = 1; // Dado início ao recebimento
	else if (recebido == ':')
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	8a 33       	cpi	r24, 0x3A	; 58
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <__vector_18+0x54>
	{
		flag_UART = 0;				       // Finalizado o recebimento
     cb6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <flag_UART.2188>
		USART_pressao(recebido);           // enviando ":" para a função de pressão
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	0e 94 3a 0a 	call	0x1474	; 0x1474 <USART_pressao>
		if (flag_UART == 1)
		USART_pressao(recebido);
		else
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão, caso chegue um recebido e a flag esteja em zero
	}
}
     cc0:	11 c0       	rjmp	.+34     	; 0xce4 <__vector_18+0x76>
		flag_UART = 0;				       // Finalizado o recebimento
		USART_pressao(recebido);           // enviando ":" para a função de pressão
	}
	else
	{
		if (flag_UART == 1)
     cc2:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <flag_UART.2188>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <__vector_18+0x64>
		USART_pressao(recebido);
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	0e 94 3a 0a 	call	0x1474	; 0x1474 <USART_pressao>
		else
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão, caso chegue um recebido e a flag esteja em zero
	}
}
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <__vector_18+0x76>
	else
	{
		if (flag_UART == 1)
		USART_pressao(recebido);
		else
		sprintf(pressao, "ERRO!"); // Imprimindo "ERRO!" em pressão, caso chegue um recebido e a flag esteja em zero
     cd2:	86 e0       	ldi	r24, 0x06	; 6
     cd4:	e2 e1       	ldi	r30, 0x12	; 18
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	aa e0       	ldi	r26, 0x0A	; 10
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	01 90       	ld	r0, Z+
     cde:	0d 92       	st	X+, r0
     ce0:	8a 95       	dec	r24
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <__vector_18+0x6e>
	}
}
     ce4:	00 00       	nop
     ce6:	0f 90       	pop	r0
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_3>:
ISR(PCINT0_vect) // Controle do botão de seleção
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	if (!(PINB & (1<<6)))
     d3c:	83 e2       	ldi	r24, 0x23	; 35
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	80 74       	andi	r24, 0x40	; 64
     d4a:	99 27       	eor	r25, r25
     d4c:	89 2b       	or	r24, r25
     d4e:	29 f4       	brne	.+10     	; 0xd5a <__vector_3+0x4a>
	flag_select++;
     d50:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <flag_select>
	
	if (flag_select == 0)
     d5a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     d5e:	88 23       	and	r24, r24
     d60:	19 f4       	brne	.+6      	; 0xd68 <__vector_3+0x58>
	showHP();
     d62:	0e 94 1a 08 	call	0x1034	; 0x1034 <showHP>
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <__vector_3+0x5c>
	
	else
	showResp_O2();
     d68:	0e 94 9b 07 	call	0xf36	; 0xf36 <showResp_O2>

	if (flag_select > 3)
     d6c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	10 f0       	brcs	.+4      	; 0xd78 <__vector_3+0x68>
	flag_select = 0;
     d74:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <flag_select>
}
     d78:	00 00       	nop
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <main>:
int main(void)
{
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	DDRD  = 0b10000000; // PD0..6 - ENTRADA, PD7 - SAÍDA
     daa:	8a e2       	ldi	r24, 0x2A	; 42
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	20 e8       	ldi	r18, 0x80	; 128
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
	PORTD = 0b00011100; // Habilita os resistores de pull-up das portas PD2, PD3
     db4:	8b e2       	ldi	r24, 0x2B	; 43
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	2c e1       	ldi	r18, 0x1C	; 28
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18
	DDRB  = 0b00000110; // PB1,2 = SAÍDA DOS SERVOS
     dbe:	84 e2       	ldi	r24, 0x24	; 36
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	26 e0       	ldi	r18, 0x06	; 6
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18
	PORTB = 0b01000000; // Habilita o pull-up de PB6
     dc8:	85 e2       	ldi	r24, 0x25	; 37
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	20 e4       	ldi	r18, 0x40	; 64
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
	DDRC  = 0b01111100; // saída do LCD PC2...PC6; PC0 e PC1 - Entradas das fontes variáveis
     dd2:	87 e2       	ldi	r24, 0x27	; 39
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	2c e7       	ldi	r18, 0x7C	; 124
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
	PORTC = 0b00000000; // Desabilitando os pull-ups da porta
     ddc:	88 e2       	ldi	r24, 0x28	; 40
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	10 82       	st	Z, r1
	
	// Configuração das interrupções
	EICRA  = 0b00001010; // interrupções externas INT0 e INT1 na borda de descida
     de4:	89 e6       	ldi	r24, 0x69	; 105
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2a e0       	ldi	r18, 0x0A	; 10
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
	EIMSK  = 0b00000011; // habilita as interrupções externas INT0 e INT1
     dee:	8d e3       	ldi	r24, 0x3D	; 61
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	23 e0       	ldi	r18, 0x03	; 3
     df4:	fc 01       	movw	r30, r24
     df6:	20 83       	st	Z, r18
	PCICR  = 0b00000101; // interrupções pin change 2 (porta D) e pin change 0 (Porta B)
     df8:	88 e6       	ldi	r24, 0x68	; 104
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	25 e0       	ldi	r18, 0x05	; 5
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
	PCMSK2 = 0b00010000; // interrupção pin change PD4 - Contador de BPM
     e02:	8d e6       	ldi	r24, 0x6D	; 109
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	20 e1       	ldi	r18, 0x10	; 16
     e08:	fc 01       	movw	r30, r24
     e0a:	20 83       	st	Z, r18
	PCMSK0 = 0b01000000; // interrupção pin change PB6 - Chave Seletora
     e0c:	8b e6       	ldi	r24, 0x6B	; 107
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	20 e4       	ldi	r18, 0x40	; 64
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
	
	// Configuração do Timer de 1 ms
	TCCR0A = 0b00000010; // habilita modo CTC do TC0
     e16:	84 e4       	ldi	r24, 0x44	; 68
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	22 e0       	ldi	r18, 0x02	; 2
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
	TCCR0B = 0b00000011; // liga TC0 com prescaler = 64
     e20:	85 e4       	ldi	r24, 0x45	; 69
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	23 e0       	ldi	r18, 0x03	; 3
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
	OCR0A  = 249;		 // ajusta o comparador para o TC0 contar até 249
     e2a:	87 e4       	ldi	r24, 0x47	; 71
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	29 ef       	ldi	r18, 0xF9	; 249
     e30:	fc 01       	movw	r30, r24
     e32:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010; // habilita a interrupção na igualdade de comparação com OCR0A. A interrupção ocorre a cada 1ms = (64*(249+1))/16MHz
     e34:	8e e6       	ldi	r24, 0x6E	; 110
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	22 e0       	ldi	r18, 0x02	; 2
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
	
	// Configura ADC
	ADCSRA  = 0b11100111;    // habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
     e3e:	8a e7       	ldi	r24, 0x7A	; 122
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	27 ee       	ldi	r18, 0xE7	; 231
     e44:	fc 01       	movw	r30, r24
     e46:	20 83       	st	Z, r18
	ADCSRB  = 0b00000000;    // modo de conversão contínua
     e48:	8b e7       	ldi	r24, 0x7B	; 123
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	fc 01       	movw	r30, r24
     e4e:	10 82       	st	Z, r1
	// medição inicial
	ADMUX   = 0b01000000;    // Tensão interna de ref VCC, canal 0
     e50:	8c e7       	ldi	r24, 0x7C	; 124
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	20 e4       	ldi	r18, 0x40	; 64
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
	DIDR0   = 0b00111110;    // habilita pino PC0 como entrada de ADC0
     e5a:	8e e7       	ldi	r24, 0x7E	; 126
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	2e e3       	ldi	r18, 0x3E	; 62
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
	temp_C  = 10.0*(5.0*ADC/1023.0 + 1.0);
     e64:	88 e7       	ldi	r24, 0x78	; 120
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	cc 01       	movw	r24, r24
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 ea       	ldi	r20, 0xA0	; 160
     e86:	50 e4       	ldi	r21, 0x40	; 64
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 ec       	ldi	r19, 0xC0	; 192
     e98:	4f e7       	ldi	r20, 0x7F	; 127
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e8       	ldi	r20, 0x80	; 128
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e2       	ldi	r20, 0x20	; 32
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_C>
     ed4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_C+0x1>
     ed8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <temp_C+0x2>
     edc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <temp_C+0x3>
	
	// Fast PWM, Timer TC1, OC1A e OC1B habilitados
	ICR1   = 39999; // Período do PWM - TOP = F_CPU/(freq*prescaler) - 1 = 16M/(50*8) - 1 -> T = 20ms
     ee0:	86 e8       	ldi	r24, 0x86	; 134
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	2f e3       	ldi	r18, 0x3F	; 63
     ee6:	3c e9       	ldi	r19, 0x9C	; 156
     ee8:	fc 01       	movw	r30, r24
     eea:	31 83       	std	Z+1, r19	; 0x01
     eec:	20 83       	st	Z, r18
	TCCR1A = 0b10100010; // PWM não invertido nos pinos OC1A e OC1B, via ICR1
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	22 ea       	ldi	r18, 0xA2	; 162
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
	TCCR1B = 0b00011010; // liga TC1, prescaler = 8
     ef8:	81 e8       	ldi	r24, 0x81	; 129
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2a e1       	ldi	r18, 0x1A	; 26
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
	// variando de 2000 a 4000, para 0° a 180°, sendo inicializados em 0°
	OCR1A  = 2000; // Servo BVM
     f02:	88 e8       	ldi	r24, 0x88	; 136
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	20 ed       	ldi	r18, 0xD0	; 208
     f08:	37 e0       	ldi	r19, 0x07	; 7
     f0a:	fc 01       	movw	r30, r24
     f0c:	31 83       	std	Z+1, r19	; 0x01
     f0e:	20 83       	st	Z, r18
	OCR1B  = 2000; // servo O2
     f10:	8a e8       	ldi	r24, 0x8A	; 138
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	20 ed       	ldi	r18, 0xD0	; 208
     f16:	37 e0       	ldi	r19, 0x07	; 7
     f18:	fc 01       	movw	r30, r24
     f1a:	31 83       	std	Z+1, r19	; 0x01
     f1c:	20 83       	st	Z, r18
	
	sei(); // habilita interrupções globais, ativando o bit I do SREG
     f1e:	78 94       	sei
	
	USART_Init(MYUBRR); // Inicializando a USART
     f20:	85 ec       	ldi	r24, 0xC5	; 197
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <USART_Init>
	
	nokia_lcd_init(); // Iniciando o LCD
     f28:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <nokia_lcd_init>
	
	while (1)
	{
		controlSlaveBVM(&FreqRespiracao);
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <controlSlaveBVM>
	}
     f34:	fb cf       	rjmp	.-10     	; 0xf2c <main+0x18a>

00000f36 <showResp_O2>:
}
// Configuração do display modo 1
void showResp_O2(void)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	nokia_lcd_clear(); // Limpa o LCD
     f3e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <nokia_lcd_clear>
	
	// Início
	nokia_lcd_set_cursor(0, 0);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Parametros", 1);
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	88 e1       	ldi	r24, 0x18	; 24
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 7);
     f54:	67 e0       	ldi	r22, 0x07	; 7
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("~~~~~~~~~~~~~~", 1);
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	83 e2       	ldi	r24, 0x23	; 35
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	

	// Frequência de Respiração
	nokia_lcd_set_cursor(0, 15); // Muda o cursor para a posição 0,0
     f66:	6f e0       	ldi	r22, 0x0F	; 15
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_int(FreqRespiracao, 1); // Escreve uma variável de tamanho 1
     f6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	0e 94 10 10 	call	0x2020	; 0x2020 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(35, 15); // Muda o cursor para a posição no argumento
     f7c:	6f e0       	ldi	r22, 0x0F	; 15
     f7e:	83 e2       	ldi	r24, 0x23	; 35
     f80:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("resp/min", 1);// Escreve um texto do tamanho 1
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	82 e3       	ldi	r24, 0x32	; 50
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Válvula de O2
	nokia_lcd_set_cursor(0, 25);
     f8e:	69 e1       	ldi	r22, 0x19	; 25
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_int(valve_O2, 1);
     f96:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	0e 94 10 10 	call	0x2020	; 0x2020 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(35, 25);
     fa4:	69 e1       	ldi	r22, 0x19	; 25
     fa6:	83 e2       	ldi	r24, 0x23	; 35
     fa8:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("%O2", 1);
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	8b e3       	ldi	r24, 0x3B	; 59
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Volume de O2
	nokia_lcd_set_cursor(0, 35);
     fb6:	63 e2       	ldi	r22, 0x23	; 35
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_int(vol_O2, 1);
     fbe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	0e 94 10 10 	call	0x2020	; 0x2020 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(35, 35);
     fcc:	63 e2       	ldi	r22, 0x23	; 35
     fce:	83 e2       	ldi	r24, 0x23	; 35
     fd0:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("vol. O2", 1);
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	8f e3       	ldi	r24, 0x3F	; 63
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Indicador de seleção
	if (flag_select == 1)
     fde:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	51 f4       	brne	.+20     	; 0xffa <showResp_O2+0xc4>
	{
		nokia_lcd_set_cursor(20, 15);
     fe6:	6f e0       	ldi	r22, 0x0F	; 15
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("->", 1);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	87 e4       	ldi	r24, 0x47	; 71
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
     ff8:	17 c0       	rjmp	.+46     	; 0x1028 <showResp_O2+0xf2>
	}
	else if (flag_select == 2)
     ffa:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <flag_select>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	51 f4       	brne	.+20     	; 0x1016 <showResp_O2+0xe0>
	{
		nokia_lcd_set_cursor(20, 25);
    1002:	69 e1       	ldi	r22, 0x19	; 25
    1004:	84 e1       	ldi	r24, 0x14	; 20
    1006:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("->", 1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	87 e4       	ldi	r24, 0x47	; 71
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <showResp_O2+0xf2>
	}
	else
	{
		nokia_lcd_set_cursor(20, 35);
    1016:	63 e2       	ldi	r22, 0x23	; 35
    1018:	84 e1       	ldi	r24, 0x14	; 20
    101a:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
		nokia_lcd_write_string("->", 1);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	87 e4       	ldi	r24, 0x47	; 71
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	}
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
    1028:	0e 94 a2 10 	call	0x2144	; 0x2144 <nokia_lcd_render>
}
    102c:	00 00       	nop
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <showHP>:
// Configuração do display modo 2
void showHP (void)
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	nokia_lcd_clear(); // Limpa o LCD
    103c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <nokia_lcd_clear>
	
	// Início
	nokia_lcd_set_cursor(0, 0);
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Sinais Vitais", 1);
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	8a e4       	ldi	r24, 0x4A	; 74
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	//	Frequência Cardíaca
	nokia_lcd_set_cursor(0, 10);
    1052:	6a e0       	ldi	r22, 0x0A	; 10
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_int(bpm, 1);
    105a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bpm>
    105e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bpm+0x1>
    1062:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <bpm+0x2>
    1066:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <bpm+0x3>
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	0e 94 10 10 	call	0x2020	; 0x2020 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(45, 10);
    1070:	6a e0       	ldi	r22, 0x0A	; 10
    1072:	8d e2       	ldi	r24, 0x2D	; 45
    1074:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("bpm", 1);
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	88 e5       	ldi	r24, 0x58	; 88
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Saturação de O2 no sangue
	nokia_lcd_set_cursor(0, 20);   // As coordenadas das novas variáveis escritas irão tomar como base
    1082:	64 e1       	ldi	r22, 0x14	; 20
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_int(satO2, 1); // a diferença entre as coordenadas
    108a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <satO2>
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	0e 94 10 10 	call	0x2020	; 0x2020 <nokia_lcd_write_int>
	nokia_lcd_set_cursor(45, 20);
    1098:	64 e1       	ldi	r22, 0x14	; 20
    109a:	8d e2       	ldi	r24, 0x2D	; 45
    109c:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("% SpO2", 1);
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	8c e5       	ldi	r24, 0x5C	; 92
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Temperatura Corporal
	nokia_lcd_set_cursor(0, 30);
    10aa:	6e e1       	ldi	r22, 0x1E	; 30
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_float(temp_C, 1);
    10b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp_C>
    10b6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp_C+0x1>
    10ba:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <temp_C+0x2>
    10be:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <temp_C+0x3>
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 43 10 	call	0x2086	; 0x2086 <nokia_lcd_write_float>
	nokia_lcd_set_cursor(45, 30);
    10cc:	6e e1       	ldi	r22, 0x1E	; 30
    10ce:	8d e2       	ldi	r24, 0x2D	; 45
    10d0:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("ºC", 1);
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	83 e6       	ldi	r24, 0x63	; 99
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	// Pressão Sanguínea
	nokia_lcd_set_cursor(0, 40);
    10de:	68 e2       	ldi	r22, 0x28	; 40
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string(pressao, 1);
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	8a e0       	ldi	r24, 0x0A	; 10
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45, 40);
    10f0:	68 e2       	ldi	r22, 0x28	; 40
    10f2:	8d e2       	ldi	r24, 0x2D	; 45
    10f4:	0e 94 8f 10 	call	0x211e	; 0x211e <nokia_lcd_set_cursor>
	nokia_lcd_write_string("mmHg", 1);
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	86 e6       	ldi	r24, 0x66	; 102
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
	
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
    1102:	0e 94 a2 10 	call	0x2144	; 0x2144 <nokia_lcd_render>
}
    1106:	00 00       	nop
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <mydelay>:
// Delay Personalizado
void mydelay(uint32_t tempo)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	2e 97       	sbiw	r28, 0x0e	; 14
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	6b 87       	std	Y+11, r22	; 0x0b
    1124:	7c 87       	std	Y+12, r23	; 0x0c
    1126:	8d 87       	std	Y+13, r24	; 0x0d
    1128:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t *aux;
	aux = &tempo_ms;                 // variável auxiliar apontando para tempo_ms
    112a:	89 e8       	ldi	r24, 0x89	; 137
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	9a 87       	std	Y+10, r25	; 0x0a
    1130:	89 87       	std	Y+9, r24	; 0x09
	uint32_t cont = tempo;           // contador, para a variação de tempo desejada
    1132:	8b 85       	ldd	r24, Y+11	; 0x0b
    1134:	9c 85       	ldd	r25, Y+12	; 0x0c
    1136:	ad 85       	ldd	r26, Y+13	; 0x0d
    1138:	be 85       	ldd	r27, Y+14	; 0x0e
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	ab 83       	std	Y+3, r26	; 0x03
    1140:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
    1142:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <tempo_ms>
    1146:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <tempo_ms+0x1>
    114a:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <tempo_ms+0x2>
    114e:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <tempo_ms+0x3>
    1152:	8d 83       	std	Y+5, r24	; 0x05
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	af 83       	std	Y+7, r26	; 0x07
    1158:	b8 87       	std	Y+8, r27	; 0x08
	
	while(cont > 0) // *aux <= tempo + catch_tempo - alternativa
    115a:	26 c0       	rjmp	.+76     	; 0x11a8 <mydelay+0x9a>
	{
		if (catch_tempo < *aux)
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	fc 01       	movw	r30, r24
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	42 81       	ldd	r20, Z+2	; 0x02
    1168:	53 81       	ldd	r21, Z+3	; 0x03
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	af 81       	ldd	r26, Y+7	; 0x07
    1170:	b8 85       	ldd	r27, Y+8	; 0x08
    1172:	82 17       	cp	r24, r18
    1174:	93 07       	cpc	r25, r19
    1176:	a4 07       	cpc	r26, r20
    1178:	b5 07       	cpc	r27, r21
    117a:	b0 f4       	brcc	.+44     	; 0x11a8 <mydelay+0x9a>
		{
			catch_tempo++;
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	af 81       	ldd	r26, Y+7	; 0x07
    1182:	b8 85       	ldd	r27, Y+8	; 0x08
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	a1 1d       	adc	r26, r1
    1188:	b1 1d       	adc	r27, r1
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	af 83       	std	Y+7, r26	; 0x07
    1190:	b8 87       	std	Y+8, r27	; 0x08
			cont--;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	ab 81       	ldd	r26, Y+3	; 0x03
    1198:	bc 81       	ldd	r27, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	a1 09       	sbc	r26, r1
    119e:	b1 09       	sbc	r27, r1
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	ab 83       	std	Y+3, r26	; 0x03
    11a6:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t *aux;
	aux = &tempo_ms;                 // variável auxiliar apontando para tempo_ms
	uint32_t cont = tempo;           // contador, para a variação de tempo desejada
	uint32_t catch_tempo = tempo_ms; // "capturar" o tempo no instante da inicialização da função
	
	while(cont > 0) // *aux <= tempo + catch_tempo - alternativa
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	ab 81       	ldd	r26, Y+3	; 0x03
    11ae:	bc 81       	ldd	r27, Y+4	; 0x04
    11b0:	89 2b       	or	r24, r25
    11b2:	8a 2b       	or	r24, r26
    11b4:	8b 2b       	or	r24, r27
    11b6:	91 f6       	brne	.-92     	; 0x115c <mydelay+0x4e>
		{
			catch_tempo++;
			cont--;
		}
	}
	if(*aux >= 4294967295) // 2^32 - 1 = 4294967295
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	fc 01       	movw	r30, r24
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	a2 81       	ldd	r26, Z+2	; 0x02
    11c4:	b3 81       	ldd	r27, Z+3	; 0x03
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	af 4f       	sbci	r26, 0xFF	; 255
    11cc:	bf 4f       	sbci	r27, 0xFF	; 255
    11ce:	39 f4       	brne	.+14     	; 0x11de <mydelay+0xd0>
	*aux = 0; // zerando tempo_ms para impedir overflow quando o programa passar muito tempo sendo executado
    11d0:	89 85       	ldd	r24, Y+9	; 0x09
    11d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d4:	fc 01       	movw	r30, r24
    11d6:	10 82       	st	Z, r1
    11d8:	11 82       	std	Z+1, r1	; 0x01
    11da:	12 82       	std	Z+2, r1	; 0x02
    11dc:	13 82       	std	Z+3, r1	; 0x03
}
    11de:	00 00       	nop
    11e0:	2e 96       	adiw	r28, 0x0e	; 14
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <mudacanal>:
// Controle da temperetura corporal e da saturação de O2 no sangue
void mudacanal(void)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	if (ADMUX == 0b01000000)
    11fa:	8c e7       	ldi	r24, 0x7C	; 124
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	80 34       	cpi	r24, 0x40	; 64
    1204:	a9 f5       	brne	.+106    	; 0x1270 <mudacanal+0x7e>
	{
		ADMUX = 0b01000001;       // Tensão interna de ref VCC, canal 1
    1206:	8c e7       	ldi	r24, 0x7C	; 124
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	21 e4       	ldi	r18, 0x41	; 65
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
		DIDR0 = 0b00111101;       // habilita pino PC1 como entrada de ADC1
    1210:	8e e7       	ldi	r24, 0x7E	; 126
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	2d e3       	ldi	r18, 0x3D	; 61
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
		satO2 = ADC*125.0/1023.0; // A fonte, por algum motivo, só toma 5V como valor de referência.
    121a:	88 e7       	ldi	r24, 0x78	; 120
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	fc 01       	movw	r30, r24
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	cc 01       	movw	r24, r24
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	52 e4       	ldi	r21, 0x42	; 66
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 ec       	ldi	r19, 0xC0	; 192
    124e:	4f e7       	ldi	r20, 0x7F	; 127
    1250:	54 e4       	ldi	r21, 0x44	; 68
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <satO2>
    126e:	48 c0       	rjmp	.+144    	; 0x1300 <mudacanal+0x10e>
		//		satO2 = ADC;
	}
	else
	{
		ADMUX   = 0b01000000;
    1270:	8c e7       	ldi	r24, 0x7C	; 124
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	20 e4       	ldi	r18, 0x40	; 64
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
		DIDR0   = 0b00111110;
    127a:	8e e7       	ldi	r24, 0x7E	; 126
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	2e e3       	ldi	r18, 0x3E	; 62
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
		temp_C  = 10.0*((5.0*ADC)/1023.0 + 1.0); // A fonte, por algum motivo, só toma 5V como valor de referência.
    1284:	88 e7       	ldi	r24, 0x78	; 120
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	fc 01       	movw	r30, r24
    128a:	80 81       	ld	r24, Z
    128c:	91 81       	ldd	r25, Z+1	; 0x01
    128e:	cc 01       	movw	r24, r24
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__floatunsisf>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 ea       	ldi	r20, 0xA0	; 160
    12a6:	50 e4       	ldi	r21, 0x40	; 64
    12a8:	bc 01       	movw	r22, r24
    12aa:	cd 01       	movw	r24, r26
    12ac:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 ec       	ldi	r19, 0xC0	; 192
    12b8:	4f e7       	ldi	r20, 0x7F	; 127
    12ba:	54 e4       	ldi	r21, 0x44	; 68
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 c5 10 	call	0x218a	; 0x218a <__addsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_C>
    12f4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_C+0x1>
    12f8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <temp_C+0x2>
    12fc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <temp_C+0x3>
		//		temp_C = ADC;
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
    1300:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp_C>
    1304:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp_C+0x1>
    1308:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <temp_C+0x2>
    130c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <temp_C+0x3>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4c e0       	ldi	r20, 0x0C	; 12
    1316:	52 e4       	ldi	r21, 0x42	; 66
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
    1320:	88 23       	and	r24, r24
    1322:	b4 f0       	brlt	.+44     	; 0x1350 <mudacanal+0x15e>
    1324:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp_C>
    1328:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp_C+0x1>
    132c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <temp_C+0x2>
    1330:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <temp_C+0x3>
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	44 e2       	ldi	r20, 0x24	; 36
    133a:	52 e4       	ldi	r21, 0x42	; 66
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
    1344:	18 16       	cp	r1, r24
    1346:	24 f0       	brlt	.+8      	; 0x1350 <mudacanal+0x15e>
    1348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <satO2>
    134c:	8c 33       	cpi	r24, 0x3C	; 60
    134e:	50 f4       	brcc	.+20     	; 0x1364 <mudacanal+0x172>
	PORTD |= 0b10000000;
    1350:	8b e2       	ldi	r24, 0x2B	; 43
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	2b e2       	ldi	r18, 0x2B	; 43
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	20 68       	ori	r18, 0x80	; 128
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
	PORTD &= 0b01111111;
}
    1362:	33 c0       	rjmp	.+102    	; 0x13ca <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    1364:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp_C>
    1368:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp_C+0x1>
    136c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <temp_C+0x2>
    1370:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <temp_C+0x3>
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4c e0       	ldi	r20, 0x0C	; 12
    137a:	52 e4       	ldi	r21, 0x42	; 66
    137c:	bc 01       	movw	r22, r24
    137e:	cd 01       	movw	r24, r26
    1380:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
    1384:	88 23       	and	r24, r24
    1386:	0c f4       	brge	.+2      	; 0x138a <mudacanal+0x198>
	PORTD &= 0b01111111;
}
    1388:	20 c0       	rjmp	.+64     	; 0x13ca <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    138a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp_C>
    138e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp_C+0x1>
    1392:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <temp_C+0x2>
    1396:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <temp_C+0x3>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	44 e2       	ldi	r20, 0x24	; 36
    13a0:	52 e4       	ldi	r21, 0x42	; 66
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	0c f4       	brge	.+2      	; 0x13b0 <mudacanal+0x1be>
	PORTD &= 0b01111111;
}
    13ae:	0d c0       	rjmp	.+26     	; 0x13ca <mudacanal+0x1d8>
	}

	if (temp_C < 35 || temp_C > 41 || satO2 < 60)
	PORTD |= 0b10000000;
	
	else if (temp_C >= 35 && temp_C <= 41 && satO2 >= 60)
    13b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <satO2>
    13b4:	8c 33       	cpi	r24, 0x3C	; 60
    13b6:	48 f0       	brcs	.+18     	; 0x13ca <mudacanal+0x1d8>
	PORTD &= 0b01111111;
    13b8:	8b e2       	ldi	r24, 0x2B	; 43
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	2b e2       	ldi	r18, 0x2B	; 43
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	2f 77       	andi	r18, 0x7F	; 127
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
}
    13ca:	00 00       	nop
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <USART_Init>:
// Função para inicialização da USART
void USART_Init(unsigned int ubrr)
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <USART_Init+0x6>
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8);          // Ajusta a taxa de transmissão - 8bits >>
    13e0:	85 ec       	ldi	r24, 0xC5	; 197
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	29 81       	ldd	r18, Y+1	; 0x01
    13e6:	3a 81       	ldd	r19, Y+2	; 0x02
    13e8:	23 2f       	mov	r18, r19
    13ea:	33 27       	eor	r19, r19
    13ec:	fc 01       	movw	r30, r24
    13ee:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
    13f0:	84 ec       	ldi	r24, 0xC4	; 196
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	29 81       	ldd	r18, Y+1	; 0x01
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); // Habilita o transmissor e o receptor
    13fa:	81 ec       	ldi	r24, 0xC1	; 193
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	28 e9       	ldi	r18, 0x98	; 152
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);            // Ajusta o formato do frame: 8 bits de dados e 1 de parada
    1404:	82 ec       	ldi	r24, 0xC2	; 194
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	26 e0       	ldi	r18, 0x06	; 6
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
}
    140e:	00 00       	nop
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <USART_Transmit>:
// Função para envio de um frame de 5 a 8bits
void USART_Transmit(unsigned char data)
{
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	1f 92       	push	r1
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A & (1<<UDRE0)));      // Espera a limpeza do registr. de transmissão
    1426:	00 00       	nop
    1428:	80 ec       	ldi	r24, 0xC0	; 192
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	fc 01       	movw	r30, r24
    142e:	80 81       	ld	r24, Z
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	80 72       	andi	r24, 0x20	; 32
    1436:	99 27       	eor	r25, r25
    1438:	89 2b       	or	r24, r25
    143a:	b1 f3       	breq	.-20     	; 0x1428 <USART_Transmit+0xe>
	UDR0 = data;                        // Coloca o dado no registrador e o envia
    143c:	86 ec       	ldi	r24, 0xC6	; 198
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	29 81       	ldd	r18, Y+1	; 0x01
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
}
    1446:	00 00       	nop
    1448:	0f 90       	pop	r0
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <USART_Receive>:
// Função para recepção de um frame de 5 a 8bits
unsigned char USART_Receive(void)
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & (1<<RXC0)));       // Espera o dado ser recebido
    1458:	00 00       	nop
    145a:	80 ec       	ldi	r24, 0xC0	; 192
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	fc 01       	movw	r30, r24
    1460:	80 81       	ld	r24, Z
    1462:	88 23       	and	r24, r24
    1464:	d4 f7       	brge	.-12     	; 0x145a <USART_Receive+0xa>
	return UDR0;                        // Lê o dado recebido e retorna
    1466:	86 ec       	ldi	r24, 0xC6	; 198
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	fc 01       	movw	r30, r24
    146c:	80 81       	ld	r24, Z
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <USART_pressao>:
// Controle da pressão arterial
void USART_pressao(unsigned char recebido)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	1f 92       	push	r1
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t cont; // Contador para o tamanho da palavra
	static unsigned char aux[8];
	if (recebido != ':')
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	8a 33       	cpi	r24, 0x3A	; 58
    1484:	c9 f0       	breq	.+50     	; 0x14b8 <USART_pressao+0x44>
	{
		aux[cont] = recebido;
    1486:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	8d 56       	subi	r24, 0x6D	; 109
    1490:	9e 4f       	sbci	r25, 0xFE	; 254
    1492:	29 81       	ldd	r18, Y+1	; 0x01
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
		USART_Transmit(aux[cont]);
    1498:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	8d 56       	subi	r24, 0x6D	; 109
    14a2:	9e 4f       	sbci	r25, 0xFE	; 254
    14a4:	fc 01       	movw	r30, r24
    14a6:	80 81       	ld	r24, Z
    14a8:	0e 94 0d 0a 	call	0x141a	; 0x141a <USART_Transmit>
		cont++;
    14ac:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <cont.2235>
	{
		cont = 0;
		sprintf(pressao, "ERRO!");
		sprintf(aux, "reset. ");
	}
}
    14b6:	86 c0       	rjmp	.+268    	; 0x15c4 <USART_pressao+0x150>
	{
		aux[cont] = recebido;
		USART_Transmit(aux[cont]);
		cont++;
	}
	else if ((recebido == ':') && (cont == 7))
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	8a 33       	cpi	r24, 0x3A	; 58
    14bc:	21 f5       	brne	.+72     	; 0x1506 <USART_pressao+0x92>
    14be:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    14c2:	87 30       	cpi	r24, 0x07	; 7
    14c4:	01 f5       	brne	.+64     	; 0x1506 <USART_pressao+0x92>
	{
		cont = 0;						 // Tamanho da palavra atingido. Reiniciando palavra
    14c6:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <cont.2235>
		sprintf(pressao, aux);
    14ca:	83 e9       	ldi	r24, 0x93	; 147
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	89 2f       	mov	r24, r25
    14d0:	8f 93       	push	r24
    14d2:	83 e9       	ldi	r24, 0x93	; 147
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	8f 93       	push	r24
    14d8:	8a e0       	ldi	r24, 0x0A	; 10
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	89 2f       	mov	r24, r25
    14de:	8f 93       	push	r24
    14e0:	8a e0       	ldi	r24, 0x0A	; 10
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	8f 93       	push	r24
    14e6:	0e 94 29 13 	call	0x2652	; 0x2652 <sprintf>
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
		sprintf(aux, "reset. ");		 // Resetando o auxiliar para evitar overflow
    14f2:	88 e0       	ldi	r24, 0x08	; 8
    14f4:	eb e6       	ldi	r30, 0x6B	; 107
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	a3 e9       	ldi	r26, 0x93	; 147
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	01 90       	ld	r0, Z+
    14fe:	0d 92       	st	X+, r0
    1500:	8a 95       	dec	r24
    1502:	e1 f7       	brne	.-8      	; 0x14fc <USART_pressao+0x88>
    1504:	5f c0       	rjmp	.+190    	; 0x15c4 <USART_pressao+0x150>
	}
	else if ((recebido == ':') && (cont == 6)) // Caso de a palavra vir no formato HHHxMM, e.g. 150x80
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	8a 33       	cpi	r24, 0x3A	; 58
    150a:	21 f5       	brne	.+72     	; 0x1554 <USART_pressao+0xe0>
    150c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    1510:	86 30       	cpi	r24, 0x06	; 6
    1512:	01 f5       	brne	.+64     	; 0x1554 <USART_pressao+0xe0>
	{
		cont = 0;
    1514:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <cont.2235>
		sprintf(pressao, aux);
    1518:	83 e9       	ldi	r24, 0x93	; 147
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	89 2f       	mov	r24, r25
    151e:	8f 93       	push	r24
    1520:	83 e9       	ldi	r24, 0x93	; 147
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	8f 93       	push	r24
    1526:	8a e0       	ldi	r24, 0x0A	; 10
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	89 2f       	mov	r24, r25
    152c:	8f 93       	push	r24
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	8f 93       	push	r24
    1534:	0e 94 29 13 	call	0x2652	; 0x2652 <sprintf>
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
		sprintf(aux, "reset. ");
    1540:	88 e0       	ldi	r24, 0x08	; 8
    1542:	eb e6       	ldi	r30, 0x6B	; 107
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	a3 e9       	ldi	r26, 0x93	; 147
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	01 90       	ld	r0, Z+
    154c:	0d 92       	st	X+, r0
    154e:	8a 95       	dec	r24
    1550:	e1 f7       	brne	.-8      	; 0x154a <USART_pressao+0xd6>
    1552:	38 c0       	rjmp	.+112    	; 0x15c4 <USART_pressao+0x150>
	}
	else if ((recebido == ':') && (cont > 7))
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	8a 33       	cpi	r24, 0x3A	; 58
    1558:	c9 f4       	brne	.+50     	; 0x158c <USART_pressao+0x118>
    155a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	a8 f0       	brcs	.+42     	; 0x158c <USART_pressao+0x118>
	{
		cont = 0;
    1562:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <cont.2235>
		sprintf(pressao, "ERRO!");
    1566:	86 e0       	ldi	r24, 0x06	; 6
    1568:	e2 e1       	ldi	r30, 0x12	; 18
    156a:	f1 e0       	ldi	r31, 0x01	; 1
    156c:	aa e0       	ldi	r26, 0x0A	; 10
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	01 90       	ld	r0, Z+
    1572:	0d 92       	st	X+, r0
    1574:	8a 95       	dec	r24
    1576:	e1 f7       	brne	.-8      	; 0x1570 <USART_pressao+0xfc>
		sprintf(aux, "reset. ");
    1578:	88 e0       	ldi	r24, 0x08	; 8
    157a:	eb e6       	ldi	r30, 0x6B	; 107
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	a3 e9       	ldi	r26, 0x93	; 147
    1580:	b1 e0       	ldi	r27, 0x01	; 1
    1582:	01 90       	ld	r0, Z+
    1584:	0d 92       	st	X+, r0
    1586:	8a 95       	dec	r24
    1588:	e1 f7       	brne	.-8      	; 0x1582 <USART_pressao+0x10e>
    158a:	1c c0       	rjmp	.+56     	; 0x15c4 <USART_pressao+0x150>
	}
	else if ((recebido == ':') && (cont < 6))
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	8a 33       	cpi	r24, 0x3A	; 58
    1590:	c9 f4       	brne	.+50     	; 0x15c4 <USART_pressao+0x150>
    1592:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <cont.2235>
    1596:	86 30       	cpi	r24, 0x06	; 6
    1598:	a8 f4       	brcc	.+42     	; 0x15c4 <USART_pressao+0x150>
	{
		cont = 0;
    159a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <cont.2235>
		sprintf(pressao, "ERRO!");
    159e:	86 e0       	ldi	r24, 0x06	; 6
    15a0:	e2 e1       	ldi	r30, 0x12	; 18
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	aa e0       	ldi	r26, 0x0A	; 10
    15a6:	b1 e0       	ldi	r27, 0x01	; 1
    15a8:	01 90       	ld	r0, Z+
    15aa:	0d 92       	st	X+, r0
    15ac:	8a 95       	dec	r24
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <USART_pressao+0x134>
		sprintf(aux, "reset. ");
    15b0:	88 e0       	ldi	r24, 0x08	; 8
    15b2:	eb e6       	ldi	r30, 0x6B	; 107
    15b4:	f1 e0       	ldi	r31, 0x01	; 1
    15b6:	a3 e9       	ldi	r26, 0x93	; 147
    15b8:	b1 e0       	ldi	r27, 0x01	; 1
    15ba:	01 90       	ld	r0, Z+
    15bc:	0d 92       	st	X+, r0
    15be:	8a 95       	dec	r24
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <USART_pressao+0x146>
	}
}
    15c2:	00 c0       	rjmp	.+0      	; 0x15c4 <USART_pressao+0x150>
    15c4:	00 00       	nop
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <controlSlaveBVM>:
// Controle do servo  BVM
void controlSlaveBVM(uint8_t *freq)
{
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	a1 97       	sbiw	r28, 0x21	; 33
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	99 a3       	std	Y+33, r25	; 0x21
    15ec:	88 a3       	std	Y+32, r24	; 0x20
	uint16_t posicao[8] = {2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 4000}; // Pelo Teorema de Tales, posição[angulo] = (200*angulo + 36000)/18
    15ee:	80 e1       	ldi	r24, 0x10	; 16
    15f0:	e3 e7       	ldi	r30, 0x73	; 115
    15f2:	f1 e0       	ldi	r31, 0x01	; 1
    15f4:	de 01       	movw	r26, r28
    15f6:	50 96       	adiw	r26, 0x10	; 16
    15f8:	01 90       	ld	r0, Z+
    15fa:	0d 92       	st	X+, r0
    15fc:	8a 95       	dec	r24
    15fe:	e1 f7       	brne	.-8      	; 0x15f8 <controlSlaveBVM+0x2a>
	uint8_t i;
	
	if (vol_O2 == 0)
    1600:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
    1604:	88 23       	and	r24, r24
    1606:	41 f4       	brne	.+16     	; 0x1618 <controlSlaveBVM+0x4a>
	OCR1A = 2000;
    1608:	88 e8       	ldi	r24, 0x88	; 136
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	20 ed       	ldi	r18, 0xD0	; 208
    160e:	37 e0       	ldi	r19, 0x07	; 7
    1610:	fc 01       	movw	r30, r24
    1612:	31 83       	std	Z+1, r19	; 0x01
    1614:	20 83       	st	Z, r18
		{
			OCR1A = posicao[i];
			mydelay(60000.0/((*freq)*16.0)*(8.0/vol_O2));
		}
	}
}
    1616:	6b c1       	rjmp	.+726    	; 0x18ee <controlSlaveBVM+0x320>
	
	if (vol_O2 == 0)
	OCR1A = 2000;
	else
	{
		for (i = 0; i < vol_O2; i++)
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	f4 c0       	rjmp	.+488    	; 0x1804 <controlSlaveBVM+0x236>
		{
			OCR1A = posicao[i]; // Servo BVM
    161c:	88 e8       	ldi	r24, 0x88	; 136
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	29 81       	ldd	r18, Y+1	; 0x01
    1622:	22 2f       	mov	r18, r18
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	ae 01       	movw	r20, r28
    162c:	4f 5f       	subi	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	24 0f       	add	r18, r20
    1632:	35 1f       	adc	r19, r21
    1634:	21 5f       	subi	r18, 0xF1	; 241
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	f9 01       	movw	r30, r18
    163a:	20 81       	ld	r18, Z
    163c:	31 81       	ldd	r19, Z+1	; 0x01
    163e:	fc 01       	movw	r30, r24
    1640:	31 83       	std	Z+1, r19	; 0x01
    1642:	20 83       	st	Z, r18
			mydelay(60000.0/((*freq)*16.0)*(8.0/vol_O2));
    1644:	88 a1       	ldd	r24, Y+32	; 0x20
    1646:	99 a1       	ldd	r25, Y+33	; 0x21
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	09 2e       	mov	r0, r25
    1652:	00 0c       	add	r0, r0
    1654:	aa 0b       	sbc	r26, r26
    1656:	bb 0b       	sbc	r27, r27
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e8       	ldi	r20, 0x80	; 128
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9c 01       	movw	r18, r24
    167a:	ad 01       	movw	r20, r26
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e6       	ldi	r23, 0x60	; 96
    1680:	8a e6       	ldi	r24, 0x6A	; 106
    1682:	97 e4       	ldi	r25, 0x47	; 71
    1684:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	6c 01       	movw	r12, r24
    168e:	7d 01       	movw	r14, r26
    1690:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	09 2e       	mov	r0, r25
    169a:	00 0c       	add	r0, r0
    169c:	aa 0b       	sbc	r26, r26
    169e:	bb 0b       	sbc	r27, r27
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9c 01       	movw	r18, r24
    16ae:	ad 01       	movw	r20, r26
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	91 e4       	ldi	r25, 0x41	; 65
    16b8:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9c 01       	movw	r18, r24
    16c2:	ad 01       	movw	r20, r26
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 87 08 	call	0x110e	; 0x110e <mydelay>
			if (OCR1A == 2000)
    16e4:	88 e8       	ldi	r24, 0x88	; 136
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	fc 01       	movw	r30, r24
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	80 3d       	cpi	r24, 0xD0	; 208
    16f0:	97 40       	sbci	r25, 0x07	; 7
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <controlSlaveBVM+0x128>
    16f4:	84 c0       	rjmp	.+264    	; 0x17fe <controlSlaveBVM+0x230>
			{
				PORTD |= 0b10000000;
    16f6:	8b e2       	ldi	r24, 0x2B	; 43
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	2b e2       	ldi	r18, 0x2B	; 43
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	f9 01       	movw	r30, r18
    1700:	20 81       	ld	r18, Z
    1702:	20 68       	ori	r18, 0x80	; 128
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	aa ef       	ldi	r26, 0xFA	; 250
    170e:	b3 e4       	ldi	r27, 0x43	; 67
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	9b 83       	std	Y+3, r25	; 0x03
    1714:	ac 83       	std	Y+4, r26	; 0x04
    1716:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	4a e7       	ldi	r20, 0x7A	; 122
    171e:	55 e4       	ldi	r21, 0x45	; 69
    1720:	6a 81       	ldd	r22, Y+2	; 0x02
    1722:	7b 81       	ldd	r23, Y+3	; 0x03
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8e 83       	std	Y+6, r24	; 0x06
    1732:	9f 83       	std	Y+7, r25	; 0x07
    1734:	a8 87       	std	Y+8, r26	; 0x08
    1736:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e8       	ldi	r20, 0x80	; 128
    173e:	5f e3       	ldi	r21, 0x3F	; 63
    1740:	6e 81       	ldd	r22, Y+6	; 0x06
    1742:	7f 81       	ldd	r23, Y+7	; 0x07
    1744:	88 85       	ldd	r24, Y+8	; 0x08
    1746:	99 85       	ldd	r25, Y+9	; 0x09
    1748:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <controlSlaveBVM+0x18c>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9b 87       	std	Y+11, r25	; 0x0b
    1756:	8a 87       	std	Y+10, r24	; 0x0a
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <controlSlaveBVM+0x20a>
	else if (__tmp > 65535)
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	3f ef       	ldi	r19, 0xFF	; 255
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	57 e4       	ldi	r21, 0x47	; 71
    1762:	6e 81       	ldd	r22, Y+6	; 0x06
    1764:	7f 81       	ldd	r23, Y+7	; 0x07
    1766:	88 85       	ldd	r24, Y+8	; 0x08
    1768:	99 85       	ldd	r25, Y+9	; 0x09
    176a:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <controlSlaveBVM+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e2       	ldi	r20, 0x20	; 32
    1778:	51 e4       	ldi	r21, 0x41	; 65
    177a:	6a 81       	ldd	r22, Y+2	; 0x02
    177c:	7b 81       	ldd	r23, Y+3	; 0x03
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9b 87       	std	Y+11, r25	; 0x0b
    1798:	8a 87       	std	Y+10, r24	; 0x0a
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <controlSlaveBVM+0x1ec>
    179c:	80 e9       	ldi	r24, 0x90	; 144
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	9d 87       	std	Y+13, r25	; 0x0d
    17a2:	8c 87       	std	Y+12, r24	; 0x0c
    17a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <controlSlaveBVM+0x1da>
    17ac:	9d 87       	std	Y+13, r25	; 0x0d
    17ae:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9b 87       	std	Y+11, r25	; 0x0b
    17b8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    17bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    17be:	89 2b       	or	r24, r25
    17c0:	69 f7       	brne	.-38     	; 0x179c <controlSlaveBVM+0x1ce>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <controlSlaveBVM+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6e 81       	ldd	r22, Y+6	; 0x06
    17c6:	7f 81       	ldd	r23, Y+7	; 0x07
    17c8:	88 85       	ldd	r24, Y+8	; 0x08
    17ca:	99 85       	ldd	r25, Y+9	; 0x09
    17cc:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9b 87       	std	Y+11, r25	; 0x0b
    17d6:	8a 87       	std	Y+10, r24	; 0x0a
    17d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17da:	9b 85       	ldd	r25, Y+11	; 0x0b
    17dc:	9f 87       	std	Y+15, r25	; 0x0f
    17de:	8e 87       	std	Y+14, r24	; 0x0e
    17e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <controlSlaveBVM+0x216>
    17e8:	9f 87       	std	Y+15, r25	; 0x0f
    17ea:	8e 87       	std	Y+14, r24	; 0x0e
				_delay_ms(500);
				PORTD &= 0b01111111;
    17ec:	8b e2       	ldi	r24, 0x2B	; 43
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	2b e2       	ldi	r18, 0x2B	; 43
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	20 81       	ld	r18, Z
    17f8:	2f 77       	andi	r18, 0x7F	; 127
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
	
	if (vol_O2 == 0)
	OCR1A = 2000;
	else
	{
		for (i = 0; i < vol_O2; i++)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
    1808:	99 81       	ldd	r25, Y+1	; 0x01
    180a:	98 17       	cp	r25, r24
    180c:	08 f4       	brcc	.+2      	; 0x1810 <controlSlaveBVM+0x242>
    180e:	06 cf       	rjmp	.-500    	; 0x161c <controlSlaveBVM+0x4e>
				PORTD |= 0b10000000;
				_delay_ms(500);
				PORTD &= 0b01111111;
			}
		}
		for (i = vol_O2; i > 0; i--)
    1810:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	67 c0       	rjmp	.+206    	; 0x18e6 <controlSlaveBVM+0x318>
		{
			OCR1A = posicao[i];
    1818:	88 e8       	ldi	r24, 0x88	; 136
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	29 81       	ldd	r18, Y+1	; 0x01
    181e:	22 2f       	mov	r18, r18
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	ae 01       	movw	r20, r28
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	24 0f       	add	r18, r20
    182e:	35 1f       	adc	r19, r21
    1830:	21 5f       	subi	r18, 0xF1	; 241
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	f9 01       	movw	r30, r18
    1836:	20 81       	ld	r18, Z
    1838:	31 81       	ldd	r19, Z+1	; 0x01
    183a:	fc 01       	movw	r30, r24
    183c:	31 83       	std	Z+1, r19	; 0x01
    183e:	20 83       	st	Z, r18
			mydelay(60000.0/((*freq)*16.0)*(8.0/vol_O2));
    1840:	88 a1       	ldd	r24, Y+32	; 0x20
    1842:	99 a1       	ldd	r25, Y+33	; 0x21
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	09 2e       	mov	r0, r25
    184e:	00 0c       	add	r0, r0
    1850:	aa 0b       	sbc	r26, r26
    1852:	bb 0b       	sbc	r27, r27
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	bc 01       	movw	r22, r24
    186a:	cd 01       	movw	r24, r26
    186c:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	9c 01       	movw	r18, r24
    1876:	ad 01       	movw	r20, r26
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e6       	ldi	r23, 0x60	; 96
    187c:	8a e6       	ldi	r24, 0x6A	; 106
    187e:	97 e4       	ldi	r25, 0x47	; 71
    1880:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	6c 01       	movw	r12, r24
    188a:	7d 01       	movw	r14, r26
    188c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <vol_O2>
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	09 2e       	mov	r0, r25
    1896:	00 0c       	add	r0, r0
    1898:	aa 0b       	sbc	r26, r26
    189a:	bb 0b       	sbc	r27, r27
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__floatsisf>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9c 01       	movw	r18, r24
    18aa:	ad 01       	movw	r20, r26
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	91 e4       	ldi	r25, 0x41	; 65
    18b4:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9c 01       	movw	r18, r24
    18be:	ad 01       	movw	r20, r26
    18c0:	c7 01       	movw	r24, r14
    18c2:	b6 01       	movw	r22, r12
    18c4:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 87 08 	call	0x110e	; 0x110e <mydelay>
				PORTD |= 0b10000000;
				_delay_ms(500);
				PORTD &= 0b01111111;
			}
		}
		for (i = vol_O2; i > 0; i--)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	81 50       	subi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	88 23       	and	r24, r24
    18ea:	09 f0       	breq	.+2      	; 0x18ee <controlSlaveBVM+0x320>
    18ec:	95 cf       	rjmp	.-214    	; 0x1818 <controlSlaveBVM+0x24a>
		{
			OCR1A = posicao[i];
			mydelay(60000.0/((*freq)*16.0)*(8.0/vol_O2));
		}
	}
}
    18ee:	00 00       	nop
    18f0:	a1 96       	adiw	r28, 0x21	; 33
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	08 95       	ret

0000190a <controlValve>:
// Controle do servo O2
void controlValve(uint8_t *valve)
{
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	00 d0       	rcall	.+0      	; 0x1910 <controlValve+0x6>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = 20*(*valve) + 2000; // do Teorema de Tales, N = 20*porcentagem + 2000
    1918:	8a e8       	ldi	r24, 0x8A	; 138
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	29 81       	ldd	r18, Y+1	; 0x01
    191e:	3a 81       	ldd	r19, Y+2	; 0x02
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	42 2f       	mov	r20, r18
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	64 e1       	ldi	r22, 0x14	; 20
    192a:	64 9f       	mul	r22, r20
    192c:	90 01       	movw	r18, r0
    192e:	65 9f       	mul	r22, r21
    1930:	30 0d       	add	r19, r0
    1932:	11 24       	eor	r1, r1
    1934:	20 53       	subi	r18, 0x30	; 48
    1936:	38 4f       	sbci	r19, 0xF8	; 248
    1938:	fc 01       	movw	r30, r24
    193a:	31 83       	std	Z+1, r19	; 0x01
    193c:	20 83       	st	Z, r18
    193e:	00 00       	nop
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	00 d0       	rcall	.+0      	; 0x1952 <write+0x8>
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	6a 83       	std	Y+2, r22	; 0x02
    195a:	88 e2       	ldi	r24, 0x28	; 40
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	28 e2       	ldi	r18, 0x28	; 40
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	f9 01       	movw	r30, r18
    1964:	20 81       	ld	r18, Z
    1966:	2f 7b       	andi	r18, 0xBF	; 191
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	88 23       	and	r24, r24
    1970:	51 f0       	breq	.+20     	; 0x1986 <write+0x3c>
    1972:	88 e2       	ldi	r24, 0x28	; 40
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	28 e2       	ldi	r18, 0x28	; 40
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	f9 01       	movw	r30, r18
    197c:	20 81       	ld	r18, Z
    197e:	28 60       	ori	r18, 0x08	; 8
    1980:	fc 01       	movw	r30, r24
    1982:	20 83       	st	Z, r18
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <write+0x4e>
    1986:	88 e2       	ldi	r24, 0x28	; 40
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	28 e2       	ldi	r18, 0x28	; 40
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	27 7f       	andi	r18, 0xF7	; 247
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	3c c0       	rjmp	.+120    	; 0x1a14 <write+0xca>
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	21 2f       	mov	r18, r17
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	47 e0       	ldi	r20, 0x07	; 7
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	ba 01       	movw	r22, r20
    19ac:	62 1b       	sub	r22, r18
    19ae:	73 0b       	sbc	r23, r19
    19b0:	9b 01       	movw	r18, r22
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <write+0x6e>
    19b4:	95 95       	asr	r25
    19b6:	87 95       	ror	r24
    19b8:	2a 95       	dec	r18
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <write+0x6a>
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	99 27       	eor	r25, r25
    19c0:	89 2b       	or	r24, r25
    19c2:	51 f0       	breq	.+20     	; 0x19d8 <write+0x8e>
    19c4:	88 e2       	ldi	r24, 0x28	; 40
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	28 e2       	ldi	r18, 0x28	; 40
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	f9 01       	movw	r30, r18
    19ce:	20 81       	ld	r18, Z
    19d0:	20 61       	ori	r18, 0x10	; 16
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	09 c0       	rjmp	.+18     	; 0x19ea <write+0xa0>
    19d8:	88 e2       	ldi	r24, 0x28	; 40
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	28 e2       	ldi	r18, 0x28	; 40
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	f9 01       	movw	r30, r18
    19e2:	20 81       	ld	r18, Z
    19e4:	2f 7e       	andi	r18, 0xEF	; 239
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18
    19ea:	88 e2       	ldi	r24, 0x28	; 40
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	28 e2       	ldi	r18, 0x28	; 40
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	f9 01       	movw	r30, r18
    19f4:	20 81       	ld	r18, Z
    19f6:	20 62       	ori	r18, 0x20	; 32
    19f8:	fc 01       	movw	r30, r24
    19fa:	20 83       	st	Z, r18
    19fc:	88 e2       	ldi	r24, 0x28	; 40
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	28 e2       	ldi	r18, 0x28	; 40
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	f9 01       	movw	r30, r18
    1a06:	20 81       	ld	r18, Z
    1a08:	2f 7d       	andi	r18, 0xDF	; 223
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	20 83       	st	Z, r18
    1a0e:	81 2f       	mov	r24, r17
    1a10:	11 e0       	ldi	r17, 0x01	; 1
    1a12:	18 0f       	add	r17, r24
    1a14:	18 30       	cpi	r17, 0x08	; 8
    1a16:	10 f2       	brcs	.-124    	; 0x199c <write+0x52>
    1a18:	88 e2       	ldi	r24, 0x28	; 40
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	28 e2       	ldi	r18, 0x28	; 40
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	20 64       	ori	r18, 0x40	; 64
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
    1a2a:	00 00       	nop
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <write_cmd>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	1f 92       	push	r1
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	0e 94 a5 0c 	call	0x194a	; 0x194a <write>
    1a4c:	00 00       	nop
    1a4e:	0f 90       	pop	r0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <write_data>:
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	1f 92       	push	r1
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	0e 94 a5 0c 	call	0x194a	; 0x194a <write>
    1a6a:	00 00       	nop
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <nokia_lcd_init>:
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	6c 97       	sbiw	r28, 0x1c	; 28
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	87 e2       	ldi	r24, 0x27	; 39
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	27 e2       	ldi	r18, 0x27	; 39
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	20 64       	ori	r18, 0x40	; 64
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
    1a9e:	87 e2       	ldi	r24, 0x27	; 39
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	27 e2       	ldi	r18, 0x27	; 39
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	20 81       	ld	r18, Z
    1aaa:	24 60       	ori	r18, 0x04	; 4
    1aac:	fc 01       	movw	r30, r24
    1aae:	20 83       	st	Z, r18
    1ab0:	87 e2       	ldi	r24, 0x27	; 39
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	27 e2       	ldi	r18, 0x27	; 39
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	f9 01       	movw	r30, r18
    1aba:	20 81       	ld	r18, Z
    1abc:	28 60       	ori	r18, 0x08	; 8
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18
    1ac2:	87 e2       	ldi	r24, 0x27	; 39
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	27 e2       	ldi	r18, 0x27	; 39
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	f9 01       	movw	r30, r18
    1acc:	20 81       	ld	r18, Z
    1ace:	20 61       	ori	r18, 0x10	; 16
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18
    1ad4:	87 e2       	ldi	r24, 0x27	; 39
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	27 e2       	ldi	r18, 0x27	; 39
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	f9 01       	movw	r30, r18
    1ade:	20 81       	ld	r18, Z
    1ae0:	20 62       	ori	r18, 0x20	; 32
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	20 83       	st	Z, r18
    1ae6:	88 e2       	ldi	r24, 0x28	; 40
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	28 e2       	ldi	r18, 0x28	; 40
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	f9 01       	movw	r30, r18
    1af0:	20 81       	ld	r18, Z
    1af2:	24 60       	ori	r18, 0x04	; 4
    1af4:	fc 01       	movw	r30, r24
    1af6:	20 83       	st	Z, r18
    1af8:	88 e2       	ldi	r24, 0x28	; 40
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	28 e2       	ldi	r18, 0x28	; 40
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	f9 01       	movw	r30, r18
    1b02:	20 81       	ld	r18, Z
    1b04:	20 64       	ori	r18, 0x40	; 64
    1b06:	fc 01       	movw	r30, r24
    1b08:	20 83       	st	Z, r18
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 e2       	ldi	r26, 0x20	; 32
    1b10:	b1 e4       	ldi	r27, 0x41	; 65
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	ab 83       	std	Y+3, r26	; 0x03
    1b18:	bc 83       	std	Y+4, r27	; 0x04
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	53 e4       	ldi	r21, 0x43	; 67
    1b22:	69 81       	ldd	r22, Y+1	; 0x01
    1b24:	7a 81       	ldd	r23, Y+2	; 0x02
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	ad 8b       	std	Y+21, r26	; 0x15
    1b38:	be 8b       	std	Y+22, r27	; 0x16
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	6b 89       	ldd	r22, Y+19	; 0x13
    1b44:	7c 89       	ldd	r23, Y+20	; 0x14
    1b46:	8d 89       	ldd	r24, Y+21	; 0x15
    1b48:	9e 89       	ldd	r25, Y+22	; 0x16
    1b4a:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <nokia_lcd_init+0xe8>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	98 8f       	std	Y+24, r25	; 0x18
    1b58:	8f 8b       	std	Y+23, r24	; 0x17
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <nokia_lcd_init+0x166>
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	6b 89       	ldd	r22, Y+19	; 0x13
    1b66:	7c 89       	ldd	r23, Y+20	; 0x14
    1b68:	8d 89       	ldd	r24, Y+21	; 0x15
    1b6a:	9e 89       	ldd	r25, Y+22	; 0x16
    1b6c:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <nokia_lcd_init+0x152>
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	69 81       	ldd	r22, Y+1	; 0x01
    1b7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	98 8f       	std	Y+24, r25	; 0x18
    1b9a:	8f 8b       	std	Y+23, r24	; 0x17
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <nokia_lcd_init+0x148>
    1b9e:	89 e1       	ldi	r24, 0x19	; 25
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ba4:	89 8f       	std	Y+25, r24	; 0x19
    1ba6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ba8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <nokia_lcd_init+0x136>
    1bae:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb0:	89 8f       	std	Y+25, r24	; 0x19
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	98 8f       	std	Y+24, r25	; 0x18
    1bba:	8f 8b       	std	Y+23, r24	; 0x17
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	89 2b       	or	r24, r25
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <nokia_lcd_init+0x12a>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <nokia_lcd_init+0x17a>
    1bc6:	6b 89       	ldd	r22, Y+19	; 0x13
    1bc8:	7c 89       	ldd	r23, Y+20	; 0x14
    1bca:	8d 89       	ldd	r24, Y+21	; 0x15
    1bcc:	9e 89       	ldd	r25, Y+22	; 0x16
    1bce:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	98 8f       	std	Y+24, r25	; 0x18
    1bd8:	8f 8b       	std	Y+23, r24	; 0x17
    1bda:	8f 89       	ldd	r24, Y+23	; 0x17
    1bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bde:	9c 8f       	std	Y+28, r25	; 0x1c
    1be0:	8b 8f       	std	Y+27, r24	; 0x1b
    1be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <nokia_lcd_init+0x172>
    1bea:	9c 8f       	std	Y+28, r25	; 0x1c
    1bec:	8b 8f       	std	Y+27, r24	; 0x1b
    1bee:	88 e2       	ldi	r24, 0x28	; 40
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	28 e2       	ldi	r18, 0x28	; 40
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	2b 7f       	andi	r18, 0xFB	; 251
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	ac e8       	ldi	r26, 0x8C	; 140
    1c06:	b2 e4       	ldi	r27, 0x42	; 66
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	af 83       	std	Y+7, r26	; 0x07
    1c0e:	b8 87       	std	Y+8, r27	; 0x08
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	6d 81       	ldd	r22, Y+5	; 0x05
    1c1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	98 85       	ldd	r25, Y+8	; 0x08
    1c20:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	89 87       	std	Y+9, r24	; 0x09
    1c2a:	9a 87       	std	Y+10, r25	; 0x0a
    1c2c:	ab 87       	std	Y+11, r26	; 0x0b
    1c2e:	bc 87       	std	Y+12, r27	; 0x0c
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	69 85       	ldd	r22, Y+9	; 0x09
    1c3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c40:	0e 94 31 11 	call	0x2262	; 0x2262 <__cmpsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <nokia_lcd_init+0x1de>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9e 87       	std	Y+14, r25	; 0x0e
    1c4e:	8d 87       	std	Y+13, r24	; 0x0d
    1c50:	3f c0       	rjmp	.+126    	; 0x1cd0 <nokia_lcd_init+0x25c>
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	69 85       	ldd	r22, Y+9	; 0x09
    1c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c62:	0e 94 89 12 	call	0x2512	; 0x2512 <__gesf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	4c f5       	brge	.+82     	; 0x1cbc <nokia_lcd_init+0x248>
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	6d 81       	ldd	r22, Y+5	; 0x05
    1c74:	7e 81       	ldd	r23, Y+6	; 0x06
    1c76:	8f 81       	ldd	r24, Y+7	; 0x07
    1c78:	98 85       	ldd	r25, Y+8	; 0x08
    1c7a:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9e 87       	std	Y+14, r25	; 0x0e
    1c90:	8d 87       	std	Y+13, r24	; 0x0d
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <nokia_lcd_init+0x23e>
    1c94:	89 e1       	ldi	r24, 0x19	; 25
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	98 8b       	std	Y+16, r25	; 0x10
    1c9a:	8f 87       	std	Y+15, r24	; 0x0f
    1c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9e:	98 89       	ldd	r25, Y+16	; 0x10
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <nokia_lcd_init+0x22c>
    1ca4:	98 8b       	std	Y+16, r25	; 0x10
    1ca6:	8f 87       	std	Y+15, r24	; 0x0f
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	9e 87       	std	Y+14, r25	; 0x0e
    1cb0:	8d 87       	std	Y+13, r24	; 0x0d
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	89 2b       	or	r24, r25
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <nokia_lcd_init+0x220>
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <nokia_lcd_init+0x270>
    1cbc:	69 85       	ldd	r22, Y+9	; 0x09
    1cbe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc4:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 87       	std	Y+14, r25	; 0x0e
    1cce:	8d 87       	std	Y+13, r24	; 0x0d
    1cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd4:	9a 8b       	std	Y+18, r25	; 0x12
    1cd6:	89 8b       	std	Y+17, r24	; 0x11
    1cd8:	89 89       	ldd	r24, Y+17	; 0x11
    1cda:	9a 89       	ldd	r25, Y+18	; 0x12
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <nokia_lcd_init+0x268>
    1ce0:	9a 8b       	std	Y+18, r25	; 0x12
    1ce2:	89 8b       	std	Y+17, r24	; 0x11
    1ce4:	88 e2       	ldi	r24, 0x28	; 40
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	28 e2       	ldi	r18, 0x28	; 40
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	20 81       	ld	r18, Z
    1cf0:	24 60       	ori	r18, 0x04	; 4
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	20 83       	st	Z, r18
    1cf6:	88 e2       	ldi	r24, 0x28	; 40
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	28 e2       	ldi	r18, 0x28	; 40
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	f9 01       	movw	r30, r18
    1d00:	20 81       	ld	r18, Z
    1d02:	2f 7b       	andi	r18, 0xBF	; 191
    1d04:	fc 01       	movw	r30, r24
    1d06:	20 83       	st	Z, r18
    1d08:	81 e2       	ldi	r24, 0x21	; 33
    1d0a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d0e:	83 e1       	ldi	r24, 0x13	; 19
    1d10:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d14:	86 e0       	ldi	r24, 0x06	; 6
    1d16:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d1a:	82 ec       	ldi	r24, 0xC2	; 194
    1d1c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d26:	89 e0       	ldi	r24, 0x09	; 9
    1d28:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d32:	80 e4       	ldi	r24, 0x40	; 64
    1d34:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d38:	00 e0       	ldi	r16, 0x00	; 0
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <nokia_lcd_init+0x2d4>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <write_data>
    1d44:	0f 5f       	subi	r16, 0xFF	; 255
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	08 3f       	cpi	r16, 0xF8	; 248
    1d4a:	f1 e0       	ldi	r31, 0x01	; 1
    1d4c:	1f 07       	cpc	r17, r31
    1d4e:	b8 f3       	brcs	.-18     	; 0x1d3e <nokia_lcd_init+0x2ca>
    1d50:	88 e0       	ldi	r24, 0x08	; 8
    1d52:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d56:	8c e0       	ldi	r24, 0x0C	; 12
    1d58:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d5c:	00 00       	nop
    1d5e:	6c 96       	adiw	r28, 0x1c	; 28
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	08 95       	ret

00001d74 <nokia_lcd_clear>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	80 e8       	ldi	r24, 0x80	; 128
    1d82:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d86:	80 e4       	ldi	r24, 0x40	; 64
    1d88:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
    1d8c:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <nokia_lcd+0x1f8>
    1d90:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <nokia_lcd+0x1f9>
    1d94:	00 e0       	ldi	r16, 0x00	; 0
    1d96:	10 e0       	ldi	r17, 0x00	; 0
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <nokia_lcd_clear+0x34>
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	85 56       	subi	r24, 0x65	; 101
    1d9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1da0:	fc 01       	movw	r30, r24
    1da2:	10 82       	st	Z, r1
    1da4:	0f 5f       	subi	r16, 0xFF	; 255
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	08 3f       	cpi	r16, 0xF8	; 248
    1daa:	f1 e0       	ldi	r31, 0x01	; 1
    1dac:	1f 07       	cpc	r17, r31
    1dae:	a8 f3       	brcs	.-22     	; 0x1d9a <nokia_lcd_clear+0x26>
    1db0:	00 00       	nop
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	1f 91       	pop	r17
    1db8:	0f 91       	pop	r16
    1dba:	08 95       	ret

00001dbc <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <nokia_lcd_set_pixel+0x6>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <nokia_lcd_set_pixel+0x8>
    1dc4:	1f 92       	push	r1
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    1dcc:	6c 83       	std	Y+4, r22	; 0x04
    1dce:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd2:	86 95       	lsr	r24
    1dd4:	86 95       	lsr	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	44 e5       	ldi	r20, 0x54	; 84
    1dde:	48 9f       	mul	r20, r24
    1de0:	90 01       	movw	r18, r0
    1de2:	49 9f       	mul	r20, r25
    1de4:	30 0d       	add	r19, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	88 2f       	mov	r24, r24
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	82 0f       	add	r24, r18
    1df0:	93 1f       	adc	r25, r19
    1df2:	85 56       	subi	r24, 0x65	; 101
    1df4:	9e 4f       	sbci	r25, 0xFE	; 254
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    1dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfc:	88 23       	and	r24, r24
    1dfe:	c9 f0       	breq	.+50     	; 0x1e32 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	fc 01       	movw	r30, r24
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9c 01       	movw	r18, r24
    1e12:	27 70       	andi	r18, 0x07	; 7
    1e14:	33 27       	eor	r19, r19
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <nokia_lcd_set_pixel+0x64>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	2a 95       	dec	r18
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <nokia_lcd_set_pixel+0x60>
    1e24:	84 2b       	or	r24, r20
    1e26:	28 2f       	mov	r18, r24
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    1e30:	19 c0       	rjmp	.+50     	; 0x1e64 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	fc 01       	movw	r30, r24
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 01       	movw	r18, r24
    1e44:	27 70       	andi	r18, 0x07	; 7
    1e46:	33 27       	eor	r19, r19
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <nokia_lcd_set_pixel+0x96>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	2a 95       	dec	r18
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <nokia_lcd_set_pixel+0x92>
    1e56:	80 95       	com	r24
    1e58:	84 23       	and	r24, r20
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	fc 01       	movw	r30, r24
    1e62:	20 83       	st	Z, r18
}
    1e64:	00 00       	nop
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	08 95       	ret

00001e76 <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <nokia_lcd_write_char+0xa>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <nokia_lcd_write_char+0xc>
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	8c 83       	std	Y+4, r24	; 0x04
    1e8a:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	65 c0       	rjmp	.+202    	; 0x1f5a <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	4e c0       	rjmp	.+156    	; 0x1f30 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	20 52       	subi	r18, 0x20	; 32
    1e9e:	31 09       	sbc	r19, r1
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	81 2f       	mov	r24, r17
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__udivmodqi4>
    1eaa:	48 2f       	mov	r20, r24
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	c9 01       	movw	r24, r18
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	82 0f       	add	r24, r18
    1eba:	93 1f       	adc	r25, r19
    1ebc:	84 0f       	add	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	88 59       	subi	r24, 0x98	; 152
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	9a 83       	std	Y+2, r25	; 0x02
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	fc 01       	movw	r30, r24
    1ece:	84 91       	lpm	r24, Z
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eda:	80 2f       	mov	r24, r16
    1edc:	69 2f       	mov	r22, r25
    1ede:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__udivmodqi4>
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a9 01       	movw	r20, r18
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <nokia_lcd_write_char+0x78>
    1eea:	55 95       	asr	r21
    1eec:	47 95       	ror	r20
    1eee:	8a 95       	dec	r24
    1ef0:	e2 f7       	brpl	.-8      	; 0x1eea <nokia_lcd_write_char+0x74>
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	81 70       	andi	r24, 0x01	; 1
    1ef6:	99 27       	eor	r25, r25
    1ef8:	89 2b       	or	r24, r25
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    1efc:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <nokia_lcd+0x1f9>
    1f00:	98 2f       	mov	r25, r24
    1f02:	90 0f       	add	r25, r16
    1f04:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <nokia_lcd+0x1f8>
    1f08:	81 0f       	add	r24, r17
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	69 2f       	mov	r22, r25
    1f0e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nokia_lcd_set_pixel>
    1f12:	0b c0       	rjmp	.+22     	; 0x1f2a <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1f14:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <nokia_lcd+0x1f9>
    1f18:	98 2f       	mov	r25, r24
    1f1a:	90 0f       	add	r25, r16
    1f1c:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <nokia_lcd+0x1f8>
    1f20:	81 0f       	add	r24, r17
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	69 2f       	mov	r22, r25
    1f26:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    1f2a:	80 2f       	mov	r24, r16
    1f2c:	01 e0       	ldi	r16, 0x01	; 1
    1f2e:	08 0f       	add	r16, r24
    1f30:	40 2f       	mov	r20, r16
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	82 1b       	sub	r24, r18
    1f4a:	93 0b       	sbc	r25, r19
    1f4c:	48 17       	cp	r20, r24
    1f4e:	59 07       	cpc	r21, r25
    1f50:	0c f4       	brge	.+2      	; 0x1f54 <nokia_lcd_write_char+0xde>
    1f52:	a0 cf       	rjmp	.-192    	; 0x1e94 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1f54:	81 2f       	mov	r24, r17
    1f56:	11 e0       	ldi	r17, 0x01	; 1
    1f58:	18 0f       	add	r17, r24
    1f5a:	41 2f       	mov	r20, r17
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	82 0f       	add	r24, r18
    1f70:	93 1f       	adc	r25, r19
    1f72:	48 17       	cp	r20, r24
    1f74:	59 07       	cpc	r21, r25
    1f76:	0c f4       	brge	.+2      	; 0x1f7a <nokia_lcd_write_char+0x104>
    1f78:	8b cf       	rjmp	.-234    	; 0x1e90 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1f7a:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <nokia_lcd+0x1f8>
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	89 2f       	mov	r24, r25
    1f82:	88 0f       	add	r24, r24
    1f84:	88 0f       	add	r24, r24
    1f86:	89 0f       	add	r24, r25
    1f88:	82 0f       	add	r24, r18
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    1f90:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <nokia_lcd+0x1f8>
    1f94:	84 35       	cpi	r24, 0x54	; 84
    1f96:	70 f0       	brcs	.+28     	; 0x1fb4 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    1f98:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    1f9c:	20 91 94 03 	lds	r18, 0x0394	; 0x800394 <nokia_lcd+0x1f9>
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	89 2f       	mov	r24, r25
    1fa4:	88 0f       	add	r24, r24
    1fa6:	88 0f       	add	r24, r24
    1fa8:	88 0f       	add	r24, r24
    1faa:	89 1b       	sub	r24, r25
    1fac:	82 0f       	add	r24, r18
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    1fb4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <nokia_lcd+0x1f9>
    1fb8:	80 33       	cpi	r24, 0x30	; 48
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    1fbc:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1fc0:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <nokia_lcd+0x1f9>
	}
}
    1fc4:	00 00       	nop
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret

00001fda <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <nokia_lcd_write_string+0x6>
    1fe0:	1f 92       	push	r1
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1fec:	0c c0       	rjmp	.+24     	; 0x2006 <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	2f 5f       	subi	r18, 0xFF	; 255
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	3a 83       	std	Y+2, r19	; 0x02
    1ffa:	29 83       	std	Y+1, r18	; 0x01
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	80 81       	ld	r24, Z
    2000:	6b 81       	ldd	r22, Y+3	; 0x03
    2002:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	fc 01       	movw	r30, r24
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	71 f7       	brne	.-36     	; 0x1fee <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    2012:	00 00       	nop
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	08 95       	ret

00002020 <nokia_lcd_write_int>:

void nokia_lcd_write_int(int num, uint8_t scale)
{ 
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	6f 83       	std	Y+7, r22	; 0x07
	char aux[4];
	sprintf(aux, "%u", num);
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	8f 93       	push	r24
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	8f 93       	push	r24
    2042:	83 e8       	ldi	r24, 0x83	; 131
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	89 2f       	mov	r24, r25
    2048:	8f 93       	push	r24
    204a:	83 e8       	ldi	r24, 0x83	; 131
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	8f 93       	push	r24
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	9f 93       	push	r25
    2056:	8f 93       	push	r24
    2058:	0e 94 29 13 	call	0x2652	; 0x2652 <sprintf>
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
	nokia_lcd_write_string(aux, scale);	
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	ce 01       	movw	r24, r28
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
}
    2072:	00 00       	nop
    2074:	27 96       	adiw	r28, 0x07	; 7
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	08 95       	ret

00002086 <nokia_lcd_write_float>:
void nokia_lcd_write_float(float num, uint8_t scale)
{
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	2a 97       	sbiw	r28, 0x0a	; 10
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	6e 83       	std	Y+6, r22	; 0x06
    209c:	7f 83       	std	Y+7, r23	; 0x07
    209e:	88 87       	std	Y+8, r24	; 0x08
    20a0:	99 87       	std	Y+9, r25	; 0x09
    20a2:	4a 87       	std	Y+10, r20	; 0x0a
	char aux[5];
	sprintf(aux, "%u", (uint16_t)(num*10));
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	6e 81       	ldd	r22, Y+6	; 0x06
    20ae:	7f 81       	ldd	r23, Y+7	; 0x07
    20b0:	88 85       	ldd	r24, Y+8	; 0x08
    20b2:	99 85       	ldd	r25, Y+9	; 0x09
    20b4:	0e 94 8e 12 	call	0x251c	; 0x251c <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 a8 11 	call	0x2350	; 0x2350 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	29 2f       	mov	r18, r25
    20ca:	2f 93       	push	r18
    20cc:	8f 93       	push	r24
    20ce:	83 e8       	ldi	r24, 0x83	; 131
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	89 2f       	mov	r24, r25
    20d4:	8f 93       	push	r24
    20d6:	83 e8       	ldi	r24, 0x83	; 131
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	8f 93       	push	r24
    20dc:	ce 01       	movw	r24, r28
    20de:	01 96       	adiw	r24, 0x01	; 1
    20e0:	9f 93       	push	r25
    20e2:	8f 93       	push	r24
    20e4:	0e 94 29 13 	call	0x2652	; 0x2652 <sprintf>
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
	aux[4] = aux[3];
    20f4:	8c 81       	ldd	r24, Y+4	; 0x04
    20f6:	8d 83       	std	Y+5, r24	; 0x05
	aux[3] = aux[2];
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	8c 83       	std	Y+4, r24	; 0x04
	aux[2] = '.';
    20fc:	8e e2       	ldi	r24, 0x2E	; 46
    20fe:	8b 83       	std	Y+3, r24	; 0x03
	nokia_lcd_write_string(aux, scale);
    2100:	6a 85       	ldd	r22, Y+10	; 0x0a
    2102:	ce 01       	movw	r24, r28
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <nokia_lcd_write_string>
}
    210a:	00 00       	nop
    210c:	2a 96       	adiw	r28, 0x0a	; 10
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <nokia_lcd_set_cursor>:
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	00 d0       	rcall	.+0      	; 0x2124 <nokia_lcd_set_cursor+0x6>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <nokia_lcd+0x1f9>
}
    2138:	00 00       	nop
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	08 95       	ret

00002144 <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    2150:	80 e8       	ldi	r24, 0x80	; 128
    2152:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>
	write_cmd(0x40);
    2156:	80 e4       	ldi	r24, 0x40	; 64
    2158:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    215c:	00 e0       	ldi	r16, 0x00	; 0
    215e:	10 e0       	ldi	r17, 0x00	; 0
    2160:	09 c0       	rjmp	.+18     	; 0x2174 <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    2162:	c8 01       	movw	r24, r16
    2164:	85 56       	subi	r24, 0x65	; 101
    2166:	9e 4f       	sbci	r25, 0xFE	; 254
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    2170:	0f 5f       	subi	r16, 0xFF	; 255
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	08 3f       	cpi	r16, 0xF8	; 248
    2176:	f1 e0       	ldi	r31, 0x01	; 1
    2178:	1f 07       	cpc	r17, r31
    217a:	98 f3       	brcs	.-26     	; 0x2162 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    217c:	00 00       	nop
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	08 95       	ret

00002188 <__subsf3>:
    2188:	50 58       	subi	r21, 0x80	; 128

0000218a <__addsf3>:
    218a:	bb 27       	eor	r27, r27
    218c:	aa 27       	eor	r26, r26
    218e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3x>
    2192:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_round>
    2196:	0e 94 41 12 	call	0x2482	; 0x2482 <__fp_pscA>
    219a:	38 f0       	brcs	.+14     	; 0x21aa <__addsf3+0x20>
    219c:	0e 94 48 12 	call	0x2490	; 0x2490 <__fp_pscB>
    21a0:	20 f0       	brcs	.+8      	; 0x21aa <__addsf3+0x20>
    21a2:	39 f4       	brne	.+14     	; 0x21b2 <__addsf3+0x28>
    21a4:	9f 3f       	cpi	r25, 0xFF	; 255
    21a6:	19 f4       	brne	.+6      	; 0x21ae <__addsf3+0x24>
    21a8:	26 f4       	brtc	.+8      	; 0x21b2 <__addsf3+0x28>
    21aa:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_nan>
    21ae:	0e f4       	brtc	.+2      	; 0x21b2 <__addsf3+0x28>
    21b0:	e0 95       	com	r30
    21b2:	e7 fb       	bst	r30, 7
    21b4:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__fp_inf>

000021b8 <__addsf3x>:
    21b8:	e9 2f       	mov	r30, r25
    21ba:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fp_split3>
    21be:	58 f3       	brcs	.-42     	; 0x2196 <__addsf3+0xc>
    21c0:	ba 17       	cp	r27, r26
    21c2:	62 07       	cpc	r22, r18
    21c4:	73 07       	cpc	r23, r19
    21c6:	84 07       	cpc	r24, r20
    21c8:	95 07       	cpc	r25, r21
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__addsf3x+0x1c>
    21cc:	79 f4       	brne	.+30     	; 0x21ec <__addsf3x+0x34>
    21ce:	a6 f5       	brtc	.+104    	; 0x2238 <__addsf3x+0x80>
    21d0:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__fp_zero>
    21d4:	0e f4       	brtc	.+2      	; 0x21d8 <__addsf3x+0x20>
    21d6:	e0 95       	com	r30
    21d8:	0b 2e       	mov	r0, r27
    21da:	ba 2f       	mov	r27, r26
    21dc:	a0 2d       	mov	r26, r0
    21de:	0b 01       	movw	r0, r22
    21e0:	b9 01       	movw	r22, r18
    21e2:	90 01       	movw	r18, r0
    21e4:	0c 01       	movw	r0, r24
    21e6:	ca 01       	movw	r24, r20
    21e8:	a0 01       	movw	r20, r0
    21ea:	11 24       	eor	r1, r1
    21ec:	ff 27       	eor	r31, r31
    21ee:	59 1b       	sub	r21, r25
    21f0:	99 f0       	breq	.+38     	; 0x2218 <__addsf3x+0x60>
    21f2:	59 3f       	cpi	r21, 0xF9	; 249
    21f4:	50 f4       	brcc	.+20     	; 0x220a <__addsf3x+0x52>
    21f6:	50 3e       	cpi	r21, 0xE0	; 224
    21f8:	68 f1       	brcs	.+90     	; 0x2254 <__addsf3x+0x9c>
    21fa:	1a 16       	cp	r1, r26
    21fc:	f0 40       	sbci	r31, 0x00	; 0
    21fe:	a2 2f       	mov	r26, r18
    2200:	23 2f       	mov	r18, r19
    2202:	34 2f       	mov	r19, r20
    2204:	44 27       	eor	r20, r20
    2206:	58 5f       	subi	r21, 0xF8	; 248
    2208:	f3 cf       	rjmp	.-26     	; 0x21f0 <__addsf3x+0x38>
    220a:	46 95       	lsr	r20
    220c:	37 95       	ror	r19
    220e:	27 95       	ror	r18
    2210:	a7 95       	ror	r26
    2212:	f0 40       	sbci	r31, 0x00	; 0
    2214:	53 95       	inc	r21
    2216:	c9 f7       	brne	.-14     	; 0x220a <__addsf3x+0x52>
    2218:	7e f4       	brtc	.+30     	; 0x2238 <__addsf3x+0x80>
    221a:	1f 16       	cp	r1, r31
    221c:	ba 0b       	sbc	r27, r26
    221e:	62 0b       	sbc	r22, r18
    2220:	73 0b       	sbc	r23, r19
    2222:	84 0b       	sbc	r24, r20
    2224:	ba f0       	brmi	.+46     	; 0x2254 <__addsf3x+0x9c>
    2226:	91 50       	subi	r25, 0x01	; 1
    2228:	a1 f0       	breq	.+40     	; 0x2252 <__addsf3x+0x9a>
    222a:	ff 0f       	add	r31, r31
    222c:	bb 1f       	adc	r27, r27
    222e:	66 1f       	adc	r22, r22
    2230:	77 1f       	adc	r23, r23
    2232:	88 1f       	adc	r24, r24
    2234:	c2 f7       	brpl	.-16     	; 0x2226 <__addsf3x+0x6e>
    2236:	0e c0       	rjmp	.+28     	; 0x2254 <__addsf3x+0x9c>
    2238:	ba 0f       	add	r27, r26
    223a:	62 1f       	adc	r22, r18
    223c:	73 1f       	adc	r23, r19
    223e:	84 1f       	adc	r24, r20
    2240:	48 f4       	brcc	.+18     	; 0x2254 <__addsf3x+0x9c>
    2242:	87 95       	ror	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	b7 95       	ror	r27
    224a:	f7 95       	ror	r31
    224c:	9e 3f       	cpi	r25, 0xFE	; 254
    224e:	08 f0       	brcs	.+2      	; 0x2252 <__addsf3x+0x9a>
    2250:	b0 cf       	rjmp	.-160    	; 0x21b2 <__addsf3+0x28>
    2252:	93 95       	inc	r25
    2254:	88 0f       	add	r24, r24
    2256:	08 f0       	brcs	.+2      	; 0x225a <__addsf3x+0xa2>
    2258:	99 27       	eor	r25, r25
    225a:	ee 0f       	add	r30, r30
    225c:	97 95       	ror	r25
    225e:	87 95       	ror	r24
    2260:	08 95       	ret

00002262 <__cmpsf2>:
    2262:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_cmp>
    2266:	08 f4       	brcc	.+2      	; 0x226a <__cmpsf2+0x8>
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	08 95       	ret

0000226c <__divsf3>:
    226c:	0e 94 4a 11 	call	0x2294	; 0x2294 <__divsf3x>
    2270:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_round>
    2274:	0e 94 48 12 	call	0x2490	; 0x2490 <__fp_pscB>
    2278:	58 f0       	brcs	.+22     	; 0x2290 <__divsf3+0x24>
    227a:	0e 94 41 12 	call	0x2482	; 0x2482 <__fp_pscA>
    227e:	40 f0       	brcs	.+16     	; 0x2290 <__divsf3+0x24>
    2280:	29 f4       	brne	.+10     	; 0x228c <__divsf3+0x20>
    2282:	5f 3f       	cpi	r21, 0xFF	; 255
    2284:	29 f0       	breq	.+10     	; 0x2290 <__divsf3+0x24>
    2286:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__fp_inf>
    228a:	51 11       	cpse	r21, r1
    228c:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_szero>
    2290:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_nan>

00002294 <__divsf3x>:
    2294:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fp_split3>
    2298:	68 f3       	brcs	.-38     	; 0x2274 <__divsf3+0x8>

0000229a <__divsf3_pse>:
    229a:	99 23       	and	r25, r25
    229c:	b1 f3       	breq	.-20     	; 0x228a <__divsf3+0x1e>
    229e:	55 23       	and	r21, r21
    22a0:	91 f3       	breq	.-28     	; 0x2286 <__divsf3+0x1a>
    22a2:	95 1b       	sub	r25, r21
    22a4:	55 0b       	sbc	r21, r21
    22a6:	bb 27       	eor	r27, r27
    22a8:	aa 27       	eor	r26, r26
    22aa:	62 17       	cp	r22, r18
    22ac:	73 07       	cpc	r23, r19
    22ae:	84 07       	cpc	r24, r20
    22b0:	38 f0       	brcs	.+14     	; 0x22c0 <__divsf3_pse+0x26>
    22b2:	9f 5f       	subi	r25, 0xFF	; 255
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	22 0f       	add	r18, r18
    22b8:	33 1f       	adc	r19, r19
    22ba:	44 1f       	adc	r20, r20
    22bc:	aa 1f       	adc	r26, r26
    22be:	a9 f3       	breq	.-22     	; 0x22aa <__divsf3_pse+0x10>
    22c0:	35 d0       	rcall	.+106    	; 0x232c <__divsf3_pse+0x92>
    22c2:	0e 2e       	mov	r0, r30
    22c4:	3a f0       	brmi	.+14     	; 0x22d4 <__divsf3_pse+0x3a>
    22c6:	e0 e8       	ldi	r30, 0x80	; 128
    22c8:	32 d0       	rcall	.+100    	; 0x232e <__divsf3_pse+0x94>
    22ca:	91 50       	subi	r25, 0x01	; 1
    22cc:	50 40       	sbci	r21, 0x00	; 0
    22ce:	e6 95       	lsr	r30
    22d0:	00 1c       	adc	r0, r0
    22d2:	ca f7       	brpl	.-14     	; 0x22c6 <__divsf3_pse+0x2c>
    22d4:	2b d0       	rcall	.+86     	; 0x232c <__divsf3_pse+0x92>
    22d6:	fe 2f       	mov	r31, r30
    22d8:	29 d0       	rcall	.+82     	; 0x232c <__divsf3_pse+0x92>
    22da:	66 0f       	add	r22, r22
    22dc:	77 1f       	adc	r23, r23
    22de:	88 1f       	adc	r24, r24
    22e0:	bb 1f       	adc	r27, r27
    22e2:	26 17       	cp	r18, r22
    22e4:	37 07       	cpc	r19, r23
    22e6:	48 07       	cpc	r20, r24
    22e8:	ab 07       	cpc	r26, r27
    22ea:	b0 e8       	ldi	r27, 0x80	; 128
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <__divsf3_pse+0x56>
    22ee:	bb 0b       	sbc	r27, r27
    22f0:	80 2d       	mov	r24, r0
    22f2:	bf 01       	movw	r22, r30
    22f4:	ff 27       	eor	r31, r31
    22f6:	93 58       	subi	r25, 0x83	; 131
    22f8:	5f 4f       	sbci	r21, 0xFF	; 255
    22fa:	3a f0       	brmi	.+14     	; 0x230a <__divsf3_pse+0x70>
    22fc:	9e 3f       	cpi	r25, 0xFE	; 254
    22fe:	51 05       	cpc	r21, r1
    2300:	78 f0       	brcs	.+30     	; 0x2320 <__divsf3_pse+0x86>
    2302:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__fp_inf>
    2306:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_szero>
    230a:	5f 3f       	cpi	r21, 0xFF	; 255
    230c:	e4 f3       	brlt	.-8      	; 0x2306 <__divsf3_pse+0x6c>
    230e:	98 3e       	cpi	r25, 0xE8	; 232
    2310:	d4 f3       	brlt	.-12     	; 0x2306 <__divsf3_pse+0x6c>
    2312:	86 95       	lsr	r24
    2314:	77 95       	ror	r23
    2316:	67 95       	ror	r22
    2318:	b7 95       	ror	r27
    231a:	f7 95       	ror	r31
    231c:	9f 5f       	subi	r25, 0xFF	; 255
    231e:	c9 f7       	brne	.-14     	; 0x2312 <__divsf3_pse+0x78>
    2320:	88 0f       	add	r24, r24
    2322:	91 1d       	adc	r25, r1
    2324:	96 95       	lsr	r25
    2326:	87 95       	ror	r24
    2328:	97 f9       	bld	r25, 7
    232a:	08 95       	ret
    232c:	e1 e0       	ldi	r30, 0x01	; 1
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	bb 1f       	adc	r27, r27
    2336:	62 17       	cp	r22, r18
    2338:	73 07       	cpc	r23, r19
    233a:	84 07       	cpc	r24, r20
    233c:	ba 07       	cpc	r27, r26
    233e:	20 f0       	brcs	.+8      	; 0x2348 <__divsf3_pse+0xae>
    2340:	62 1b       	sub	r22, r18
    2342:	73 0b       	sbc	r23, r19
    2344:	84 0b       	sbc	r24, r20
    2346:	ba 0b       	sbc	r27, r26
    2348:	ee 1f       	adc	r30, r30
    234a:	88 f7       	brcc	.-30     	; 0x232e <__divsf3_pse+0x94>
    234c:	e0 95       	com	r30
    234e:	08 95       	ret

00002350 <__fixunssfsi>:
    2350:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__fp_splitA>
    2354:	88 f0       	brcs	.+34     	; 0x2378 <__fixunssfsi+0x28>
    2356:	9f 57       	subi	r25, 0x7F	; 127
    2358:	98 f0       	brcs	.+38     	; 0x2380 <__fixunssfsi+0x30>
    235a:	b9 2f       	mov	r27, r25
    235c:	99 27       	eor	r25, r25
    235e:	b7 51       	subi	r27, 0x17	; 23
    2360:	b0 f0       	brcs	.+44     	; 0x238e <__fixunssfsi+0x3e>
    2362:	e1 f0       	breq	.+56     	; 0x239c <__fixunssfsi+0x4c>
    2364:	66 0f       	add	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	1a f0       	brmi	.+6      	; 0x2374 <__fixunssfsi+0x24>
    236e:	ba 95       	dec	r27
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__fixunssfsi+0x14>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <__fixunssfsi+0x4c>
    2374:	b1 30       	cpi	r27, 0x01	; 1
    2376:	91 f0       	breq	.+36     	; 0x239c <__fixunssfsi+0x4c>
    2378:	0e 94 82 12 	call	0x2504	; 0x2504 <__fp_zero>
    237c:	b1 e0       	ldi	r27, 0x01	; 1
    237e:	08 95       	ret
    2380:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__fp_zero>
    2384:	67 2f       	mov	r22, r23
    2386:	78 2f       	mov	r23, r24
    2388:	88 27       	eor	r24, r24
    238a:	b8 5f       	subi	r27, 0xF8	; 248
    238c:	39 f0       	breq	.+14     	; 0x239c <__fixunssfsi+0x4c>
    238e:	b9 3f       	cpi	r27, 0xF9	; 249
    2390:	cc f3       	brlt	.-14     	; 0x2384 <__fixunssfsi+0x34>
    2392:	86 95       	lsr	r24
    2394:	77 95       	ror	r23
    2396:	67 95       	ror	r22
    2398:	b3 95       	inc	r27
    239a:	d9 f7       	brne	.-10     	; 0x2392 <__fixunssfsi+0x42>
    239c:	3e f4       	brtc	.+14     	; 0x23ac <__fixunssfsi+0x5c>
    239e:	90 95       	com	r25
    23a0:	80 95       	com	r24
    23a2:	70 95       	com	r23
    23a4:	61 95       	neg	r22
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	8f 4f       	sbci	r24, 0xFF	; 255
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	08 95       	ret

000023ae <__floatunsisf>:
    23ae:	e8 94       	clt
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <__floatsisf+0x12>

000023b2 <__floatsisf>:
    23b2:	97 fb       	bst	r25, 7
    23b4:	3e f4       	brtc	.+14     	; 0x23c4 <__floatsisf+0x12>
    23b6:	90 95       	com	r25
    23b8:	80 95       	com	r24
    23ba:	70 95       	com	r23
    23bc:	61 95       	neg	r22
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8f 4f       	sbci	r24, 0xFF	; 255
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	99 23       	and	r25, r25
    23c6:	a9 f0       	breq	.+42     	; 0x23f2 <__floatsisf+0x40>
    23c8:	f9 2f       	mov	r31, r25
    23ca:	96 e9       	ldi	r25, 0x96	; 150
    23cc:	bb 27       	eor	r27, r27
    23ce:	93 95       	inc	r25
    23d0:	f6 95       	lsr	r31
    23d2:	87 95       	ror	r24
    23d4:	77 95       	ror	r23
    23d6:	67 95       	ror	r22
    23d8:	b7 95       	ror	r27
    23da:	f1 11       	cpse	r31, r1
    23dc:	f8 cf       	rjmp	.-16     	; 0x23ce <__floatsisf+0x1c>
    23de:	fa f4       	brpl	.+62     	; 0x241e <__floatsisf+0x6c>
    23e0:	bb 0f       	add	r27, r27
    23e2:	11 f4       	brne	.+4      	; 0x23e8 <__floatsisf+0x36>
    23e4:	60 ff       	sbrs	r22, 0
    23e6:	1b c0       	rjmp	.+54     	; 0x241e <__floatsisf+0x6c>
    23e8:	6f 5f       	subi	r22, 0xFF	; 255
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	8f 4f       	sbci	r24, 0xFF	; 255
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	16 c0       	rjmp	.+44     	; 0x241e <__floatsisf+0x6c>
    23f2:	88 23       	and	r24, r24
    23f4:	11 f0       	breq	.+4      	; 0x23fa <__floatsisf+0x48>
    23f6:	96 e9       	ldi	r25, 0x96	; 150
    23f8:	11 c0       	rjmp	.+34     	; 0x241c <__floatsisf+0x6a>
    23fa:	77 23       	and	r23, r23
    23fc:	21 f0       	breq	.+8      	; 0x2406 <__floatsisf+0x54>
    23fe:	9e e8       	ldi	r25, 0x8E	; 142
    2400:	87 2f       	mov	r24, r23
    2402:	76 2f       	mov	r23, r22
    2404:	05 c0       	rjmp	.+10     	; 0x2410 <__floatsisf+0x5e>
    2406:	66 23       	and	r22, r22
    2408:	71 f0       	breq	.+28     	; 0x2426 <__floatsisf+0x74>
    240a:	96 e8       	ldi	r25, 0x86	; 134
    240c:	86 2f       	mov	r24, r22
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	2a f0       	brmi	.+10     	; 0x241e <__floatsisf+0x6c>
    2414:	9a 95       	dec	r25
    2416:	66 0f       	add	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	88 1f       	adc	r24, r24
    241c:	da f7       	brpl	.-10     	; 0x2414 <__floatsisf+0x62>
    241e:	88 0f       	add	r24, r24
    2420:	96 95       	lsr	r25
    2422:	87 95       	ror	r24
    2424:	97 f9       	bld	r25, 7
    2426:	08 95       	ret

00002428 <__fp_cmp>:
    2428:	99 0f       	add	r25, r25
    242a:	00 08       	sbc	r0, r0
    242c:	55 0f       	add	r21, r21
    242e:	aa 0b       	sbc	r26, r26
    2430:	e0 e8       	ldi	r30, 0x80	; 128
    2432:	fe ef       	ldi	r31, 0xFE	; 254
    2434:	16 16       	cp	r1, r22
    2436:	17 06       	cpc	r1, r23
    2438:	e8 07       	cpc	r30, r24
    243a:	f9 07       	cpc	r31, r25
    243c:	c0 f0       	brcs	.+48     	; 0x246e <__fp_cmp+0x46>
    243e:	12 16       	cp	r1, r18
    2440:	13 06       	cpc	r1, r19
    2442:	e4 07       	cpc	r30, r20
    2444:	f5 07       	cpc	r31, r21
    2446:	98 f0       	brcs	.+38     	; 0x246e <__fp_cmp+0x46>
    2448:	62 1b       	sub	r22, r18
    244a:	73 0b       	sbc	r23, r19
    244c:	84 0b       	sbc	r24, r20
    244e:	95 0b       	sbc	r25, r21
    2450:	39 f4       	brne	.+14     	; 0x2460 <__fp_cmp+0x38>
    2452:	0a 26       	eor	r0, r26
    2454:	61 f0       	breq	.+24     	; 0x246e <__fp_cmp+0x46>
    2456:	23 2b       	or	r18, r19
    2458:	24 2b       	or	r18, r20
    245a:	25 2b       	or	r18, r21
    245c:	21 f4       	brne	.+8      	; 0x2466 <__fp_cmp+0x3e>
    245e:	08 95       	ret
    2460:	0a 26       	eor	r0, r26
    2462:	09 f4       	brne	.+2      	; 0x2466 <__fp_cmp+0x3e>
    2464:	a1 40       	sbci	r26, 0x01	; 1
    2466:	a6 95       	lsr	r26
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	81 1d       	adc	r24, r1
    246c:	81 1d       	adc	r24, r1
    246e:	08 95       	ret

00002470 <__fp_inf>:
    2470:	97 f9       	bld	r25, 7
    2472:	9f 67       	ori	r25, 0x7F	; 127
    2474:	80 e8       	ldi	r24, 0x80	; 128
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	08 95       	ret

0000247c <__fp_nan>:
    247c:	9f ef       	ldi	r25, 0xFF	; 255
    247e:	80 ec       	ldi	r24, 0xC0	; 192
    2480:	08 95       	ret

00002482 <__fp_pscA>:
    2482:	00 24       	eor	r0, r0
    2484:	0a 94       	dec	r0
    2486:	16 16       	cp	r1, r22
    2488:	17 06       	cpc	r1, r23
    248a:	18 06       	cpc	r1, r24
    248c:	09 06       	cpc	r0, r25
    248e:	08 95       	ret

00002490 <__fp_pscB>:
    2490:	00 24       	eor	r0, r0
    2492:	0a 94       	dec	r0
    2494:	12 16       	cp	r1, r18
    2496:	13 06       	cpc	r1, r19
    2498:	14 06       	cpc	r1, r20
    249a:	05 06       	cpc	r0, r21
    249c:	08 95       	ret

0000249e <__fp_round>:
    249e:	09 2e       	mov	r0, r25
    24a0:	03 94       	inc	r0
    24a2:	00 0c       	add	r0, r0
    24a4:	11 f4       	brne	.+4      	; 0x24aa <__fp_round+0xc>
    24a6:	88 23       	and	r24, r24
    24a8:	52 f0       	brmi	.+20     	; 0x24be <__fp_round+0x20>
    24aa:	bb 0f       	add	r27, r27
    24ac:	40 f4       	brcc	.+16     	; 0x24be <__fp_round+0x20>
    24ae:	bf 2b       	or	r27, r31
    24b0:	11 f4       	brne	.+4      	; 0x24b6 <__fp_round+0x18>
    24b2:	60 ff       	sbrs	r22, 0
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <__fp_round+0x20>
    24b6:	6f 5f       	subi	r22, 0xFF	; 255
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	8f 4f       	sbci	r24, 0xFF	; 255
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	08 95       	ret

000024c0 <__fp_split3>:
    24c0:	57 fd       	sbrc	r21, 7
    24c2:	90 58       	subi	r25, 0x80	; 128
    24c4:	44 0f       	add	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	59 f0       	breq	.+22     	; 0x24e0 <__fp_splitA+0x10>
    24ca:	5f 3f       	cpi	r21, 0xFF	; 255
    24cc:	71 f0       	breq	.+28     	; 0x24ea <__fp_splitA+0x1a>
    24ce:	47 95       	ror	r20

000024d0 <__fp_splitA>:
    24d0:	88 0f       	add	r24, r24
    24d2:	97 fb       	bst	r25, 7
    24d4:	99 1f       	adc	r25, r25
    24d6:	61 f0       	breq	.+24     	; 0x24f0 <__fp_splitA+0x20>
    24d8:	9f 3f       	cpi	r25, 0xFF	; 255
    24da:	79 f0       	breq	.+30     	; 0x24fa <__fp_splitA+0x2a>
    24dc:	87 95       	ror	r24
    24de:	08 95       	ret
    24e0:	12 16       	cp	r1, r18
    24e2:	13 06       	cpc	r1, r19
    24e4:	14 06       	cpc	r1, r20
    24e6:	55 1f       	adc	r21, r21
    24e8:	f2 cf       	rjmp	.-28     	; 0x24ce <__fp_split3+0xe>
    24ea:	46 95       	lsr	r20
    24ec:	f1 df       	rcall	.-30     	; 0x24d0 <__fp_splitA>
    24ee:	08 c0       	rjmp	.+16     	; 0x2500 <__fp_splitA+0x30>
    24f0:	16 16       	cp	r1, r22
    24f2:	17 06       	cpc	r1, r23
    24f4:	18 06       	cpc	r1, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	f1 cf       	rjmp	.-30     	; 0x24dc <__fp_splitA+0xc>
    24fa:	86 95       	lsr	r24
    24fc:	71 05       	cpc	r23, r1
    24fe:	61 05       	cpc	r22, r1
    2500:	08 94       	sec
    2502:	08 95       	ret

00002504 <__fp_zero>:
    2504:	e8 94       	clt

00002506 <__fp_szero>:
    2506:	bb 27       	eor	r27, r27
    2508:	66 27       	eor	r22, r22
    250a:	77 27       	eor	r23, r23
    250c:	cb 01       	movw	r24, r22
    250e:	97 f9       	bld	r25, 7
    2510:	08 95       	ret

00002512 <__gesf2>:
    2512:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_cmp>
    2516:	08 f4       	brcc	.+2      	; 0x251a <__gesf2+0x8>
    2518:	8f ef       	ldi	r24, 0xFF	; 255
    251a:	08 95       	ret

0000251c <__mulsf3>:
    251c:	0e 94 a1 12 	call	0x2542	; 0x2542 <__mulsf3x>
    2520:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_round>
    2524:	0e 94 41 12 	call	0x2482	; 0x2482 <__fp_pscA>
    2528:	38 f0       	brcs	.+14     	; 0x2538 <__mulsf3+0x1c>
    252a:	0e 94 48 12 	call	0x2490	; 0x2490 <__fp_pscB>
    252e:	20 f0       	brcs	.+8      	; 0x2538 <__mulsf3+0x1c>
    2530:	95 23       	and	r25, r21
    2532:	11 f0       	breq	.+4      	; 0x2538 <__mulsf3+0x1c>
    2534:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__fp_inf>
    2538:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__fp_nan>
    253c:	11 24       	eor	r1, r1
    253e:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_szero>

00002542 <__mulsf3x>:
    2542:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__fp_split3>
    2546:	70 f3       	brcs	.-36     	; 0x2524 <__mulsf3+0x8>

00002548 <__mulsf3_pse>:
    2548:	95 9f       	mul	r25, r21
    254a:	c1 f3       	breq	.-16     	; 0x253c <__mulsf3+0x20>
    254c:	95 0f       	add	r25, r21
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	55 1f       	adc	r21, r21
    2552:	62 9f       	mul	r22, r18
    2554:	f0 01       	movw	r30, r0
    2556:	72 9f       	mul	r23, r18
    2558:	bb 27       	eor	r27, r27
    255a:	f0 0d       	add	r31, r0
    255c:	b1 1d       	adc	r27, r1
    255e:	63 9f       	mul	r22, r19
    2560:	aa 27       	eor	r26, r26
    2562:	f0 0d       	add	r31, r0
    2564:	b1 1d       	adc	r27, r1
    2566:	aa 1f       	adc	r26, r26
    2568:	64 9f       	mul	r22, r20
    256a:	66 27       	eor	r22, r22
    256c:	b0 0d       	add	r27, r0
    256e:	a1 1d       	adc	r26, r1
    2570:	66 1f       	adc	r22, r22
    2572:	82 9f       	mul	r24, r18
    2574:	22 27       	eor	r18, r18
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	62 1f       	adc	r22, r18
    257c:	73 9f       	mul	r23, r19
    257e:	b0 0d       	add	r27, r0
    2580:	a1 1d       	adc	r26, r1
    2582:	62 1f       	adc	r22, r18
    2584:	83 9f       	mul	r24, r19
    2586:	a0 0d       	add	r26, r0
    2588:	61 1d       	adc	r22, r1
    258a:	22 1f       	adc	r18, r18
    258c:	74 9f       	mul	r23, r20
    258e:	33 27       	eor	r19, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	23 1f       	adc	r18, r19
    2596:	84 9f       	mul	r24, r20
    2598:	60 0d       	add	r22, r0
    259a:	21 1d       	adc	r18, r1
    259c:	82 2f       	mov	r24, r18
    259e:	76 2f       	mov	r23, r22
    25a0:	6a 2f       	mov	r22, r26
    25a2:	11 24       	eor	r1, r1
    25a4:	9f 57       	subi	r25, 0x7F	; 127
    25a6:	50 40       	sbci	r21, 0x00	; 0
    25a8:	9a f0       	brmi	.+38     	; 0x25d0 <__mulsf3_pse+0x88>
    25aa:	f1 f0       	breq	.+60     	; 0x25e8 <__mulsf3_pse+0xa0>
    25ac:	88 23       	and	r24, r24
    25ae:	4a f0       	brmi	.+18     	; 0x25c2 <__mulsf3_pse+0x7a>
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	bb 1f       	adc	r27, r27
    25b6:	66 1f       	adc	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	91 50       	subi	r25, 0x01	; 1
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	a9 f7       	brne	.-22     	; 0x25ac <__mulsf3_pse+0x64>
    25c2:	9e 3f       	cpi	r25, 0xFE	; 254
    25c4:	51 05       	cpc	r21, r1
    25c6:	80 f0       	brcs	.+32     	; 0x25e8 <__mulsf3_pse+0xa0>
    25c8:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__fp_inf>
    25cc:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_szero>
    25d0:	5f 3f       	cpi	r21, 0xFF	; 255
    25d2:	e4 f3       	brlt	.-8      	; 0x25cc <__mulsf3_pse+0x84>
    25d4:	98 3e       	cpi	r25, 0xE8	; 232
    25d6:	d4 f3       	brlt	.-12     	; 0x25cc <__mulsf3_pse+0x84>
    25d8:	86 95       	lsr	r24
    25da:	77 95       	ror	r23
    25dc:	67 95       	ror	r22
    25de:	b7 95       	ror	r27
    25e0:	f7 95       	ror	r31
    25e2:	e7 95       	ror	r30
    25e4:	9f 5f       	subi	r25, 0xFF	; 255
    25e6:	c1 f7       	brne	.-16     	; 0x25d8 <__mulsf3_pse+0x90>
    25e8:	fe 2b       	or	r31, r30
    25ea:	88 0f       	add	r24, r24
    25ec:	91 1d       	adc	r25, r1
    25ee:	96 95       	lsr	r25
    25f0:	87 95       	ror	r24
    25f2:	97 f9       	bld	r25, 7
    25f4:	08 95       	ret

000025f6 <__udivmodqi4>:
    25f6:	99 1b       	sub	r25, r25
    25f8:	79 e0       	ldi	r23, 0x09	; 9
    25fa:	04 c0       	rjmp	.+8      	; 0x2604 <__udivmodqi4_ep>

000025fc <__udivmodqi4_loop>:
    25fc:	99 1f       	adc	r25, r25
    25fe:	96 17       	cp	r25, r22
    2600:	08 f0       	brcs	.+2      	; 0x2604 <__udivmodqi4_ep>
    2602:	96 1b       	sub	r25, r22

00002604 <__udivmodqi4_ep>:
    2604:	88 1f       	adc	r24, r24
    2606:	7a 95       	dec	r23
    2608:	c9 f7       	brne	.-14     	; 0x25fc <__udivmodqi4_loop>
    260a:	80 95       	com	r24
    260c:	08 95       	ret

0000260e <__udivmodsi4>:
    260e:	a1 e2       	ldi	r26, 0x21	; 33
    2610:	1a 2e       	mov	r1, r26
    2612:	aa 1b       	sub	r26, r26
    2614:	bb 1b       	sub	r27, r27
    2616:	fd 01       	movw	r30, r26
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <__udivmodsi4_ep>

0000261a <__udivmodsi4_loop>:
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	ee 1f       	adc	r30, r30
    2620:	ff 1f       	adc	r31, r31
    2622:	a2 17       	cp	r26, r18
    2624:	b3 07       	cpc	r27, r19
    2626:	e4 07       	cpc	r30, r20
    2628:	f5 07       	cpc	r31, r21
    262a:	20 f0       	brcs	.+8      	; 0x2634 <__udivmodsi4_ep>
    262c:	a2 1b       	sub	r26, r18
    262e:	b3 0b       	sbc	r27, r19
    2630:	e4 0b       	sbc	r30, r20
    2632:	f5 0b       	sbc	r31, r21

00002634 <__udivmodsi4_ep>:
    2634:	66 1f       	adc	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	1a 94       	dec	r1
    263e:	69 f7       	brne	.-38     	; 0x261a <__udivmodsi4_loop>
    2640:	60 95       	com	r22
    2642:	70 95       	com	r23
    2644:	80 95       	com	r24
    2646:	90 95       	com	r25
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	bd 01       	movw	r22, r26
    264e:	cf 01       	movw	r24, r30
    2650:	08 95       	ret

00002652 <sprintf>:
    2652:	ae e0       	ldi	r26, 0x0E	; 14
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ef e2       	ldi	r30, 0x2F	; 47
    2658:	f3 e1       	ldi	r31, 0x13	; 19
    265a:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__prologue_saves__+0x1c>
    265e:	0d 89       	ldd	r16, Y+21	; 0x15
    2660:	1e 89       	ldd	r17, Y+22	; 0x16
    2662:	86 e0       	ldi	r24, 0x06	; 6
    2664:	8c 83       	std	Y+4, r24	; 0x04
    2666:	1a 83       	std	Y+2, r17	; 0x02
    2668:	09 83       	std	Y+1, r16	; 0x01
    266a:	8f ef       	ldi	r24, 0xFF	; 255
    266c:	9f e7       	ldi	r25, 0x7F	; 127
    266e:	9e 83       	std	Y+6, r25	; 0x06
    2670:	8d 83       	std	Y+5, r24	; 0x05
    2672:	ae 01       	movw	r20, r28
    2674:	47 5e       	subi	r20, 0xE7	; 231
    2676:	5f 4f       	sbci	r21, 0xFF	; 255
    2678:	6f 89       	ldd	r22, Y+23	; 0x17
    267a:	78 8d       	ldd	r23, Y+24	; 0x18
    267c:	ce 01       	movw	r24, r28
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	0e 94 4b 13 	call	0x2696	; 0x2696 <vfprintf>
    2684:	ef 81       	ldd	r30, Y+7	; 0x07
    2686:	f8 85       	ldd	r31, Y+8	; 0x08
    2688:	e0 0f       	add	r30, r16
    268a:	f1 1f       	adc	r31, r17
    268c:	10 82       	st	Z, r1
    268e:	2e 96       	adiw	r28, 0x0e	; 14
    2690:	e4 e0       	ldi	r30, 0x04	; 4
    2692:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__epilogue_restores__+0x1c>

00002696 <vfprintf>:
    2696:	ab e0       	ldi	r26, 0x0B	; 11
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e1 e5       	ldi	r30, 0x51	; 81
    269c:	f3 e1       	ldi	r31, 0x13	; 19
    269e:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__prologue_saves__>
    26a2:	6c 01       	movw	r12, r24
    26a4:	7b 01       	movw	r14, r22
    26a6:	8a 01       	movw	r16, r20
    26a8:	fc 01       	movw	r30, r24
    26aa:	17 82       	std	Z+7, r1	; 0x07
    26ac:	16 82       	std	Z+6, r1	; 0x06
    26ae:	83 81       	ldd	r24, Z+3	; 0x03
    26b0:	81 ff       	sbrs	r24, 1
    26b2:	cc c1       	rjmp	.+920    	; 0x2a4c <vfprintf+0x3b6>
    26b4:	ce 01       	movw	r24, r28
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	3c 01       	movw	r6, r24
    26ba:	f6 01       	movw	r30, r12
    26bc:	93 81       	ldd	r25, Z+3	; 0x03
    26be:	f7 01       	movw	r30, r14
    26c0:	93 fd       	sbrc	r25, 3
    26c2:	85 91       	lpm	r24, Z+
    26c4:	93 ff       	sbrs	r25, 3
    26c6:	81 91       	ld	r24, Z+
    26c8:	7f 01       	movw	r14, r30
    26ca:	88 23       	and	r24, r24
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <vfprintf+0x3a>
    26ce:	ba c1       	rjmp	.+884    	; 0x2a44 <vfprintf+0x3ae>
    26d0:	85 32       	cpi	r24, 0x25	; 37
    26d2:	39 f4       	brne	.+14     	; 0x26e2 <vfprintf+0x4c>
    26d4:	93 fd       	sbrc	r25, 3
    26d6:	85 91       	lpm	r24, Z+
    26d8:	93 ff       	sbrs	r25, 3
    26da:	81 91       	ld	r24, Z+
    26dc:	7f 01       	movw	r14, r30
    26de:	85 32       	cpi	r24, 0x25	; 37
    26e0:	29 f4       	brne	.+10     	; 0x26ec <vfprintf+0x56>
    26e2:	b6 01       	movw	r22, r12
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    26ea:	e7 cf       	rjmp	.-50     	; 0x26ba <vfprintf+0x24>
    26ec:	91 2c       	mov	r9, r1
    26ee:	21 2c       	mov	r2, r1
    26f0:	31 2c       	mov	r3, r1
    26f2:	ff e1       	ldi	r31, 0x1F	; 31
    26f4:	f3 15       	cp	r31, r3
    26f6:	d8 f0       	brcs	.+54     	; 0x272e <vfprintf+0x98>
    26f8:	8b 32       	cpi	r24, 0x2B	; 43
    26fa:	79 f0       	breq	.+30     	; 0x271a <vfprintf+0x84>
    26fc:	38 f4       	brcc	.+14     	; 0x270c <vfprintf+0x76>
    26fe:	80 32       	cpi	r24, 0x20	; 32
    2700:	79 f0       	breq	.+30     	; 0x2720 <vfprintf+0x8a>
    2702:	83 32       	cpi	r24, 0x23	; 35
    2704:	a1 f4       	brne	.+40     	; 0x272e <vfprintf+0x98>
    2706:	23 2d       	mov	r18, r3
    2708:	20 61       	ori	r18, 0x10	; 16
    270a:	1d c0       	rjmp	.+58     	; 0x2746 <vfprintf+0xb0>
    270c:	8d 32       	cpi	r24, 0x2D	; 45
    270e:	61 f0       	breq	.+24     	; 0x2728 <vfprintf+0x92>
    2710:	80 33       	cpi	r24, 0x30	; 48
    2712:	69 f4       	brne	.+26     	; 0x272e <vfprintf+0x98>
    2714:	23 2d       	mov	r18, r3
    2716:	21 60       	ori	r18, 0x01	; 1
    2718:	16 c0       	rjmp	.+44     	; 0x2746 <vfprintf+0xb0>
    271a:	83 2d       	mov	r24, r3
    271c:	82 60       	ori	r24, 0x02	; 2
    271e:	38 2e       	mov	r3, r24
    2720:	e3 2d       	mov	r30, r3
    2722:	e4 60       	ori	r30, 0x04	; 4
    2724:	3e 2e       	mov	r3, r30
    2726:	2a c0       	rjmp	.+84     	; 0x277c <vfprintf+0xe6>
    2728:	f3 2d       	mov	r31, r3
    272a:	f8 60       	ori	r31, 0x08	; 8
    272c:	1d c0       	rjmp	.+58     	; 0x2768 <vfprintf+0xd2>
    272e:	37 fc       	sbrc	r3, 7
    2730:	2d c0       	rjmp	.+90     	; 0x278c <vfprintf+0xf6>
    2732:	20 ed       	ldi	r18, 0xD0	; 208
    2734:	28 0f       	add	r18, r24
    2736:	2a 30       	cpi	r18, 0x0A	; 10
    2738:	40 f0       	brcs	.+16     	; 0x274a <vfprintf+0xb4>
    273a:	8e 32       	cpi	r24, 0x2E	; 46
    273c:	b9 f4       	brne	.+46     	; 0x276c <vfprintf+0xd6>
    273e:	36 fc       	sbrc	r3, 6
    2740:	81 c1       	rjmp	.+770    	; 0x2a44 <vfprintf+0x3ae>
    2742:	23 2d       	mov	r18, r3
    2744:	20 64       	ori	r18, 0x40	; 64
    2746:	32 2e       	mov	r3, r18
    2748:	19 c0       	rjmp	.+50     	; 0x277c <vfprintf+0xe6>
    274a:	36 fe       	sbrs	r3, 6
    274c:	06 c0       	rjmp	.+12     	; 0x275a <vfprintf+0xc4>
    274e:	8a e0       	ldi	r24, 0x0A	; 10
    2750:	98 9e       	mul	r9, r24
    2752:	20 0d       	add	r18, r0
    2754:	11 24       	eor	r1, r1
    2756:	92 2e       	mov	r9, r18
    2758:	11 c0       	rjmp	.+34     	; 0x277c <vfprintf+0xe6>
    275a:	ea e0       	ldi	r30, 0x0A	; 10
    275c:	2e 9e       	mul	r2, r30
    275e:	20 0d       	add	r18, r0
    2760:	11 24       	eor	r1, r1
    2762:	22 2e       	mov	r2, r18
    2764:	f3 2d       	mov	r31, r3
    2766:	f0 62       	ori	r31, 0x20	; 32
    2768:	3f 2e       	mov	r3, r31
    276a:	08 c0       	rjmp	.+16     	; 0x277c <vfprintf+0xe6>
    276c:	8c 36       	cpi	r24, 0x6C	; 108
    276e:	21 f4       	brne	.+8      	; 0x2778 <vfprintf+0xe2>
    2770:	83 2d       	mov	r24, r3
    2772:	80 68       	ori	r24, 0x80	; 128
    2774:	38 2e       	mov	r3, r24
    2776:	02 c0       	rjmp	.+4      	; 0x277c <vfprintf+0xe6>
    2778:	88 36       	cpi	r24, 0x68	; 104
    277a:	41 f4       	brne	.+16     	; 0x278c <vfprintf+0xf6>
    277c:	f7 01       	movw	r30, r14
    277e:	93 fd       	sbrc	r25, 3
    2780:	85 91       	lpm	r24, Z+
    2782:	93 ff       	sbrs	r25, 3
    2784:	81 91       	ld	r24, Z+
    2786:	7f 01       	movw	r14, r30
    2788:	81 11       	cpse	r24, r1
    278a:	b3 cf       	rjmp	.-154    	; 0x26f2 <vfprintf+0x5c>
    278c:	98 2f       	mov	r25, r24
    278e:	9f 7d       	andi	r25, 0xDF	; 223
    2790:	95 54       	subi	r25, 0x45	; 69
    2792:	93 30       	cpi	r25, 0x03	; 3
    2794:	28 f4       	brcc	.+10     	; 0x27a0 <vfprintf+0x10a>
    2796:	0c 5f       	subi	r16, 0xFC	; 252
    2798:	1f 4f       	sbci	r17, 0xFF	; 255
    279a:	9f e3       	ldi	r25, 0x3F	; 63
    279c:	99 83       	std	Y+1, r25	; 0x01
    279e:	0d c0       	rjmp	.+26     	; 0x27ba <vfprintf+0x124>
    27a0:	83 36       	cpi	r24, 0x63	; 99
    27a2:	31 f0       	breq	.+12     	; 0x27b0 <vfprintf+0x11a>
    27a4:	83 37       	cpi	r24, 0x73	; 115
    27a6:	71 f0       	breq	.+28     	; 0x27c4 <vfprintf+0x12e>
    27a8:	83 35       	cpi	r24, 0x53	; 83
    27aa:	09 f0       	breq	.+2      	; 0x27ae <vfprintf+0x118>
    27ac:	59 c0       	rjmp	.+178    	; 0x2860 <vfprintf+0x1ca>
    27ae:	21 c0       	rjmp	.+66     	; 0x27f2 <vfprintf+0x15c>
    27b0:	f8 01       	movw	r30, r16
    27b2:	80 81       	ld	r24, Z
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	0e 5f       	subi	r16, 0xFE	; 254
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	88 24       	eor	r8, r8
    27bc:	83 94       	inc	r8
    27be:	91 2c       	mov	r9, r1
    27c0:	53 01       	movw	r10, r6
    27c2:	13 c0       	rjmp	.+38     	; 0x27ea <vfprintf+0x154>
    27c4:	28 01       	movw	r4, r16
    27c6:	f2 e0       	ldi	r31, 0x02	; 2
    27c8:	4f 0e       	add	r4, r31
    27ca:	51 1c       	adc	r5, r1
    27cc:	f8 01       	movw	r30, r16
    27ce:	a0 80       	ld	r10, Z
    27d0:	b1 80       	ldd	r11, Z+1	; 0x01
    27d2:	36 fe       	sbrs	r3, 6
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <vfprintf+0x146>
    27d6:	69 2d       	mov	r22, r9
    27d8:	70 e0       	ldi	r23, 0x00	; 0
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <vfprintf+0x14a>
    27dc:	6f ef       	ldi	r22, 0xFF	; 255
    27de:	7f ef       	ldi	r23, 0xFF	; 255
    27e0:	c5 01       	movw	r24, r10
    27e2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strnlen>
    27e6:	4c 01       	movw	r8, r24
    27e8:	82 01       	movw	r16, r4
    27ea:	f3 2d       	mov	r31, r3
    27ec:	ff 77       	andi	r31, 0x7F	; 127
    27ee:	3f 2e       	mov	r3, r31
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <vfprintf+0x188>
    27f2:	28 01       	movw	r4, r16
    27f4:	22 e0       	ldi	r18, 0x02	; 2
    27f6:	42 0e       	add	r4, r18
    27f8:	51 1c       	adc	r5, r1
    27fa:	f8 01       	movw	r30, r16
    27fc:	a0 80       	ld	r10, Z
    27fe:	b1 80       	ldd	r11, Z+1	; 0x01
    2800:	36 fe       	sbrs	r3, 6
    2802:	03 c0       	rjmp	.+6      	; 0x280a <vfprintf+0x174>
    2804:	69 2d       	mov	r22, r9
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	02 c0       	rjmp	.+4      	; 0x280e <vfprintf+0x178>
    280a:	6f ef       	ldi	r22, 0xFF	; 255
    280c:	7f ef       	ldi	r23, 0xFF	; 255
    280e:	c5 01       	movw	r24, r10
    2810:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <strnlen_P>
    2814:	4c 01       	movw	r8, r24
    2816:	f3 2d       	mov	r31, r3
    2818:	f0 68       	ori	r31, 0x80	; 128
    281a:	3f 2e       	mov	r3, r31
    281c:	82 01       	movw	r16, r4
    281e:	33 fc       	sbrc	r3, 3
    2820:	1b c0       	rjmp	.+54     	; 0x2858 <vfprintf+0x1c2>
    2822:	82 2d       	mov	r24, r2
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	88 16       	cp	r8, r24
    2828:	99 06       	cpc	r9, r25
    282a:	b0 f4       	brcc	.+44     	; 0x2858 <vfprintf+0x1c2>
    282c:	b6 01       	movw	r22, r12
    282e:	80 e2       	ldi	r24, 0x20	; 32
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2836:	2a 94       	dec	r2
    2838:	f4 cf       	rjmp	.-24     	; 0x2822 <vfprintf+0x18c>
    283a:	f5 01       	movw	r30, r10
    283c:	37 fc       	sbrc	r3, 7
    283e:	85 91       	lpm	r24, Z+
    2840:	37 fe       	sbrs	r3, 7
    2842:	81 91       	ld	r24, Z+
    2844:	5f 01       	movw	r10, r30
    2846:	b6 01       	movw	r22, r12
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    284e:	21 10       	cpse	r2, r1
    2850:	2a 94       	dec	r2
    2852:	21 e0       	ldi	r18, 0x01	; 1
    2854:	82 1a       	sub	r8, r18
    2856:	91 08       	sbc	r9, r1
    2858:	81 14       	cp	r8, r1
    285a:	91 04       	cpc	r9, r1
    285c:	71 f7       	brne	.-36     	; 0x283a <vfprintf+0x1a4>
    285e:	e8 c0       	rjmp	.+464    	; 0x2a30 <vfprintf+0x39a>
    2860:	84 36       	cpi	r24, 0x64	; 100
    2862:	11 f0       	breq	.+4      	; 0x2868 <vfprintf+0x1d2>
    2864:	89 36       	cpi	r24, 0x69	; 105
    2866:	41 f5       	brne	.+80     	; 0x28b8 <vfprintf+0x222>
    2868:	f8 01       	movw	r30, r16
    286a:	37 fe       	sbrs	r3, 7
    286c:	07 c0       	rjmp	.+14     	; 0x287c <vfprintf+0x1e6>
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	0c 5f       	subi	r16, 0xFC	; 252
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	08 c0       	rjmp	.+16     	; 0x288c <vfprintf+0x1f6>
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	07 2e       	mov	r0, r23
    2882:	00 0c       	add	r0, r0
    2884:	88 0b       	sbc	r24, r24
    2886:	99 0b       	sbc	r25, r25
    2888:	0e 5f       	subi	r16, 0xFE	; 254
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	f3 2d       	mov	r31, r3
    288e:	ff 76       	andi	r31, 0x6F	; 111
    2890:	3f 2e       	mov	r3, r31
    2892:	97 ff       	sbrs	r25, 7
    2894:	09 c0       	rjmp	.+18     	; 0x28a8 <vfprintf+0x212>
    2896:	90 95       	com	r25
    2898:	80 95       	com	r24
    289a:	70 95       	com	r23
    289c:	61 95       	neg	r22
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	8f 4f       	sbci	r24, 0xFF	; 255
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	f0 68       	ori	r31, 0x80	; 128
    28a6:	3f 2e       	mov	r3, r31
    28a8:	2a e0       	ldi	r18, 0x0A	; 10
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	a3 01       	movw	r20, r6
    28ae:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__ultoa_invert>
    28b2:	88 2e       	mov	r8, r24
    28b4:	86 18       	sub	r8, r6
    28b6:	45 c0       	rjmp	.+138    	; 0x2942 <vfprintf+0x2ac>
    28b8:	85 37       	cpi	r24, 0x75	; 117
    28ba:	31 f4       	brne	.+12     	; 0x28c8 <vfprintf+0x232>
    28bc:	23 2d       	mov	r18, r3
    28be:	2f 7e       	andi	r18, 0xEF	; 239
    28c0:	b2 2e       	mov	r11, r18
    28c2:	2a e0       	ldi	r18, 0x0A	; 10
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	25 c0       	rjmp	.+74     	; 0x2912 <vfprintf+0x27c>
    28c8:	93 2d       	mov	r25, r3
    28ca:	99 7f       	andi	r25, 0xF9	; 249
    28cc:	b9 2e       	mov	r11, r25
    28ce:	8f 36       	cpi	r24, 0x6F	; 111
    28d0:	c1 f0       	breq	.+48     	; 0x2902 <vfprintf+0x26c>
    28d2:	18 f4       	brcc	.+6      	; 0x28da <vfprintf+0x244>
    28d4:	88 35       	cpi	r24, 0x58	; 88
    28d6:	79 f0       	breq	.+30     	; 0x28f6 <vfprintf+0x260>
    28d8:	b5 c0       	rjmp	.+362    	; 0x2a44 <vfprintf+0x3ae>
    28da:	80 37       	cpi	r24, 0x70	; 112
    28dc:	19 f0       	breq	.+6      	; 0x28e4 <vfprintf+0x24e>
    28de:	88 37       	cpi	r24, 0x78	; 120
    28e0:	21 f0       	breq	.+8      	; 0x28ea <vfprintf+0x254>
    28e2:	b0 c0       	rjmp	.+352    	; 0x2a44 <vfprintf+0x3ae>
    28e4:	e9 2f       	mov	r30, r25
    28e6:	e0 61       	ori	r30, 0x10	; 16
    28e8:	be 2e       	mov	r11, r30
    28ea:	b4 fe       	sbrs	r11, 4
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <vfprintf+0x272>
    28ee:	fb 2d       	mov	r31, r11
    28f0:	f4 60       	ori	r31, 0x04	; 4
    28f2:	bf 2e       	mov	r11, r31
    28f4:	09 c0       	rjmp	.+18     	; 0x2908 <vfprintf+0x272>
    28f6:	34 fe       	sbrs	r3, 4
    28f8:	0a c0       	rjmp	.+20     	; 0x290e <vfprintf+0x278>
    28fa:	29 2f       	mov	r18, r25
    28fc:	26 60       	ori	r18, 0x06	; 6
    28fe:	b2 2e       	mov	r11, r18
    2900:	06 c0       	rjmp	.+12     	; 0x290e <vfprintf+0x278>
    2902:	28 e0       	ldi	r18, 0x08	; 8
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <vfprintf+0x27c>
    2908:	20 e1       	ldi	r18, 0x10	; 16
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <vfprintf+0x27c>
    290e:	20 e1       	ldi	r18, 0x10	; 16
    2910:	32 e0       	ldi	r19, 0x02	; 2
    2912:	f8 01       	movw	r30, r16
    2914:	b7 fe       	sbrs	r11, 7
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <vfprintf+0x290>
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	0c 5f       	subi	r16, 0xFC	; 252
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	06 c0       	rjmp	.+12     	; 0x2932 <vfprintf+0x29c>
    2926:	60 81       	ld	r22, Z
    2928:	71 81       	ldd	r23, Z+1	; 0x01
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	0e 5f       	subi	r16, 0xFE	; 254
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	a3 01       	movw	r20, r6
    2934:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__ultoa_invert>
    2938:	88 2e       	mov	r8, r24
    293a:	86 18       	sub	r8, r6
    293c:	fb 2d       	mov	r31, r11
    293e:	ff 77       	andi	r31, 0x7F	; 127
    2940:	3f 2e       	mov	r3, r31
    2942:	36 fe       	sbrs	r3, 6
    2944:	0d c0       	rjmp	.+26     	; 0x2960 <vfprintf+0x2ca>
    2946:	23 2d       	mov	r18, r3
    2948:	2e 7f       	andi	r18, 0xFE	; 254
    294a:	a2 2e       	mov	r10, r18
    294c:	89 14       	cp	r8, r9
    294e:	58 f4       	brcc	.+22     	; 0x2966 <vfprintf+0x2d0>
    2950:	34 fe       	sbrs	r3, 4
    2952:	0b c0       	rjmp	.+22     	; 0x296a <vfprintf+0x2d4>
    2954:	32 fc       	sbrc	r3, 2
    2956:	09 c0       	rjmp	.+18     	; 0x296a <vfprintf+0x2d4>
    2958:	83 2d       	mov	r24, r3
    295a:	8e 7e       	andi	r24, 0xEE	; 238
    295c:	a8 2e       	mov	r10, r24
    295e:	05 c0       	rjmp	.+10     	; 0x296a <vfprintf+0x2d4>
    2960:	b8 2c       	mov	r11, r8
    2962:	a3 2c       	mov	r10, r3
    2964:	03 c0       	rjmp	.+6      	; 0x296c <vfprintf+0x2d6>
    2966:	b8 2c       	mov	r11, r8
    2968:	01 c0       	rjmp	.+2      	; 0x296c <vfprintf+0x2d6>
    296a:	b9 2c       	mov	r11, r9
    296c:	a4 fe       	sbrs	r10, 4
    296e:	0f c0       	rjmp	.+30     	; 0x298e <vfprintf+0x2f8>
    2970:	fe 01       	movw	r30, r28
    2972:	e8 0d       	add	r30, r8
    2974:	f1 1d       	adc	r31, r1
    2976:	80 81       	ld	r24, Z
    2978:	80 33       	cpi	r24, 0x30	; 48
    297a:	21 f4       	brne	.+8      	; 0x2984 <vfprintf+0x2ee>
    297c:	9a 2d       	mov	r25, r10
    297e:	99 7e       	andi	r25, 0xE9	; 233
    2980:	a9 2e       	mov	r10, r25
    2982:	09 c0       	rjmp	.+18     	; 0x2996 <vfprintf+0x300>
    2984:	a2 fe       	sbrs	r10, 2
    2986:	06 c0       	rjmp	.+12     	; 0x2994 <vfprintf+0x2fe>
    2988:	b3 94       	inc	r11
    298a:	b3 94       	inc	r11
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <vfprintf+0x300>
    298e:	8a 2d       	mov	r24, r10
    2990:	86 78       	andi	r24, 0x86	; 134
    2992:	09 f0       	breq	.+2      	; 0x2996 <vfprintf+0x300>
    2994:	b3 94       	inc	r11
    2996:	a3 fc       	sbrc	r10, 3
    2998:	11 c0       	rjmp	.+34     	; 0x29bc <vfprintf+0x326>
    299a:	a0 fe       	sbrs	r10, 0
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <vfprintf+0x314>
    299e:	b2 14       	cp	r11, r2
    29a0:	88 f4       	brcc	.+34     	; 0x29c4 <vfprintf+0x32e>
    29a2:	28 0c       	add	r2, r8
    29a4:	92 2c       	mov	r9, r2
    29a6:	9b 18       	sub	r9, r11
    29a8:	0e c0       	rjmp	.+28     	; 0x29c6 <vfprintf+0x330>
    29aa:	b2 14       	cp	r11, r2
    29ac:	60 f4       	brcc	.+24     	; 0x29c6 <vfprintf+0x330>
    29ae:	b6 01       	movw	r22, r12
    29b0:	80 e2       	ldi	r24, 0x20	; 32
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    29b8:	b3 94       	inc	r11
    29ba:	f7 cf       	rjmp	.-18     	; 0x29aa <vfprintf+0x314>
    29bc:	b2 14       	cp	r11, r2
    29be:	18 f4       	brcc	.+6      	; 0x29c6 <vfprintf+0x330>
    29c0:	2b 18       	sub	r2, r11
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <vfprintf+0x332>
    29c4:	98 2c       	mov	r9, r8
    29c6:	21 2c       	mov	r2, r1
    29c8:	a4 fe       	sbrs	r10, 4
    29ca:	10 c0       	rjmp	.+32     	; 0x29ec <vfprintf+0x356>
    29cc:	b6 01       	movw	r22, r12
    29ce:	80 e3       	ldi	r24, 0x30	; 48
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    29d6:	a2 fe       	sbrs	r10, 2
    29d8:	17 c0       	rjmp	.+46     	; 0x2a08 <vfprintf+0x372>
    29da:	a1 fc       	sbrc	r10, 1
    29dc:	03 c0       	rjmp	.+6      	; 0x29e4 <vfprintf+0x34e>
    29de:	88 e7       	ldi	r24, 0x78	; 120
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <vfprintf+0x352>
    29e4:	88 e5       	ldi	r24, 0x58	; 88
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	b6 01       	movw	r22, r12
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <vfprintf+0x36e>
    29ec:	8a 2d       	mov	r24, r10
    29ee:	86 78       	andi	r24, 0x86	; 134
    29f0:	59 f0       	breq	.+22     	; 0x2a08 <vfprintf+0x372>
    29f2:	a1 fe       	sbrs	r10, 1
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <vfprintf+0x364>
    29f6:	8b e2       	ldi	r24, 0x2B	; 43
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <vfprintf+0x366>
    29fa:	80 e2       	ldi	r24, 0x20	; 32
    29fc:	a7 fc       	sbrc	r10, 7
    29fe:	8d e2       	ldi	r24, 0x2D	; 45
    2a00:	b6 01       	movw	r22, r12
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2a08:	89 14       	cp	r8, r9
    2a0a:	38 f4       	brcc	.+14     	; 0x2a1a <vfprintf+0x384>
    2a0c:	b6 01       	movw	r22, r12
    2a0e:	80 e3       	ldi	r24, 0x30	; 48
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2a16:	9a 94       	dec	r9
    2a18:	f7 cf       	rjmp	.-18     	; 0x2a08 <vfprintf+0x372>
    2a1a:	8a 94       	dec	r8
    2a1c:	f3 01       	movw	r30, r6
    2a1e:	e8 0d       	add	r30, r8
    2a20:	f1 1d       	adc	r31, r1
    2a22:	80 81       	ld	r24, Z
    2a24:	b6 01       	movw	r22, r12
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2a2c:	81 10       	cpse	r8, r1
    2a2e:	f5 cf       	rjmp	.-22     	; 0x2a1a <vfprintf+0x384>
    2a30:	22 20       	and	r2, r2
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <vfprintf+0x3a0>
    2a34:	42 ce       	rjmp	.-892    	; 0x26ba <vfprintf+0x24>
    2a36:	b6 01       	movw	r22, r12
    2a38:	80 e2       	ldi	r24, 0x20	; 32
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2a40:	2a 94       	dec	r2
    2a42:	f6 cf       	rjmp	.-20     	; 0x2a30 <vfprintf+0x39a>
    2a44:	f6 01       	movw	r30, r12
    2a46:	86 81       	ldd	r24, Z+6	; 0x06
    2a48:	97 81       	ldd	r25, Z+7	; 0x07
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0x3ba>
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	9f ef       	ldi	r25, 0xFF	; 255
    2a50:	2b 96       	adiw	r28, 0x0b	; 11
    2a52:	e2 e1       	ldi	r30, 0x12	; 18
    2a54:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__epilogue_restores__>

00002a58 <strnlen_P>:
    2a58:	fc 01       	movw	r30, r24
    2a5a:	05 90       	lpm	r0, Z+
    2a5c:	61 50       	subi	r22, 0x01	; 1
    2a5e:	70 40       	sbci	r23, 0x00	; 0
    2a60:	01 10       	cpse	r0, r1
    2a62:	d8 f7       	brcc	.-10     	; 0x2a5a <strnlen_P+0x2>
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	8e 0f       	add	r24, r30
    2a6a:	9f 1f       	adc	r25, r31
    2a6c:	08 95       	ret

00002a6e <strnlen>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	61 50       	subi	r22, 0x01	; 1
    2a72:	70 40       	sbci	r23, 0x00	; 0
    2a74:	01 90       	ld	r0, Z+
    2a76:	01 10       	cpse	r0, r1
    2a78:	d8 f7       	brcc	.-10     	; 0x2a70 <strnlen+0x2>
    2a7a:	80 95       	com	r24
    2a7c:	90 95       	com	r25
    2a7e:	8e 0f       	add	r24, r30
    2a80:	9f 1f       	adc	r25, r31
    2a82:	08 95       	ret

00002a84 <fputc>:
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	fb 01       	movw	r30, r22
    2a8e:	23 81       	ldd	r18, Z+3	; 0x03
    2a90:	21 fd       	sbrc	r18, 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <fputc+0x16>
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	2c c0       	rjmp	.+88     	; 0x2af2 <fputc+0x6e>
    2a9a:	22 ff       	sbrs	r18, 2
    2a9c:	16 c0       	rjmp	.+44     	; 0x2aca <fputc+0x46>
    2a9e:	46 81       	ldd	r20, Z+6	; 0x06
    2aa0:	57 81       	ldd	r21, Z+7	; 0x07
    2aa2:	24 81       	ldd	r18, Z+4	; 0x04
    2aa4:	35 81       	ldd	r19, Z+5	; 0x05
    2aa6:	42 17       	cp	r20, r18
    2aa8:	53 07       	cpc	r21, r19
    2aaa:	44 f4       	brge	.+16     	; 0x2abc <fputc+0x38>
    2aac:	a0 81       	ld	r26, Z
    2aae:	b1 81       	ldd	r27, Z+1	; 0x01
    2ab0:	9d 01       	movw	r18, r26
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	31 83       	std	Z+1, r19	; 0x01
    2ab8:	20 83       	st	Z, r18
    2aba:	8c 93       	st	X, r24
    2abc:	26 81       	ldd	r18, Z+6	; 0x06
    2abe:	37 81       	ldd	r19, Z+7	; 0x07
    2ac0:	2f 5f       	subi	r18, 0xFF	; 255
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	37 83       	std	Z+7, r19	; 0x07
    2ac6:	26 83       	std	Z+6, r18	; 0x06
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <fputc+0x6e>
    2aca:	8b 01       	movw	r16, r22
    2acc:	ec 01       	movw	r28, r24
    2ace:	fb 01       	movw	r30, r22
    2ad0:	00 84       	ldd	r0, Z+8	; 0x08
    2ad2:	f1 85       	ldd	r31, Z+9	; 0x09
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	09 95       	icall
    2ad8:	89 2b       	or	r24, r25
    2ada:	e1 f6       	brne	.-72     	; 0x2a94 <fputc+0x10>
    2adc:	d8 01       	movw	r26, r16
    2ade:	16 96       	adiw	r26, 0x06	; 6
    2ae0:	8d 91       	ld	r24, X+
    2ae2:	9c 91       	ld	r25, X
    2ae4:	17 97       	sbiw	r26, 0x07	; 7
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	17 96       	adiw	r26, 0x07	; 7
    2aea:	9c 93       	st	X, r25
    2aec:	8e 93       	st	-X, r24
    2aee:	16 97       	sbiw	r26, 0x06	; 6
    2af0:	ce 01       	movw	r24, r28
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	08 95       	ret

00002afc <__ultoa_invert>:
    2afc:	fa 01       	movw	r30, r20
    2afe:	aa 27       	eor	r26, r26
    2b00:	28 30       	cpi	r18, 0x08	; 8
    2b02:	51 f1       	breq	.+84     	; 0x2b58 <__ultoa_invert+0x5c>
    2b04:	20 31       	cpi	r18, 0x10	; 16
    2b06:	81 f1       	breq	.+96     	; 0x2b68 <__ultoa_invert+0x6c>
    2b08:	e8 94       	clt
    2b0a:	6f 93       	push	r22
    2b0c:	6e 7f       	andi	r22, 0xFE	; 254
    2b0e:	6e 5f       	subi	r22, 0xFE	; 254
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	8f 4f       	sbci	r24, 0xFF	; 255
    2b14:	9f 4f       	sbci	r25, 0xFF	; 255
    2b16:	af 4f       	sbci	r26, 0xFF	; 255
    2b18:	b1 e0       	ldi	r27, 0x01	; 1
    2b1a:	3e d0       	rcall	.+124    	; 0x2b98 <__ultoa_invert+0x9c>
    2b1c:	b4 e0       	ldi	r27, 0x04	; 4
    2b1e:	3c d0       	rcall	.+120    	; 0x2b98 <__ultoa_invert+0x9c>
    2b20:	67 0f       	add	r22, r23
    2b22:	78 1f       	adc	r23, r24
    2b24:	89 1f       	adc	r24, r25
    2b26:	9a 1f       	adc	r25, r26
    2b28:	a1 1d       	adc	r26, r1
    2b2a:	68 0f       	add	r22, r24
    2b2c:	79 1f       	adc	r23, r25
    2b2e:	8a 1f       	adc	r24, r26
    2b30:	91 1d       	adc	r25, r1
    2b32:	a1 1d       	adc	r26, r1
    2b34:	6a 0f       	add	r22, r26
    2b36:	71 1d       	adc	r23, r1
    2b38:	81 1d       	adc	r24, r1
    2b3a:	91 1d       	adc	r25, r1
    2b3c:	a1 1d       	adc	r26, r1
    2b3e:	20 d0       	rcall	.+64     	; 0x2b80 <__ultoa_invert+0x84>
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <__ultoa_invert+0x48>
    2b42:	68 94       	set
    2b44:	3f 91       	pop	r19
    2b46:	2a e0       	ldi	r18, 0x0A	; 10
    2b48:	26 9f       	mul	r18, r22
    2b4a:	11 24       	eor	r1, r1
    2b4c:	30 19       	sub	r19, r0
    2b4e:	30 5d       	subi	r19, 0xD0	; 208
    2b50:	31 93       	st	Z+, r19
    2b52:	de f6       	brtc	.-74     	; 0x2b0a <__ultoa_invert+0xe>
    2b54:	cf 01       	movw	r24, r30
    2b56:	08 95       	ret
    2b58:	46 2f       	mov	r20, r22
    2b5a:	47 70       	andi	r20, 0x07	; 7
    2b5c:	40 5d       	subi	r20, 0xD0	; 208
    2b5e:	41 93       	st	Z+, r20
    2b60:	b3 e0       	ldi	r27, 0x03	; 3
    2b62:	0f d0       	rcall	.+30     	; 0x2b82 <__ultoa_invert+0x86>
    2b64:	c9 f7       	brne	.-14     	; 0x2b58 <__ultoa_invert+0x5c>
    2b66:	f6 cf       	rjmp	.-20     	; 0x2b54 <__ultoa_invert+0x58>
    2b68:	46 2f       	mov	r20, r22
    2b6a:	4f 70       	andi	r20, 0x0F	; 15
    2b6c:	40 5d       	subi	r20, 0xD0	; 208
    2b6e:	4a 33       	cpi	r20, 0x3A	; 58
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <__ultoa_invert+0x7c>
    2b72:	49 5d       	subi	r20, 0xD9	; 217
    2b74:	31 fd       	sbrc	r19, 1
    2b76:	40 52       	subi	r20, 0x20	; 32
    2b78:	41 93       	st	Z+, r20
    2b7a:	02 d0       	rcall	.+4      	; 0x2b80 <__ultoa_invert+0x84>
    2b7c:	a9 f7       	brne	.-22     	; 0x2b68 <__ultoa_invert+0x6c>
    2b7e:	ea cf       	rjmp	.-44     	; 0x2b54 <__ultoa_invert+0x58>
    2b80:	b4 e0       	ldi	r27, 0x04	; 4
    2b82:	a6 95       	lsr	r26
    2b84:	97 95       	ror	r25
    2b86:	87 95       	ror	r24
    2b88:	77 95       	ror	r23
    2b8a:	67 95       	ror	r22
    2b8c:	ba 95       	dec	r27
    2b8e:	c9 f7       	brne	.-14     	; 0x2b82 <__ultoa_invert+0x86>
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	61 05       	cpc	r22, r1
    2b94:	71 05       	cpc	r23, r1
    2b96:	08 95       	ret
    2b98:	9b 01       	movw	r18, r22
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	0a 2e       	mov	r0, r26
    2b9e:	06 94       	lsr	r0
    2ba0:	57 95       	ror	r21
    2ba2:	47 95       	ror	r20
    2ba4:	37 95       	ror	r19
    2ba6:	27 95       	ror	r18
    2ba8:	ba 95       	dec	r27
    2baa:	c9 f7       	brne	.-14     	; 0x2b9e <__ultoa_invert+0xa2>
    2bac:	62 0f       	add	r22, r18
    2bae:	73 1f       	adc	r23, r19
    2bb0:	84 1f       	adc	r24, r20
    2bb2:	95 1f       	adc	r25, r21
    2bb4:	a0 1d       	adc	r26, r0
    2bb6:	08 95       	ret

00002bb8 <__prologue_saves__>:
    2bb8:	2f 92       	push	r2
    2bba:	3f 92       	push	r3
    2bbc:	4f 92       	push	r4
    2bbe:	5f 92       	push	r5
    2bc0:	6f 92       	push	r6
    2bc2:	7f 92       	push	r7
    2bc4:	8f 92       	push	r8
    2bc6:	9f 92       	push	r9
    2bc8:	af 92       	push	r10
    2bca:	bf 92       	push	r11
    2bcc:	cf 92       	push	r12
    2bce:	df 92       	push	r13
    2bd0:	ef 92       	push	r14
    2bd2:	ff 92       	push	r15
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	ca 1b       	sub	r28, r26
    2be2:	db 0b       	sbc	r29, r27
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	09 94       	ijmp

00002bf0 <__epilogue_restores__>:
    2bf0:	2a 88       	ldd	r2, Y+18	; 0x12
    2bf2:	39 88       	ldd	r3, Y+17	; 0x11
    2bf4:	48 88       	ldd	r4, Y+16	; 0x10
    2bf6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bfa:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bfc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bfe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c00:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c02:	b9 84       	ldd	r11, Y+9	; 0x09
    2c04:	c8 84       	ldd	r12, Y+8	; 0x08
    2c06:	df 80       	ldd	r13, Y+7	; 0x07
    2c08:	ee 80       	ldd	r14, Y+6	; 0x06
    2c0a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c0c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c0e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c10:	aa 81       	ldd	r26, Y+2	; 0x02
    2c12:	b9 81       	ldd	r27, Y+1	; 0x01
    2c14:	ce 0f       	add	r28, r30
    2c16:	d1 1d       	adc	r29, r1
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	ed 01       	movw	r28, r26
    2c24:	08 95       	ret

00002c26 <_exit>:
    2c26:	f8 94       	cli

00002c28 <__stop_program>:
    2c28:	ff cf       	rjmp	.-2      	; 0x2c28 <__stop_program>
