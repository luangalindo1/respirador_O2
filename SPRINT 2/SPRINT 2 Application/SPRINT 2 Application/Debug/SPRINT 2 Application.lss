
SPRINT 2 Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b72  00000c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000c0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086b  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000736  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007178  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011f  00000000  00000000  00009550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000966f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002a7e  00000000  00000000  00009697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  68:	b3 02       	muls	r27, r19
  6a:	b8 02       	muls	r27, r24
  6c:	be 02       	muls	r27, r30
  6e:	c4 02       	muls	r28, r20
  70:	ca 02       	muls	r28, r26
  72:	d0 02       	muls	r29, r16
  74:	d6 02       	muls	r29, r22
  76:	dc 02       	muls	r29, r28
  78:	e2 02       	muls	r30, r18
  7a:	e8 02       	muls	r30, r24
  7c:	ee 02       	muls	r30, r30
  7e:	f4 02       	muls	r31, r20
  80:	fa 02       	muls	r31, r26
  82:	00 03       	mulsu	r16, r16
  84:	06 03       	mulsu	r16, r22
  86:	0c 03       	fmul	r16, r20
  88:	12 03       	mulsu	r17, r18
  8a:	18 03       	fmul	r17, r16
  8c:	1e 03       	fmul	r17, r22
  8e:	24 03       	mulsu	r18, r20
  90:	2a 03       	fmul	r18, r18
  92:	30 03       	mulsu	r19, r16
  94:	36 03       	mulsu	r19, r22
  96:	3c 03       	fmul	r19, r20
  98:	42 03       	mulsu	r20, r18
  9a:	48 03       	fmul	r20, r16
  9c:	4e 03       	fmul	r20, r22
  9e:	54 03       	mulsu	r21, r20
  a0:	5a 03       	fmul	r21, r18
  a2:	60 03       	mulsu	r22, r16
  a4:	66 03       	mulsu	r22, r22

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e2 e7       	ldi	r30, 0x72	; 114
  ba:	fb e0       	ldi	r31, 0x0B	; 11
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	a4 e0       	ldi	r26, 0x04	; 4
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a8 30       	cpi	r26, 0x08	; 8
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  dc:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <time>:
  e4:	fc 01       	movw	r30, r24
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
  ee:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
  f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
  f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	30 97       	sbiw	r30, 0x00	; 0
  fe:	21 f0       	breq	.+8      	; 0x108 <time+0x24>
 100:	60 83       	st	Z, r22
 102:	71 83       	std	Z+1, r23	; 0x01
 104:	82 83       	std	Z+2, r24	; 0x02
 106:	93 83       	std	Z+3, r25	; 0x03
 108:	08 95       	ret

0000010a <main>:
void controlLED (uint8_t *);
void showResp (uint8_t *);
void controlFreq (uint8_t **);

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	1f 92       	push	r1
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	//DDRD &= 0b00000; // PD0..4 = ENTRADA
	//PORTD |= 0b11111; // Habilita os resistores de pull-up das portas PD0..4
	//DDRC |= 0b1111111; // PC0..6 = SAÍDA
	//DDRB |= 0b11111111; // PB0..7 = SAÍDA
	srand(time(NULL)); // Garantindo a aleatoriedade a cada execução
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <time>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	0e 94 8a 05 	call	0xb14	; 0xb14 <srand>
	uint8_t FreqRespiracao = 5 + rand() % 25; // Definir um valor aleatório inicial
 124:	0e 94 85 05 	call	0xb0a	; 0xb0a <rand>
 128:	29 e1       	ldi	r18, 0x19	; 25
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	0e 94 ca 04 	call	0x994	; 0x994 <__divmodhi4>
 132:	8b 5f       	subi	r24, 0xFB	; 251
 134:	89 83       	std	Y+1, r24	; 0x01
	
while        
 (1) 
    {
		showResp(&FreqRespiracao);
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	0e 94 8a 02 	call	0x514	; 0x514 <showResp>
		controlLED(&FreqRespiracao);			
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 06 01 	call	0x20c	; 0x20c <controlLED>
    }
 146:	f7 cf       	rjmp	.-18     	; 0x136 <main+0x2c>

00000148 <controlFreq>:
}

void controlFreq(uint8_t **freq)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <controlFreq+0x6>
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= 0b00000; // PD0..4 = ENTRADA
 156:	8a e2       	ldi	r24, 0x2A	; 42
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	8a e2       	ldi	r24, 0x2A	; 42
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	10 82       	st	Z, r1
	PORTD |= 0b11111; // Habilita os resistores de pull-up das portas PD0..4
 166:	8b e2       	ldi	r24, 0x2B	; 43
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	2b e2       	ldi	r18, 0x2B	; 43
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	2f 61       	ori	r18, 0x1F	; 31
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	
	if (!(PIND & (1<<0))) // Retorna 1 se PD0 == 1, e 0 cc
 178:	89 e2       	ldi	r24, 0x29	; 41
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	81 70       	andi	r24, 0x01	; 1
 186:	99 27       	eor	r25, r25
 188:	89 2b       	or	r24, r25
 18a:	c1 f4       	brne	.+48     	; 0x1bc <controlFreq+0x74>
	{	
		if (**freq < 30)
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	9a 81       	ldd	r25, Y+2	; 0x02
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	8e 31       	cpi	r24, 0x1E	; 30
 19c:	78 f4       	brcc	.+30     	; 0x1bc <controlFreq+0x74>
			**freq = **freq + 1;
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	9a 81       	ldd	r25, Y+2	; 0x02
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	3a 81       	ldd	r19, Y+2	; 0x02
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	31 81       	ldd	r19, Z+1	; 0x01
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	}
	if (!(PIND & (1<<1))) // Retorna 1 se PD1 == 1, e 0 cc
 1bc:	89 e2       	ldi	r24, 0x29	; 41
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	82 70       	andi	r24, 0x02	; 2
 1ca:	99 27       	eor	r25, r25
 1cc:	89 2b       	or	r24, r25
 1ce:	c1 f4       	brne	.+48     	; 0x200 <controlFreq+0xb8>
	{	
		if (**freq > 5)
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	fc 01       	movw	r30, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	86 30       	cpi	r24, 0x06	; 6
 1e0:	78 f0       	brcs	.+30     	; 0x200 <controlFreq+0xb8>
			**freq = **freq - 1;
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	91 81       	ldd	r25, Z+1	; 0x01
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	3a 81       	ldd	r19, Y+2	; 0x02
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	31 81       	ldd	r19, Z+1	; 0x01
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	}
}
 200:	00 00       	nop
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <controlLED>:
void controlLED (uint8_t *freq)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	a2 97       	sbiw	r28, 0x22	; 34
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	9a a3       	std	Y+34, r25	; 0x22
 222:	89 a3       	std	Y+33, r24	; 0x21
	DDRB |= 0b11111111; // PB0..7 = SAÍDA
 224:	84 e2       	ldi	r24, 0x24	; 36
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	84 e2       	ldi	r24, 0x24	; 36
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2f ef       	ldi	r18, 0xFF	; 255
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
	
	for (int i = 0; i <= 7; i++)
 236:	1a 82       	std	Y+2, r1	; 0x02
 238:	19 82       	std	Y+1, r1	; 0x01
 23a:	a9 c0       	rjmp	.+338    	; 0x38e <controlLED+0x182>
	{
		controlFreq(&freq);
 23c:	ce 01       	movw	r24, r28
 23e:	81 96       	adiw	r24, 0x21	; 33
 240:	0e 94 a4 00 	call	0x148	; 0x148 <controlFreq>
		PORTB |= 1<<i;
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	25 e2       	ldi	r18, 0x25	; 37
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	20 81       	ld	r18, Z
 250:	42 2f       	mov	r20, r18
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	09 80       	ldd	r0, Y+1	; 0x01
 258:	02 c0       	rjmp	.+4      	; 0x25e <controlLED+0x52>
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <controlLED+0x4e>
 262:	24 2b       	or	r18, r20
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
		_delay_ms(60000/((*freq)*16));
 268:	89 a1       	ldd	r24, Y+33	; 0x21
 26a:	9a a1       	ldd	r25, Y+34	; 0x22
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	82 95       	swap	r24
 276:	92 95       	swap	r25
 278:	90 7f       	andi	r25, 0xF0	; 240
 27a:	98 27       	eor	r25, r24
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	98 27       	eor	r25, r24
 280:	9c 01       	movw	r18, r24
 282:	99 0f       	add	r25, r25
 284:	44 0b       	sbc	r20, r20
 286:	55 0b       	sbc	r21, r21
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	9a ee       	ldi	r25, 0xEA	; 234
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	bc 01       	movw	r22, r24
 292:	cd 01       	movw	r24, r26
 294:	0e 94 de 04 	call	0x9bc	; 0x9bc <__divmodsi4>
 298:	da 01       	movw	r26, r20
 29a:	c9 01       	movw	r24, r18
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	0e 94 a8 03 	call	0x750	; 0x750 <__floatsisf>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	89 87       	std	Y+9, r24	; 0x09
 2aa:	9a 87       	std	Y+10, r25	; 0x0a
 2ac:	ab 87       	std	Y+11, r26	; 0x0b
 2ae:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	4a e7       	ldi	r20, 0x7A	; 122
 2b6:	55 e4       	ldi	r21, 0x45	; 69
 2b8:	69 85       	ldd	r22, Y+9	; 0x09
 2ba:	7a 85       	ldd	r23, Y+10	; 0x0a
 2bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 2be:	9c 85       	ldd	r25, Y+12	; 0x0c
 2c0:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 2c4:	dc 01       	movw	r26, r24
 2c6:	cb 01       	movw	r24, r22
 2c8:	8d 87       	std	Y+13, r24	; 0x0d
 2ca:	9e 87       	std	Y+14, r25	; 0x0e
 2cc:	af 87       	std	Y+15, r26	; 0x0f
 2ce:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e8       	ldi	r20, 0x80	; 128
 2d6:	5f e3       	ldi	r21, 0x3F	; 63
 2d8:	6d 85       	ldd	r22, Y+13	; 0x0d
 2da:	7e 85       	ldd	r23, Y+14	; 0x0e
 2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2de:	98 89       	ldd	r25, Y+16	; 0x10
 2e0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__cmpsf2>
 2e4:	88 23       	and	r24, r24
 2e6:	2c f4       	brge	.+10     	; 0x2f2 <controlLED+0xe6>
		__ticks = 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	9a 8b       	std	Y+18, r25	; 0x12
 2ee:	89 8b       	std	Y+17, r24	; 0x11
 2f0:	3f c0       	rjmp	.+126    	; 0x370 <controlLED+0x164>
	else if (__tmp > 65535)
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	3f ef       	ldi	r19, 0xFF	; 255
 2f6:	4f e7       	ldi	r20, 0x7F	; 127
 2f8:	57 e4       	ldi	r21, 0x47	; 71
 2fa:	6d 85       	ldd	r22, Y+13	; 0x0d
 2fc:	7e 85       	ldd	r23, Y+14	; 0x0e
 2fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 300:	98 89       	ldd	r25, Y+16	; 0x10
 302:	0e 94 30 04 	call	0x860	; 0x860 <__gesf2>
 306:	18 16       	cp	r1, r24
 308:	4c f5       	brge	.+82     	; 0x35c <controlLED+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	40 e2       	ldi	r20, 0x20	; 32
 310:	51 e4       	ldi	r21, 0x41	; 65
 312:	69 85       	ldd	r22, Y+9	; 0x09
 314:	7a 85       	ldd	r23, Y+10	; 0x0a
 316:	8b 85       	ldd	r24, Y+11	; 0x0b
 318:	9c 85       	ldd	r25, Y+12	; 0x0c
 31a:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 31e:	dc 01       	movw	r26, r24
 320:	cb 01       	movw	r24, r22
 322:	bc 01       	movw	r22, r24
 324:	cd 01       	movw	r24, r26
 326:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 32a:	dc 01       	movw	r26, r24
 32c:	cb 01       	movw	r24, r22
 32e:	9a 8b       	std	Y+18, r25	; 0x12
 330:	89 8b       	std	Y+17, r24	; 0x11
 332:	0f c0       	rjmp	.+30     	; 0x352 <controlLED+0x146>
 334:	80 e9       	ldi	r24, 0x90	; 144
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	9c 8b       	std	Y+20, r25	; 0x14
 33a:	8b 8b       	std	Y+19, r24	; 0x13
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33c:	8b 89       	ldd	r24, Y+19	; 0x13
 33e:	9c 89       	ldd	r25, Y+20	; 0x14
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <controlLED+0x134>
 344:	9c 8b       	std	Y+20, r25	; 0x14
 346:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 348:	89 89       	ldd	r24, Y+17	; 0x11
 34a:	9a 89       	ldd	r25, Y+18	; 0x12
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	9a 8b       	std	Y+18, r25	; 0x12
 350:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 352:	89 89       	ldd	r24, Y+17	; 0x11
 354:	9a 89       	ldd	r25, Y+18	; 0x12
 356:	89 2b       	or	r24, r25
 358:	69 f7       	brne	.-38     	; 0x334 <controlLED+0x128>
 35a:	14 c0       	rjmp	.+40     	; 0x384 <controlLED+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 35c:	6d 85       	ldd	r22, Y+13	; 0x0d
 35e:	7e 85       	ldd	r23, Y+14	; 0x0e
 360:	8f 85       	ldd	r24, Y+15	; 0x0f
 362:	98 89       	ldd	r25, Y+16	; 0x10
 364:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 368:	dc 01       	movw	r26, r24
 36a:	cb 01       	movw	r24, r22
 36c:	9a 8b       	std	Y+18, r25	; 0x12
 36e:	89 8b       	std	Y+17, r24	; 0x11
 370:	89 89       	ldd	r24, Y+17	; 0x11
 372:	9a 89       	ldd	r25, Y+18	; 0x12
 374:	9e 8b       	std	Y+22, r25	; 0x16
 376:	8d 8b       	std	Y+21, r24	; 0x15
 378:	8d 89       	ldd	r24, Y+21	; 0x15
 37a:	9e 89       	ldd	r25, Y+22	; 0x16
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <controlLED+0x170>
 380:	9e 8b       	std	Y+22, r25	; 0x16
 382:	8d 8b       	std	Y+21, r24	; 0x15
}
void controlLED (uint8_t *freq)
{
	DDRB |= 0b11111111; // PB0..7 = SAÍDA
	
	for (int i = 0; i <= 7; i++)
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	9a 83       	std	Y+2, r25	; 0x02
 38c:	89 83       	std	Y+1, r24	; 0x01
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	9a 81       	ldd	r25, Y+2	; 0x02
 392:	08 97       	sbiw	r24, 0x08	; 8
 394:	0c f4       	brge	.+2      	; 0x398 <controlLED+0x18c>
 396:	52 cf       	rjmp	.-348    	; 0x23c <controlLED+0x30>
	{
		controlFreq(&freq);
		PORTB |= 1<<i;
		_delay_ms(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
 398:	87 e0       	ldi	r24, 0x07	; 7
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9c 83       	std	Y+4, r25	; 0x04
 39e:	8b 83       	std	Y+3, r24	; 0x03
 3a0:	aa c0       	rjmp	.+340    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
	{
		controlFreq(&freq);
 3a2:	ce 01       	movw	r24, r28
 3a4:	81 96       	adiw	r24, 0x21	; 33
 3a6:	0e 94 a4 00 	call	0x148	; 0x148 <controlFreq>
		PORTB &= ~(1<<j);
 3aa:	85 e2       	ldi	r24, 0x25	; 37
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	25 e2       	ldi	r18, 0x25	; 37
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	f9 01       	movw	r30, r18
 3b4:	20 81       	ld	r18, Z
 3b6:	42 2f       	mov	r20, r18
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	0b 80       	ldd	r0, Y+3	; 0x03
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <controlLED+0x1b8>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <controlLED+0x1b4>
 3c8:	20 95       	com	r18
 3ca:	24 23       	and	r18, r20
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
		_delay_ms(60000/((*freq)*16));
 3d0:	89 a1       	ldd	r24, Y+33	; 0x21
 3d2:	9a a1       	ldd	r25, Y+34	; 0x22
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	82 95       	swap	r24
 3de:	92 95       	swap	r25
 3e0:	90 7f       	andi	r25, 0xF0	; 240
 3e2:	98 27       	eor	r25, r24
 3e4:	80 7f       	andi	r24, 0xF0	; 240
 3e6:	98 27       	eor	r25, r24
 3e8:	9c 01       	movw	r18, r24
 3ea:	99 0f       	add	r25, r25
 3ec:	44 0b       	sbc	r20, r20
 3ee:	55 0b       	sbc	r21, r21
 3f0:	80 e6       	ldi	r24, 0x60	; 96
 3f2:	9a ee       	ldi	r25, 0xEA	; 234
 3f4:	a0 e0       	ldi	r26, 0x00	; 0
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	0e 94 de 04 	call	0x9bc	; 0x9bc <__divmodsi4>
 400:	da 01       	movw	r26, r20
 402:	c9 01       	movw	r24, r18
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	0e 94 a8 03 	call	0x750	; 0x750 <__floatsisf>
 40c:	dc 01       	movw	r26, r24
 40e:	cb 01       	movw	r24, r22
 410:	8d 83       	std	Y+5, r24	; 0x05
 412:	9e 83       	std	Y+6, r25	; 0x06
 414:	af 83       	std	Y+7, r26	; 0x07
 416:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	4a e7       	ldi	r20, 0x7A	; 122
 41e:	55 e4       	ldi	r21, 0x45	; 69
 420:	6d 81       	ldd	r22, Y+5	; 0x05
 422:	7e 81       	ldd	r23, Y+6	; 0x06
 424:	8f 81       	ldd	r24, Y+7	; 0x07
 426:	98 85       	ldd	r25, Y+8	; 0x08
 428:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 42c:	dc 01       	movw	r26, r24
 42e:	cb 01       	movw	r24, r22
 430:	8f 8b       	std	Y+23, r24	; 0x17
 432:	98 8f       	std	Y+24, r25	; 0x18
 434:	a9 8f       	std	Y+25, r26	; 0x19
 436:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e8       	ldi	r20, 0x80	; 128
 43e:	5f e3       	ldi	r21, 0x3F	; 63
 440:	6f 89       	ldd	r22, Y+23	; 0x17
 442:	78 8d       	ldd	r23, Y+24	; 0x18
 444:	89 8d       	ldd	r24, Y+25	; 0x19
 446:	9a 8d       	ldd	r25, Y+26	; 0x1a
 448:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__cmpsf2>
 44c:	88 23       	and	r24, r24
 44e:	2c f4       	brge	.+10     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		__ticks = 1;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	9c 8f       	std	Y+28, r25	; 0x1c
 456:	8b 8f       	std	Y+27, r24	; 0x1b
 458:	3f c0       	rjmp	.+126    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
	else if (__tmp > 65535)
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	3f ef       	ldi	r19, 0xFF	; 255
 45e:	4f e7       	ldi	r20, 0x7F	; 127
 460:	57 e4       	ldi	r21, 0x47	; 71
 462:	6f 89       	ldd	r22, Y+23	; 0x17
 464:	78 8d       	ldd	r23, Y+24	; 0x18
 466:	89 8d       	ldd	r24, Y+25	; 0x19
 468:	9a 8d       	ldd	r25, Y+26	; 0x1a
 46a:	0e 94 30 04 	call	0x860	; 0x860 <__gesf2>
 46e:	18 16       	cp	r1, r24
 470:	4c f5       	brge	.+82     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e2       	ldi	r20, 0x20	; 32
 478:	51 e4       	ldi	r21, 0x41	; 65
 47a:	6d 81       	ldd	r22, Y+5	; 0x05
 47c:	7e 81       	ldd	r23, Y+6	; 0x06
 47e:	8f 81       	ldd	r24, Y+7	; 0x07
 480:	98 85       	ldd	r25, Y+8	; 0x08
 482:	0e 94 35 04 	call	0x86a	; 0x86a <__mulsf3>
 486:	dc 01       	movw	r26, r24
 488:	cb 01       	movw	r24, r22
 48a:	bc 01       	movw	r22, r24
 48c:	cd 01       	movw	r24, r26
 48e:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22
 496:	9c 8f       	std	Y+28, r25	; 0x1c
 498:	8b 8f       	std	Y+27, r24	; 0x1b
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 49c:	80 e9       	ldi	r24, 0x90	; 144
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	9e 8f       	std	Y+30, r25	; 0x1e
 4a2:	8d 8f       	std	Y+29, r24	; 0x1d
 4a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4ac:	9e 8f       	std	Y+30, r25	; 0x1e
 4ae:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	9c 8f       	std	Y+28, r25	; 0x1c
 4b8:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4be:	89 2b       	or	r24, r25
 4c0:	69 f7       	brne	.-38     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4c2:	14 c0       	rjmp	.+40     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4c4:	6f 89       	ldd	r22, Y+23	; 0x17
 4c6:	78 8d       	ldd	r23, Y+24	; 0x18
 4c8:	89 8d       	ldd	r24, Y+25	; 0x19
 4ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4cc:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 4d0:	dc 01       	movw	r26, r24
 4d2:	cb 01       	movw	r24, r22
 4d4:	9c 8f       	std	Y+28, r25	; 0x1c
 4d6:	8b 8f       	std	Y+27, r24	; 0x1b
 4d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4da:	9c 8d       	ldd	r25, Y+28	; 0x1c
 4dc:	98 a3       	std	Y+32, r25	; 0x20
 4de:	8f 8f       	std	Y+31, r24	; 0x1f
 4e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4e2:	98 a1       	ldd	r25, Y+32	; 0x20
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e8:	98 a3       	std	Y+32, r25	; 0x20
 4ea:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		controlFreq(&freq);
		PORTB |= 1<<i;
		_delay_ms(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	9c 81       	ldd	r25, Y+4	; 0x04
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	9c 83       	std	Y+4, r25	; 0x04
 4f4:	8b 83       	std	Y+3, r24	; 0x03
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	99 23       	and	r25, r25
 4fc:	0c f0       	brlt	.+2      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4fe:	51 cf       	rjmp	.-350    	; 0x3a2 <controlLED+0x196>
	{
		controlFreq(&freq);
		PORTB &= ~(1<<j);
		_delay_ms(60000/((*freq)*16));
	}
}
 500:	00 00       	nop
 502:	a2 96       	adiw	r28, 0x22	; 34
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <showResp>:

void showResp(uint8_t *fresp) // mostra de 0 a 30 em hexa
{	
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	00 d0       	rcall	.+0      	; 0x51a <showResp+0x6>
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
 51e:	9a 83       	std	Y+2, r25	; 0x02
 520:	89 83       	std	Y+1, r24	; 0x01
		DDRC |= 0b1111111; // PC0..6 = SAÍDA
 522:	87 e2       	ldi	r24, 0x27	; 39
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	27 e2       	ldi	r18, 0x27	; 39
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	2f 67       	ori	r18, 0x7F	; 127
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
		
		switch (*fresp)
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	9a 81       	ldd	r25, Y+2	; 0x02
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	09 2e       	mov	r0, r25
 542:	00 0c       	add	r0, r0
 544:	aa 0b       	sbc	r26, r26
 546:	bb 0b       	sbc	r27, r27
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	2e e1       	ldi	r18, 0x1E	; 30
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	84 1b       	sub	r24, r20
 552:	95 0b       	sbc	r25, r21
 554:	28 17       	cp	r18, r24
 556:	39 07       	cpc	r19, r25
 558:	08 f4       	brcc	.+2      	; 0x55c <showResp+0x48>
 55a:	be c0       	rjmp	.+380    	; 0x6d8 <showResp+0x1c4>
 55c:	8c 5c       	subi	r24, 0xCC	; 204
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	fc 01       	movw	r30, r24
 562:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__tablejump2__>
		{
			case 0:
				PORTC = 0b00000000;
 566:	88 e2       	ldi	r24, 0x28	; 40
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	10 82       	st	Z, r1
				break;
 56e:	b4 c0       	rjmp	.+360    	; 0x6d8 <showResp+0x1c4>
			case 1:
				PORTC = 0b00000001;
 570:	88 e2       	ldi	r24, 0x28	; 40
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
				break;
 57a:	ae c0       	rjmp	.+348    	; 0x6d8 <showResp+0x1c4>
			case 2:
				PORTC = 0b00000010;
 57c:	88 e2       	ldi	r24, 0x28	; 40
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	22 e0       	ldi	r18, 0x02	; 2
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
				break;
 586:	a8 c0       	rjmp	.+336    	; 0x6d8 <showResp+0x1c4>
			case 3:
				PORTC = 0b00000011;
 588:	88 e2       	ldi	r24, 0x28	; 40
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	23 e0       	ldi	r18, 0x03	; 3
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
				break;
 592:	a2 c0       	rjmp	.+324    	; 0x6d8 <showResp+0x1c4>
			case 4:
				PORTC = 0b00000100;
 594:	88 e2       	ldi	r24, 0x28	; 40
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	24 e0       	ldi	r18, 0x04	; 4
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
				break;
 59e:	9c c0       	rjmp	.+312    	; 0x6d8 <showResp+0x1c4>
			case 5:
				PORTC = 0b00000101;
 5a0:	88 e2       	ldi	r24, 0x28	; 40
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	25 e0       	ldi	r18, 0x05	; 5
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
				break;
 5aa:	96 c0       	rjmp	.+300    	; 0x6d8 <showResp+0x1c4>
			case 6:
				PORTC = 0b00000110;
 5ac:	88 e2       	ldi	r24, 0x28	; 40
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	26 e0       	ldi	r18, 0x06	; 6
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
				break;
 5b6:	90 c0       	rjmp	.+288    	; 0x6d8 <showResp+0x1c4>
			case 7:
				PORTC = 0b00000111;
 5b8:	88 e2       	ldi	r24, 0x28	; 40
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	27 e0       	ldi	r18, 0x07	; 7
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
				break;
 5c2:	8a c0       	rjmp	.+276    	; 0x6d8 <showResp+0x1c4>
			case 8:
				PORTC = 0b00001000;
 5c4:	88 e2       	ldi	r24, 0x28	; 40
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	28 e0       	ldi	r18, 0x08	; 8
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
				break;
 5ce:	84 c0       	rjmp	.+264    	; 0x6d8 <showResp+0x1c4>
			case 9:
				PORTC = 0b00001001;
 5d0:	88 e2       	ldi	r24, 0x28	; 40
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	29 e0       	ldi	r18, 0x09	; 9
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
				break;
 5da:	7e c0       	rjmp	.+252    	; 0x6d8 <showResp+0x1c4>
			case 10:
				PORTC = 0b00001010;
 5dc:	88 e2       	ldi	r24, 0x28	; 40
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2a e0       	ldi	r18, 0x0A	; 10
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
				break;
 5e6:	78 c0       	rjmp	.+240    	; 0x6d8 <showResp+0x1c4>
			case 11:
				PORTC = 0b00001011;
 5e8:	88 e2       	ldi	r24, 0x28	; 40
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	2b e0       	ldi	r18, 0x0B	; 11
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
				break;
 5f2:	72 c0       	rjmp	.+228    	; 0x6d8 <showResp+0x1c4>
			case 12:
				PORTC = 0b00001100;
 5f4:	88 e2       	ldi	r24, 0x28	; 40
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	2c e0       	ldi	r18, 0x0C	; 12
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
				break;
 5fe:	6c c0       	rjmp	.+216    	; 0x6d8 <showResp+0x1c4>
			case 13:
				PORTC = 0b00001101;
 600:	88 e2       	ldi	r24, 0x28	; 40
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	2d e0       	ldi	r18, 0x0D	; 13
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
				break;
 60a:	66 c0       	rjmp	.+204    	; 0x6d8 <showResp+0x1c4>
			case 14:
				PORTC = 0b00001110;
 60c:	88 e2       	ldi	r24, 0x28	; 40
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	2e e0       	ldi	r18, 0x0E	; 14
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
				break;
 616:	60 c0       	rjmp	.+192    	; 0x6d8 <showResp+0x1c4>
			case 15:
				PORTC = 0b00001111;
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	2f e0       	ldi	r18, 0x0F	; 15
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18
				break;
 622:	5a c0       	rjmp	.+180    	; 0x6d8 <showResp+0x1c4>
			case 16:
				PORTC = 0b00010000;
 624:	88 e2       	ldi	r24, 0x28	; 40
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	20 e1       	ldi	r18, 0x10	; 16
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
				break;
 62e:	54 c0       	rjmp	.+168    	; 0x6d8 <showResp+0x1c4>
			case 17:
				PORTC = 0b00010001;
 630:	88 e2       	ldi	r24, 0x28	; 40
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	21 e1       	ldi	r18, 0x11	; 17
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
				break;
 63a:	4e c0       	rjmp	.+156    	; 0x6d8 <showResp+0x1c4>
			case 18:
				PORTC = 0b00010010;
 63c:	88 e2       	ldi	r24, 0x28	; 40
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	22 e1       	ldi	r18, 0x12	; 18
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
				break;
 646:	48 c0       	rjmp	.+144    	; 0x6d8 <showResp+0x1c4>
			case 19:
				PORTC = 0b00010011;
 648:	88 e2       	ldi	r24, 0x28	; 40
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	23 e1       	ldi	r18, 0x13	; 19
 64e:	fc 01       	movw	r30, r24
 650:	20 83       	st	Z, r18
				break;	
 652:	42 c0       	rjmp	.+132    	; 0x6d8 <showResp+0x1c4>
			case 20:
				PORTC = 0b00010100;
 654:	88 e2       	ldi	r24, 0x28	; 40
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	24 e1       	ldi	r18, 0x14	; 20
 65a:	fc 01       	movw	r30, r24
 65c:	20 83       	st	Z, r18
				break;
 65e:	3c c0       	rjmp	.+120    	; 0x6d8 <showResp+0x1c4>
			case 21:
				PORTC = 0b00010101;
 660:	88 e2       	ldi	r24, 0x28	; 40
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	25 e1       	ldi	r18, 0x15	; 21
 666:	fc 01       	movw	r30, r24
 668:	20 83       	st	Z, r18
				break;
 66a:	36 c0       	rjmp	.+108    	; 0x6d8 <showResp+0x1c4>
			case 22:
				PORTC = 0b00010110;
 66c:	88 e2       	ldi	r24, 0x28	; 40
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	26 e1       	ldi	r18, 0x16	; 22
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18
				break;			
 676:	30 c0       	rjmp	.+96     	; 0x6d8 <showResp+0x1c4>
			case 23:
				PORTC = 0b00010111;
 678:	88 e2       	ldi	r24, 0x28	; 40
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	27 e1       	ldi	r18, 0x17	; 23
 67e:	fc 01       	movw	r30, r24
 680:	20 83       	st	Z, r18
				break;
 682:	2a c0       	rjmp	.+84     	; 0x6d8 <showResp+0x1c4>
			case 24:
				PORTC = 0b00011000;
 684:	88 e2       	ldi	r24, 0x28	; 40
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	28 e1       	ldi	r18, 0x18	; 24
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18
				break;
 68e:	24 c0       	rjmp	.+72     	; 0x6d8 <showResp+0x1c4>
			case 25:
				PORTC = 0b00011001;
 690:	88 e2       	ldi	r24, 0x28	; 40
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	29 e1       	ldi	r18, 0x19	; 25
 696:	fc 01       	movw	r30, r24
 698:	20 83       	st	Z, r18
				break;
 69a:	1e c0       	rjmp	.+60     	; 0x6d8 <showResp+0x1c4>
			case 26:
				PORTC = 0b00011010;
 69c:	88 e2       	ldi	r24, 0x28	; 40
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	2a e1       	ldi	r18, 0x1A	; 26
 6a2:	fc 01       	movw	r30, r24
 6a4:	20 83       	st	Z, r18
				break;
 6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <showResp+0x1c4>
			case 27:
				PORTC = 0b00011011;
 6a8:	88 e2       	ldi	r24, 0x28	; 40
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	2b e1       	ldi	r18, 0x1B	; 27
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
				break;
 6b2:	12 c0       	rjmp	.+36     	; 0x6d8 <showResp+0x1c4>
			case 28:
				PORTC = 0b00011100;
 6b4:	88 e2       	ldi	r24, 0x28	; 40
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	2c e1       	ldi	r18, 0x1C	; 28
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18
				break;
 6be:	0c c0       	rjmp	.+24     	; 0x6d8 <showResp+0x1c4>
			case 29:
				PORTC = 0b00011101;
 6c0:	88 e2       	ldi	r24, 0x28	; 40
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2d e1       	ldi	r18, 0x1D	; 29
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
				break;									
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <showResp+0x1c4>
			case 30:
				PORTC = 0b00011110;
 6cc:	88 e2       	ldi	r24, 0x28	; 40
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	2e e1       	ldi	r18, 0x1E	; 30
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
				break;										
 6d6:	00 00       	nop
		}
 6d8:	00 00       	nop
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <__cmpsf2>:
 6e4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_cmp>
 6e8:	08 f4       	brcc	.+2      	; 0x6ec <__cmpsf2+0x8>
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret

000006ee <__fixunssfsi>:
 6ee:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_splitA>
 6f2:	88 f0       	brcs	.+34     	; 0x716 <__fixunssfsi+0x28>
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	98 f0       	brcs	.+38     	; 0x71e <__fixunssfsi+0x30>
 6f8:	b9 2f       	mov	r27, r25
 6fa:	99 27       	eor	r25, r25
 6fc:	b7 51       	subi	r27, 0x17	; 23
 6fe:	b0 f0       	brcs	.+44     	; 0x72c <__fixunssfsi+0x3e>
 700:	e1 f0       	breq	.+56     	; 0x73a <__fixunssfsi+0x4c>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a f0       	brmi	.+6      	; 0x712 <__fixunssfsi+0x24>
 70c:	ba 95       	dec	r27
 70e:	c9 f7       	brne	.-14     	; 0x702 <__fixunssfsi+0x14>
 710:	14 c0       	rjmp	.+40     	; 0x73a <__fixunssfsi+0x4c>
 712:	b1 30       	cpi	r27, 0x01	; 1
 714:	91 f0       	breq	.+36     	; 0x73a <__fixunssfsi+0x4c>
 716:	0e 94 29 04 	call	0x852	; 0x852 <__fp_zero>
 71a:	b1 e0       	ldi	r27, 0x01	; 1
 71c:	08 95       	ret
 71e:	0c 94 29 04 	jmp	0x852	; 0x852 <__fp_zero>
 722:	67 2f       	mov	r22, r23
 724:	78 2f       	mov	r23, r24
 726:	88 27       	eor	r24, r24
 728:	b8 5f       	subi	r27, 0xF8	; 248
 72a:	39 f0       	breq	.+14     	; 0x73a <__fixunssfsi+0x4c>
 72c:	b9 3f       	cpi	r27, 0xF9	; 249
 72e:	cc f3       	brlt	.-14     	; 0x722 <__fixunssfsi+0x34>
 730:	86 95       	lsr	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b3 95       	inc	r27
 738:	d9 f7       	brne	.-10     	; 0x730 <__fixunssfsi+0x42>
 73a:	3e f4       	brtc	.+14     	; 0x74a <__fixunssfsi+0x5c>
 73c:	90 95       	com	r25
 73e:	80 95       	com	r24
 740:	70 95       	com	r23
 742:	61 95       	neg	r22
 744:	7f 4f       	sbci	r23, 0xFF	; 255
 746:	8f 4f       	sbci	r24, 0xFF	; 255
 748:	9f 4f       	sbci	r25, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__floatunsisf>:
 74c:	e8 94       	clt
 74e:	09 c0       	rjmp	.+18     	; 0x762 <__floatsisf+0x12>

00000750 <__floatsisf>:
 750:	97 fb       	bst	r25, 7
 752:	3e f4       	brtc	.+14     	; 0x762 <__floatsisf+0x12>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	99 23       	and	r25, r25
 764:	a9 f0       	breq	.+42     	; 0x790 <__floatsisf+0x40>
 766:	f9 2f       	mov	r31, r25
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	bb 27       	eor	r27, r27
 76c:	93 95       	inc	r25
 76e:	f6 95       	lsr	r31
 770:	87 95       	ror	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f1 11       	cpse	r31, r1
 77a:	f8 cf       	rjmp	.-16     	; 0x76c <__floatsisf+0x1c>
 77c:	fa f4       	brpl	.+62     	; 0x7bc <__floatsisf+0x6c>
 77e:	bb 0f       	add	r27, r27
 780:	11 f4       	brne	.+4      	; 0x786 <__floatsisf+0x36>
 782:	60 ff       	sbrs	r22, 0
 784:	1b c0       	rjmp	.+54     	; 0x7bc <__floatsisf+0x6c>
 786:	6f 5f       	subi	r22, 0xFF	; 255
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <__floatsisf+0x6c>
 790:	88 23       	and	r24, r24
 792:	11 f0       	breq	.+4      	; 0x798 <__floatsisf+0x48>
 794:	96 e9       	ldi	r25, 0x96	; 150
 796:	11 c0       	rjmp	.+34     	; 0x7ba <__floatsisf+0x6a>
 798:	77 23       	and	r23, r23
 79a:	21 f0       	breq	.+8      	; 0x7a4 <__floatsisf+0x54>
 79c:	9e e8       	ldi	r25, 0x8E	; 142
 79e:	87 2f       	mov	r24, r23
 7a0:	76 2f       	mov	r23, r22
 7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__floatsisf+0x5e>
 7a4:	66 23       	and	r22, r22
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__floatsisf+0x74>
 7a8:	96 e8       	ldi	r25, 0x86	; 134
 7aa:	86 2f       	mov	r24, r22
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	2a f0       	brmi	.+10     	; 0x7bc <__floatsisf+0x6c>
 7b2:	9a 95       	dec	r25
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	da f7       	brpl	.-10     	; 0x7b2 <__floatsisf+0x62>
 7bc:	88 0f       	add	r24, r24
 7be:	96 95       	lsr	r25
 7c0:	87 95       	ror	r24
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret

000007c6 <__fp_cmp>:
 7c6:	99 0f       	add	r25, r25
 7c8:	00 08       	sbc	r0, r0
 7ca:	55 0f       	add	r21, r21
 7cc:	aa 0b       	sbc	r26, r26
 7ce:	e0 e8       	ldi	r30, 0x80	; 128
 7d0:	fe ef       	ldi	r31, 0xFE	; 254
 7d2:	16 16       	cp	r1, r22
 7d4:	17 06       	cpc	r1, r23
 7d6:	e8 07       	cpc	r30, r24
 7d8:	f9 07       	cpc	r31, r25
 7da:	c0 f0       	brcs	.+48     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7dc:	12 16       	cp	r1, r18
 7de:	13 06       	cpc	r1, r19
 7e0:	e4 07       	cpc	r30, r20
 7e2:	f5 07       	cpc	r31, r21
 7e4:	98 f0       	brcs	.+38     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7e6:	62 1b       	sub	r22, r18
 7e8:	73 0b       	sbc	r23, r19
 7ea:	84 0b       	sbc	r24, r20
 7ec:	95 0b       	sbc	r25, r21
 7ee:	39 f4       	brne	.+14     	; 0x7fe <__fp_cmp+0x38>
 7f0:	0a 26       	eor	r0, r26
 7f2:	61 f0       	breq	.+24     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7f4:	23 2b       	or	r18, r19
 7f6:	24 2b       	or	r18, r20
 7f8:	25 2b       	or	r18, r21
 7fa:	21 f4       	brne	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7fc:	08 95       	ret
 7fe:	0a 26       	eor	r0, r26
 800:	09 f4       	brne	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 802:	a1 40       	sbci	r26, 0x01	; 1
 804:	a6 95       	lsr	r26
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	81 1d       	adc	r24, r1
 80a:	81 1d       	adc	r24, r1
 80c:	08 95       	ret

0000080e <__fp_split3>:
 80e:	57 fd       	sbrc	r21, 7
 810:	90 58       	subi	r25, 0x80	; 128
 812:	44 0f       	add	r20, r20
 814:	55 1f       	adc	r21, r21
 816:	59 f0       	breq	.+22     	; 0x82e <__fp_splitA+0x10>
 818:	5f 3f       	cpi	r21, 0xFF	; 255
 81a:	71 f0       	breq	.+28     	; 0x838 <__fp_splitA+0x1a>
 81c:	47 95       	ror	r20

0000081e <__fp_splitA>:
 81e:	88 0f       	add	r24, r24
 820:	97 fb       	bst	r25, 7
 822:	99 1f       	adc	r25, r25
 824:	61 f0       	breq	.+24     	; 0x83e <__fp_splitA+0x20>
 826:	9f 3f       	cpi	r25, 0xFF	; 255
 828:	79 f0       	breq	.+30     	; 0x848 <__fp_splitA+0x2a>
 82a:	87 95       	ror	r24
 82c:	08 95       	ret
 82e:	12 16       	cp	r1, r18
 830:	13 06       	cpc	r1, r19
 832:	14 06       	cpc	r1, r20
 834:	55 1f       	adc	r21, r21
 836:	f2 cf       	rjmp	.-28     	; 0x81c <__fp_split3+0xe>
 838:	46 95       	lsr	r20
 83a:	f1 df       	rcall	.-30     	; 0x81e <__fp_splitA>
 83c:	08 c0       	rjmp	.+16     	; 0x84e <__fp_splitA+0x30>
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	18 06       	cpc	r1, r24
 844:	99 1f       	adc	r25, r25
 846:	f1 cf       	rjmp	.-30     	; 0x82a <__fp_splitA+0xc>
 848:	86 95       	lsr	r24
 84a:	71 05       	cpc	r23, r1
 84c:	61 05       	cpc	r22, r1
 84e:	08 94       	sec
 850:	08 95       	ret

00000852 <__fp_zero>:
 852:	e8 94       	clt

00000854 <__fp_szero>:
 854:	bb 27       	eor	r27, r27
 856:	66 27       	eor	r22, r22
 858:	77 27       	eor	r23, r23
 85a:	cb 01       	movw	r24, r22
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__gesf2>:
 860:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_cmp>
 864:	08 f4       	brcc	.+2      	; 0x868 <__gesf2+0x8>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	08 95       	ret

0000086a <__mulsf3>:
 86a:	0e 94 48 04 	call	0x890	; 0x890 <__mulsf3x>
 86e:	0c 94 b9 04 	jmp	0x972	; 0x972 <__fp_round>
 872:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscA>
 876:	38 f0       	brcs	.+14     	; 0x886 <__mulsf3+0x1c>
 878:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscB>
 87c:	20 f0       	brcs	.+8      	; 0x886 <__mulsf3+0x1c>
 87e:	95 23       	and	r25, r21
 880:	11 f0       	breq	.+4      	; 0x886 <__mulsf3+0x1c>
 882:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
 886:	0c 94 a8 04 	jmp	0x950	; 0x950 <__fp_nan>
 88a:	11 24       	eor	r1, r1
 88c:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>

00000890 <__mulsf3x>:
 890:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_split3>
 894:	70 f3       	brcs	.-36     	; 0x872 <__mulsf3+0x8>

00000896 <__mulsf3_pse>:
 896:	95 9f       	mul	r25, r21
 898:	c1 f3       	breq	.-16     	; 0x88a <__mulsf3+0x20>
 89a:	95 0f       	add	r25, r21
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	55 1f       	adc	r21, r21
 8a0:	62 9f       	mul	r22, r18
 8a2:	f0 01       	movw	r30, r0
 8a4:	72 9f       	mul	r23, r18
 8a6:	bb 27       	eor	r27, r27
 8a8:	f0 0d       	add	r31, r0
 8aa:	b1 1d       	adc	r27, r1
 8ac:	63 9f       	mul	r22, r19
 8ae:	aa 27       	eor	r26, r26
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	aa 1f       	adc	r26, r26
 8b6:	64 9f       	mul	r22, r20
 8b8:	66 27       	eor	r22, r22
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	66 1f       	adc	r22, r22
 8c0:	82 9f       	mul	r24, r18
 8c2:	22 27       	eor	r18, r18
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 9f       	mul	r23, r19
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	83 9f       	mul	r24, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	22 1f       	adc	r18, r18
 8da:	74 9f       	mul	r23, r20
 8dc:	33 27       	eor	r19, r19
 8de:	a0 0d       	add	r26, r0
 8e0:	61 1d       	adc	r22, r1
 8e2:	23 1f       	adc	r18, r19
 8e4:	84 9f       	mul	r24, r20
 8e6:	60 0d       	add	r22, r0
 8e8:	21 1d       	adc	r18, r1
 8ea:	82 2f       	mov	r24, r18
 8ec:	76 2f       	mov	r23, r22
 8ee:	6a 2f       	mov	r22, r26
 8f0:	11 24       	eor	r1, r1
 8f2:	9f 57       	subi	r25, 0x7F	; 127
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	9a f0       	brmi	.+38     	; 0x91e <__stack+0x1f>
 8f8:	f1 f0       	breq	.+60     	; 0x936 <__stack+0x37>
 8fa:	88 23       	and	r24, r24
 8fc:	4a f0       	brmi	.+18     	; 0x910 <__stack+0x11>
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	a9 f7       	brne	.-22     	; 0x8fa <__mulsf3_pse+0x64>
 910:	9e 3f       	cpi	r25, 0xFE	; 254
 912:	51 05       	cpc	r21, r1
 914:	80 f0       	brcs	.+32     	; 0x936 <__stack+0x37>
 916:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_inf>
 91a:	0c 94 2a 04 	jmp	0x854	; 0x854 <__fp_szero>
 91e:	5f 3f       	cpi	r21, 0xFF	; 255
 920:	e4 f3       	brlt	.-8      	; 0x91a <__stack+0x1b>
 922:	98 3e       	cpi	r25, 0xE8	; 232
 924:	d4 f3       	brlt	.-12     	; 0x91a <__stack+0x1b>
 926:	86 95       	lsr	r24
 928:	77 95       	ror	r23
 92a:	67 95       	ror	r22
 92c:	b7 95       	ror	r27
 92e:	f7 95       	ror	r31
 930:	e7 95       	ror	r30
 932:	9f 5f       	subi	r25, 0xFF	; 255
 934:	c1 f7       	brne	.-16     	; 0x926 <__stack+0x27>
 936:	fe 2b       	or	r31, r30
 938:	88 0f       	add	r24, r24
 93a:	91 1d       	adc	r25, r1
 93c:	96 95       	lsr	r25
 93e:	87 95       	ror	r24
 940:	97 f9       	bld	r25, 7
 942:	08 95       	ret

00000944 <__fp_inf>:
 944:	97 f9       	bld	r25, 7
 946:	9f 67       	ori	r25, 0x7F	; 127
 948:	80 e8       	ldi	r24, 0x80	; 128
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	08 95       	ret

00000950 <__fp_nan>:
 950:	9f ef       	ldi	r25, 0xFF	; 255
 952:	80 ec       	ldi	r24, 0xC0	; 192
 954:	08 95       	ret

00000956 <__fp_pscA>:
 956:	00 24       	eor	r0, r0
 958:	0a 94       	dec	r0
 95a:	16 16       	cp	r1, r22
 95c:	17 06       	cpc	r1, r23
 95e:	18 06       	cpc	r1, r24
 960:	09 06       	cpc	r0, r25
 962:	08 95       	ret

00000964 <__fp_pscB>:
 964:	00 24       	eor	r0, r0
 966:	0a 94       	dec	r0
 968:	12 16       	cp	r1, r18
 96a:	13 06       	cpc	r1, r19
 96c:	14 06       	cpc	r1, r20
 96e:	05 06       	cpc	r0, r21
 970:	08 95       	ret

00000972 <__fp_round>:
 972:	09 2e       	mov	r0, r25
 974:	03 94       	inc	r0
 976:	00 0c       	add	r0, r0
 978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0xc>
 97a:	88 23       	and	r24, r24
 97c:	52 f0       	brmi	.+20     	; 0x992 <__fp_round+0x20>
 97e:	bb 0f       	add	r27, r27
 980:	40 f4       	brcc	.+16     	; 0x992 <__fp_round+0x20>
 982:	bf 2b       	or	r27, r31
 984:	11 f4       	brne	.+4      	; 0x98a <__fp_round+0x18>
 986:	60 ff       	sbrs	r22, 0
 988:	04 c0       	rjmp	.+8      	; 0x992 <__fp_round+0x20>
 98a:	6f 5f       	subi	r22, 0xFF	; 255
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	08 95       	ret

00000994 <__divmodhi4>:
 994:	97 fb       	bst	r25, 7
 996:	07 2e       	mov	r0, r23
 998:	16 f4       	brtc	.+4      	; 0x99e <__divmodhi4+0xa>
 99a:	00 94       	com	r0
 99c:	07 d0       	rcall	.+14     	; 0x9ac <__divmodhi4_neg1>
 99e:	77 fd       	sbrc	r23, 7
 9a0:	09 d0       	rcall	.+18     	; 0x9b4 <__divmodhi4_neg2>
 9a2:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodhi4>
 9a6:	07 fc       	sbrc	r0, 7
 9a8:	05 d0       	rcall	.+10     	; 0x9b4 <__divmodhi4_neg2>
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__divmodhi4_exit>

000009ac <__divmodhi4_neg1>:
 9ac:	90 95       	com	r25
 9ae:	81 95       	neg	r24
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__divmodhi4_neg2>:
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ba <__divmodhi4_exit>:
 9ba:	08 95       	ret

000009bc <__divmodsi4>:
 9bc:	05 2e       	mov	r0, r21
 9be:	97 fb       	bst	r25, 7
 9c0:	1e f4       	brtc	.+6      	; 0x9c8 <__divmodsi4+0xc>
 9c2:	00 94       	com	r0
 9c4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__negsi2>
 9c8:	57 fd       	sbrc	r21, 7
 9ca:	07 d0       	rcall	.+14     	; 0x9da <__divmodsi4_neg2>
 9cc:	0e 94 17 05 	call	0xa2e	; 0xa2e <__udivmodsi4>
 9d0:	07 fc       	sbrc	r0, 7
 9d2:	03 d0       	rcall	.+6      	; 0x9da <__divmodsi4_neg2>
 9d4:	4e f4       	brtc	.+18     	; 0x9e8 <__divmodsi4_exit>
 9d6:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__negsi2>

000009da <__divmodsi4_neg2>:
 9da:	50 95       	com	r21
 9dc:	40 95       	com	r20
 9de:	30 95       	com	r19
 9e0:	21 95       	neg	r18
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	4f 4f       	sbci	r20, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255

000009e8 <__divmodsi4_exit>:
 9e8:	08 95       	ret

000009ea <__negsi2>:
 9ea:	90 95       	com	r25
 9ec:	80 95       	com	r24
 9ee:	70 95       	com	r23
 9f0:	61 95       	neg	r22
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <__tablejump2__>:
 9fa:	ee 0f       	add	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	05 90       	lpm	r0, Z+
 a00:	f4 91       	lpm	r31, Z
 a02:	e0 2d       	mov	r30, r0
 a04:	09 94       	ijmp

00000a06 <__udivmodhi4>:
 a06:	aa 1b       	sub	r26, r26
 a08:	bb 1b       	sub	r27, r27
 a0a:	51 e1       	ldi	r21, 0x11	; 17
 a0c:	07 c0       	rjmp	.+14     	; 0xa1c <__udivmodhi4_ep>

00000a0e <__udivmodhi4_loop>:
 a0e:	aa 1f       	adc	r26, r26
 a10:	bb 1f       	adc	r27, r27
 a12:	a6 17       	cp	r26, r22
 a14:	b7 07       	cpc	r27, r23
 a16:	10 f0       	brcs	.+4      	; 0xa1c <__udivmodhi4_ep>
 a18:	a6 1b       	sub	r26, r22
 a1a:	b7 0b       	sbc	r27, r23

00000a1c <__udivmodhi4_ep>:
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	5a 95       	dec	r21
 a22:	a9 f7       	brne	.-22     	; 0xa0e <__udivmodhi4_loop>
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	bc 01       	movw	r22, r24
 a2a:	cd 01       	movw	r24, r26
 a2c:	08 95       	ret

00000a2e <__udivmodsi4>:
 a2e:	a1 e2       	ldi	r26, 0x21	; 33
 a30:	1a 2e       	mov	r1, r26
 a32:	aa 1b       	sub	r26, r26
 a34:	bb 1b       	sub	r27, r27
 a36:	fd 01       	movw	r30, r26
 a38:	0d c0       	rjmp	.+26     	; 0xa54 <__udivmodsi4_ep>

00000a3a <__udivmodsi4_loop>:
 a3a:	aa 1f       	adc	r26, r26
 a3c:	bb 1f       	adc	r27, r27
 a3e:	ee 1f       	adc	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	a2 17       	cp	r26, r18
 a44:	b3 07       	cpc	r27, r19
 a46:	e4 07       	cpc	r30, r20
 a48:	f5 07       	cpc	r31, r21
 a4a:	20 f0       	brcs	.+8      	; 0xa54 <__udivmodsi4_ep>
 a4c:	a2 1b       	sub	r26, r18
 a4e:	b3 0b       	sbc	r27, r19
 a50:	e4 0b       	sbc	r30, r20
 a52:	f5 0b       	sbc	r31, r21

00000a54 <__udivmodsi4_ep>:
 a54:	66 1f       	adc	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	1a 94       	dec	r1
 a5e:	69 f7       	brne	.-38     	; 0xa3a <__udivmodsi4_loop>
 a60:	60 95       	com	r22
 a62:	70 95       	com	r23
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	bd 01       	movw	r22, r26
 a6e:	cf 01       	movw	r24, r30
 a70:	08 95       	ret

00000a72 <do_rand>:
 a72:	8f 92       	push	r8
 a74:	9f 92       	push	r9
 a76:	af 92       	push	r10
 a78:	bf 92       	push	r11
 a7a:	cf 92       	push	r12
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	ec 01       	movw	r28, r24
 a88:	68 81       	ld	r22, Y
 a8a:	79 81       	ldd	r23, Y+1	; 0x01
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	61 15       	cp	r22, r1
 a92:	71 05       	cpc	r23, r1
 a94:	81 05       	cpc	r24, r1
 a96:	91 05       	cpc	r25, r1
 a98:	21 f4       	brne	.+8      	; 0xaa2 <do_rand+0x30>
 a9a:	64 e2       	ldi	r22, 0x24	; 36
 a9c:	79 ed       	ldi	r23, 0xD9	; 217
 a9e:	8b e5       	ldi	r24, 0x5B	; 91
 aa0:	97 e0       	ldi	r25, 0x07	; 7
 aa2:	2d e1       	ldi	r18, 0x1D	; 29
 aa4:	33 ef       	ldi	r19, 0xF3	; 243
 aa6:	41 e0       	ldi	r20, 0x01	; 1
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	0e 94 de 04 	call	0x9bc	; 0x9bc <__divmodsi4>
 aae:	49 01       	movw	r8, r18
 ab0:	5a 01       	movw	r10, r20
 ab2:	9b 01       	movw	r18, r22
 ab4:	ac 01       	movw	r20, r24
 ab6:	a7 ea       	ldi	r26, 0xA7	; 167
 ab8:	b1 e4       	ldi	r27, 0x41	; 65
 aba:	0e 94 95 05 	call	0xb2a	; 0xb2a <__muluhisi3>
 abe:	6b 01       	movw	r12, r22
 ac0:	7c 01       	movw	r14, r24
 ac2:	ac ee       	ldi	r26, 0xEC	; 236
 ac4:	b4 ef       	ldi	r27, 0xF4	; 244
 ac6:	a5 01       	movw	r20, r10
 ac8:	94 01       	movw	r18, r8
 aca:	0e 94 a3 05 	call	0xb46	; 0xb46 <__mulohisi3>
 ace:	dc 01       	movw	r26, r24
 ad0:	cb 01       	movw	r24, r22
 ad2:	8c 0d       	add	r24, r12
 ad4:	9d 1d       	adc	r25, r13
 ad6:	ae 1d       	adc	r26, r14
 ad8:	bf 1d       	adc	r27, r15
 ada:	b7 ff       	sbrs	r27, 7
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <do_rand+0x72>
 ade:	01 97       	sbiw	r24, 0x01	; 1
 ae0:	a1 09       	sbc	r26, r1
 ae2:	b0 48       	sbci	r27, 0x80	; 128
 ae4:	88 83       	st	Y, r24
 ae6:	99 83       	std	Y+1, r25	; 0x01
 ae8:	aa 83       	std	Y+2, r26	; 0x02
 aea:	bb 83       	std	Y+3, r27	; 0x03
 aec:	9f 77       	andi	r25, 0x7F	; 127
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	ff 90       	pop	r15
 af4:	ef 90       	pop	r14
 af6:	df 90       	pop	r13
 af8:	cf 90       	pop	r12
 afa:	bf 90       	pop	r11
 afc:	af 90       	pop	r10
 afe:	9f 90       	pop	r9
 b00:	8f 90       	pop	r8
 b02:	08 95       	ret

00000b04 <rand_r>:
 b04:	0e 94 39 05 	call	0xa72	; 0xa72 <do_rand>
 b08:	08 95       	ret

00000b0a <rand>:
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	91 e0       	ldi	r25, 0x01	; 1
 b0e:	0e 94 39 05 	call	0xa72	; 0xa72 <do_rand>
 b12:	08 95       	ret

00000b14 <srand>:
 b14:	a0 e0       	ldi	r26, 0x00	; 0
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 b1c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b20:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 b24:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 b28:	08 95       	ret

00000b2a <__muluhisi3>:
 b2a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__umulhisi3>
 b2e:	a5 9f       	mul	r26, r21
 b30:	90 0d       	add	r25, r0
 b32:	b4 9f       	mul	r27, r20
 b34:	90 0d       	add	r25, r0
 b36:	a4 9f       	mul	r26, r20
 b38:	80 0d       	add	r24, r0
 b3a:	91 1d       	adc	r25, r1
 b3c:	11 24       	eor	r1, r1
 b3e:	08 95       	ret

00000b40 <__mulshisi3>:
 b40:	b7 ff       	sbrs	r27, 7
 b42:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__muluhisi3>

00000b46 <__mulohisi3>:
 b46:	0e 94 95 05 	call	0xb2a	; 0xb2a <__muluhisi3>
 b4a:	82 1b       	sub	r24, r18
 b4c:	93 0b       	sbc	r25, r19
 b4e:	08 95       	ret

00000b50 <__umulhisi3>:
 b50:	a2 9f       	mul	r26, r18
 b52:	b0 01       	movw	r22, r0
 b54:	b3 9f       	mul	r27, r19
 b56:	c0 01       	movw	r24, r0
 b58:	a3 9f       	mul	r26, r19
 b5a:	70 0d       	add	r23, r0
 b5c:	81 1d       	adc	r24, r1
 b5e:	11 24       	eor	r1, r1
 b60:	91 1d       	adc	r25, r1
 b62:	b2 9f       	mul	r27, r18
 b64:	70 0d       	add	r23, r0
 b66:	81 1d       	adc	r24, r1
 b68:	11 24       	eor	r1, r1
 b6a:	91 1d       	adc	r25, r1
 b6c:	08 95       	ret

00000b6e <_exit>:
 b6e:	f8 94       	cli

00000b70 <__stop_program>:
 b70:	ff cf       	rjmp	.-2      	; 0xb70 <__stop_program>
