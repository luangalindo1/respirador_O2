
SPRINT 3 - Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  000015b6  0000164a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fa  00800168  00800168  000016b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e27  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a7  00000000  00000000  00002603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f05  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00003db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008594  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067e  00000000  00000000  0000c64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000ccca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002eb3  00000000  00000000  0000cd62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 01 	jmp	0x286	; 0x286 <__ctors_end>
       4:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_1>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__vector_2>
       c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      10:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      14:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      18:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      1c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      20:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      24:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      30:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      34:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      38:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      3c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      40:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      44:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      50:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      54:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      58:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      5c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      60:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      64:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      68:	39 08       	sbc	r3, r9
      6a:	3f 08       	sbc	r3, r15
      6c:	45 08       	sbc	r4, r5
      6e:	4b 08       	sbc	r4, r11
      70:	51 08       	sbc	r5, r1
      72:	57 08       	sbc	r5, r7
      74:	5d 08       	sbc	r5, r13
      76:	63 08       	sbc	r6, r3
      78:	69 08       	sbc	r6, r9
      7a:	6f 08       	sbc	r6, r15
      7c:	75 08       	sbc	r7, r5
      7e:	7b 08       	sbc	r7, r11
      80:	81 08       	sbc	r8, r1
      82:	87 08       	sbc	r8, r7
      84:	8d 08       	sbc	r8, r13
      86:	93 08       	sbc	r9, r3
      88:	99 08       	sbc	r9, r9
      8a:	9f 08       	sbc	r9, r15
      8c:	a5 08       	sbc	r10, r5
      8e:	ab 08       	sbc	r10, r11
      90:	b1 08       	sbc	r11, r1
      92:	b7 08       	sbc	r11, r7
      94:	bd 08       	sbc	r11, r13
      96:	c3 08       	sbc	r12, r3
      98:	c9 08       	sbc	r12, r9
      9a:	cf 08       	sbc	r12, r15
      9c:	d5 08       	sbc	r13, r5
      9e:	db 08       	sbc	r13, r11
      a0:	e1 08       	sbc	r14, r1
      a2:	e7 08       	sbc	r14, r7
      a4:	ed 08       	sbc	r14, r13

000000a6 <CHARSET>:
      a6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      b6:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      c6:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      d6:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      e6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      f6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     106:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     116:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     126:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     136:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     146:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     156:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     166:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     176:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     186:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     196:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1a6:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1b6:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1c6:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1d6:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1e6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1f6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     206:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     216:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     226:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     236:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     246:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     256:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     266:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     276:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000286 <__ctors_end>:
     286:	11 24       	eor	r1, r1
     288:	1f be       	out	0x3f, r1	; 63
     28a:	cf ef       	ldi	r28, 0xFF	; 255
     28c:	d8 e0       	ldi	r29, 0x08	; 8
     28e:	de bf       	out	0x3e, r29	; 62
     290:	cd bf       	out	0x3d, r28	; 61

00000292 <__do_copy_data>:
     292:	11 e0       	ldi	r17, 0x01	; 1
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	e6 eb       	ldi	r30, 0xB6	; 182
     29a:	f5 e1       	ldi	r31, 0x15	; 21
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x10>
     29e:	05 90       	lpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a8 36       	cpi	r26, 0x68	; 104
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0xc>

000002a8 <__do_clear_bss>:
     2a8:	23 e0       	ldi	r18, 0x03	; 3
     2aa:	a8 e6       	ldi	r26, 0x68	; 104
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	a2 36       	cpi	r26, 0x62	; 98
     2b4:	b2 07       	cpc	r27, r18
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <main>
     2bc:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <_exit>

000002c0 <__bad_interrupt>:
     2c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c4 <__vector_1>:
void showResp2 (uint8_t );

uint8_t FreqRespiracao = 5; // Definir um valor inicial

ISR(INT0_vect) //interrupção externa 0, quando o botão é pressionado, a freq aumenta
{
     2c4:	1f 92       	push	r1
     2c6:	0f 92       	push	r0
     2c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	2e 97       	sbiw	r28, 0x0e	; 14
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61
	if (FreqRespiracao < 30)
     2f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2fa:	8e 31       	cpi	r24, 0x1E	; 30
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__vector_1+0x3c>
     2fe:	8b c0       	rjmp	.+278    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     300:	7f c0       	rjmp	.+254    	; 0x400 <__EEPROM_REGION_LENGTH__>
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	a8 e4       	ldi	r26, 0x48	; 72
     308:	b3 e4       	ldi	r27, 0x43	; 67
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	ab 83       	std	Y+3, r26	; 0x03
     310:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	4a e7       	ldi	r20, 0x7A	; 122
     318:	55 e4       	ldi	r21, 0x45	; 69
     31a:	69 81       	ldd	r22, Y+1	; 0x01
     31c:	7a 81       	ldd	r23, Y+2	; 0x02
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	8d 83       	std	Y+5, r24	; 0x05
     32c:	9e 83       	std	Y+6, r25	; 0x06
     32e:	af 83       	std	Y+7, r26	; 0x07
     330:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e8       	ldi	r20, 0x80	; 128
     338:	5f e3       	ldi	r21, 0x3F	; 63
     33a:	6d 81       	ldd	r22, Y+5	; 0x05
     33c:	7e 81       	ldd	r23, Y+6	; 0x06
     33e:	8f 81       	ldd	r24, Y+7	; 0x07
     340:	98 85       	ldd	r25, Y+8	; 0x08
     342:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     346:	88 23       	and	r24, r24
     348:	2c f4       	brge	.+10     	; 0x354 <__vector_1+0x90>
		__ticks = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	3f c0       	rjmp	.+126    	; 0x3d2 <__vector_1+0x10e>
	else if (__tmp > 65535)
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	3f ef       	ldi	r19, 0xFF	; 255
     358:	4f e7       	ldi	r20, 0x7F	; 127
     35a:	57 e4       	ldi	r21, 0x47	; 71
     35c:	6d 81       	ldd	r22, Y+5	; 0x05
     35e:	7e 81       	ldd	r23, Y+6	; 0x06
     360:	8f 81       	ldd	r24, Y+7	; 0x07
     362:	98 85       	ldd	r25, Y+8	; 0x08
     364:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     368:	18 16       	cp	r1, r24
     36a:	4c f5       	brge	.+82     	; 0x3be <__vector_1+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e2       	ldi	r20, 0x20	; 32
     372:	51 e4       	ldi	r21, 0x41	; 65
     374:	69 81       	ldd	r22, Y+1	; 0x01
     376:	7a 81       	ldd	r23, Y+2	; 0x02
     378:	8b 81       	ldd	r24, Y+3	; 0x03
     37a:	9c 81       	ldd	r25, Y+4	; 0x04
     37c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     380:	dc 01       	movw	r26, r24
     382:	cb 01       	movw	r24, r22
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	9a 87       	std	Y+10, r25	; 0x0a
     392:	89 87       	std	Y+9, r24	; 0x09
     394:	0f c0       	rjmp	.+30     	; 0x3b4 <__vector_1+0xf0>
     396:	80 e9       	ldi	r24, 0x90	; 144
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	9c 87       	std	Y+12, r25	; 0x0c
     39c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     39e:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	f1 f7       	brne	.-4      	; 0x3a2 <__vector_1+0xde>
     3a6:	9c 87       	std	Y+12, r25	; 0x0c
     3a8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3aa:	89 85       	ldd	r24, Y+9	; 0x09
     3ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	9a 87       	std	Y+10, r25	; 0x0a
     3b2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	89 85       	ldd	r24, Y+9	; 0x09
     3b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b8:	89 2b       	or	r24, r25
     3ba:	69 f7       	brne	.-38     	; 0x396 <__vector_1+0xd2>
     3bc:	14 c0       	rjmp	.+40     	; 0x3e6 <__vector_1+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3be:	6d 81       	ldd	r22, Y+5	; 0x05
     3c0:	7e 81       	ldd	r23, Y+6	; 0x06
     3c2:	8f 81       	ldd	r24, Y+7	; 0x07
     3c4:	98 85       	ldd	r25, Y+8	; 0x08
     3c6:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	9a 87       	std	Y+10, r25	; 0x0a
     3d0:	89 87       	std	Y+9, r24	; 0x09
     3d2:	89 85       	ldd	r24, Y+9	; 0x09
     3d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3d6:	9e 87       	std	Y+14, r25	; 0x0e
     3d8:	8d 87       	std	Y+13, r24	; 0x0d
     3da:	8d 85       	ldd	r24, Y+13	; 0x0d
     3dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <__vector_1+0x11a>
     3e2:	9e 87       	std	Y+14, r25	; 0x0e
     3e4:	8d 87       	std	Y+13, r24	; 0x0d
		{
			_delay_ms(200);
			if (FreqRespiracao < 30)
     3e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3ea:	8e 31       	cpi	r24, 0x1E	; 30
     3ec:	28 f4       	brcc	.+10     	; 0x3f8 <__vector_1+0x134>
				FreqRespiracao++;
     3ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			showResp2(FreqRespiracao);
     3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3fc:	0e 94 8f 04 	call	0x91e	; 0x91e <showResp2>

ISR(INT0_vect) //interrupção externa 0, quando o botão é pressionado, a freq aumenta
{
	if (FreqRespiracao < 30)
	{
		while(!(PIND & (1<<2))) // Garantir que a soma continue, caso o botão se mantenha pressionado
     400:	89 e2       	ldi	r24, 0x29	; 41
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	88 2f       	mov	r24, r24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	84 70       	andi	r24, 0x04	; 4
     40e:	99 27       	eor	r25, r25
     410:	89 2b       	or	r24, r25
     412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	76 cf       	rjmp	.-276    	; 0x302 <__vector_1+0x3e>
			if (FreqRespiracao < 30)
				FreqRespiracao++;
			showResp2(FreqRespiracao);
		}	
	}
}
     416:	00 00       	nop
     418:	2e 96       	adiw	r28, 0x0e	; 14
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_2>:
ISR(INT1_vect) //interrupção externa 1, quando o botão é pressionado, a freq diminui
{
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     454:	0f 92       	push	r0
     456:	11 24       	eor	r1, r1
     458:	2f 93       	push	r18
     45a:	3f 93       	push	r19
     45c:	4f 93       	push	r20
     45e:	5f 93       	push	r21
     460:	6f 93       	push	r22
     462:	7f 93       	push	r23
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	2e 97       	sbiw	r28, 0x0e	; 14
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	cd bf       	out	0x3d, r28	; 61
	if (FreqRespiracao > 5)
     47e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	08 f4       	brcc	.+2      	; 0x488 <__vector_2+0x3c>
     486:	8b c0       	rjmp	.+278    	; 0x59e <__vector_2+0x152>
	{
		while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     488:	7f c0       	rjmp	.+254    	; 0x588 <__vector_2+0x13c>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	a8 e4       	ldi	r26, 0x48	; 72
     490:	b3 e4       	ldi	r27, 0x43	; 67
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	ab 83       	std	Y+3, r26	; 0x03
     498:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	4a e7       	ldi	r20, 0x7A	; 122
     4a0:	55 e4       	ldi	r21, 0x45	; 69
     4a2:	69 81       	ldd	r22, Y+1	; 0x01
     4a4:	7a 81       	ldd	r23, Y+2	; 0x02
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	9c 81       	ldd	r25, Y+4	; 0x04
     4aa:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	8d 83       	std	Y+5, r24	; 0x05
     4b4:	9e 83       	std	Y+6, r25	; 0x06
     4b6:	af 83       	std	Y+7, r26	; 0x07
     4b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e8       	ldi	r20, 0x80	; 128
     4c0:	5f e3       	ldi	r21, 0x3F	; 63
     4c2:	6d 81       	ldd	r22, Y+5	; 0x05
     4c4:	7e 81       	ldd	r23, Y+6	; 0x06
     4c6:	8f 81       	ldd	r24, Y+7	; 0x07
     4c8:	98 85       	ldd	r25, Y+8	; 0x08
     4ca:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     4ce:	88 23       	and	r24, r24
     4d0:	2c f4       	brge	.+10     	; 0x4dc <__vector_2+0x90>
		__ticks = 1;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	9a 87       	std	Y+10, r25	; 0x0a
     4d8:	89 87       	std	Y+9, r24	; 0x09
     4da:	3f c0       	rjmp	.+126    	; 0x55a <__vector_2+0x10e>
	else if (__tmp > 65535)
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	3f ef       	ldi	r19, 0xFF	; 255
     4e0:	4f e7       	ldi	r20, 0x7F	; 127
     4e2:	57 e4       	ldi	r21, 0x47	; 71
     4e4:	6d 81       	ldd	r22, Y+5	; 0x05
     4e6:	7e 81       	ldd	r23, Y+6	; 0x06
     4e8:	8f 81       	ldd	r24, Y+7	; 0x07
     4ea:	98 85       	ldd	r25, Y+8	; 0x08
     4ec:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     4f0:	18 16       	cp	r1, r24
     4f2:	4c f5       	brge	.+82     	; 0x546 <__vector_2+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e2       	ldi	r20, 0x20	; 32
     4fa:	51 e4       	ldi	r21, 0x41	; 65
     4fc:	69 81       	ldd	r22, Y+1	; 0x01
     4fe:	7a 81       	ldd	r23, Y+2	; 0x02
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	9c 81       	ldd	r25, Y+4	; 0x04
     504:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	9a 87       	std	Y+10, r25	; 0x0a
     51a:	89 87       	std	Y+9, r24	; 0x09
     51c:	0f c0       	rjmp	.+30     	; 0x53c <__vector_2+0xf0>
     51e:	80 e9       	ldi	r24, 0x90	; 144
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	8b 87       	std	Y+11, r24	; 0x0b
     526:	8b 85       	ldd	r24, Y+11	; 0x0b
     528:	9c 85       	ldd	r25, Y+12	; 0x0c
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <__vector_2+0xde>
     52e:	9c 87       	std	Y+12, r25	; 0x0c
     530:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     532:	89 85       	ldd	r24, Y+9	; 0x09
     534:	9a 85       	ldd	r25, Y+10	; 0x0a
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	9a 87       	std	Y+10, r25	; 0x0a
     53a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53c:	89 85       	ldd	r24, Y+9	; 0x09
     53e:	9a 85       	ldd	r25, Y+10	; 0x0a
     540:	89 2b       	or	r24, r25
     542:	69 f7       	brne	.-38     	; 0x51e <__vector_2+0xd2>
     544:	14 c0       	rjmp	.+40     	; 0x56e <__vector_2+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     546:	6d 81       	ldd	r22, Y+5	; 0x05
     548:	7e 81       	ldd	r23, Y+6	; 0x06
     54a:	8f 81       	ldd	r24, Y+7	; 0x07
     54c:	98 85       	ldd	r25, Y+8	; 0x08
     54e:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	9a 87       	std	Y+10, r25	; 0x0a
     558:	89 87       	std	Y+9, r24	; 0x09
     55a:	89 85       	ldd	r24, Y+9	; 0x09
     55c:	9a 85       	ldd	r25, Y+10	; 0x0a
     55e:	9e 87       	std	Y+14, r25	; 0x0e
     560:	8d 87       	std	Y+13, r24	; 0x0d
     562:	8d 85       	ldd	r24, Y+13	; 0x0d
     564:	9e 85       	ldd	r25, Y+14	; 0x0e
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <__vector_2+0x11a>
     56a:	9e 87       	std	Y+14, r25	; 0x0e
     56c:	8d 87       	std	Y+13, r24	; 0x0d
		{
			_delay_ms(200);
			if (FreqRespiracao > 5)
     56e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     572:	86 30       	cpi	r24, 0x06	; 6
     574:	28 f0       	brcs	.+10     	; 0x580 <__vector_2+0x134>
				FreqRespiracao--;
     576:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			showResp2(FreqRespiracao);		
     580:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     584:	0e 94 8f 04 	call	0x91e	; 0x91e <showResp2>
}
ISR(INT1_vect) //interrupção externa 1, quando o botão é pressionado, a freq diminui
{
	if (FreqRespiracao > 5)
	{
		while(!(PIND & (1<<3))) // Garantir que a subtração continue, caso o botão se mantenha pressionado
     588:	89 e2       	ldi	r24, 0x29	; 41
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	88 70       	andi	r24, 0x08	; 8
     596:	99 27       	eor	r25, r25
     598:	89 2b       	or	r24, r25
     59a:	09 f4       	brne	.+2      	; 0x59e <__vector_2+0x152>
     59c:	76 cf       	rjmp	.-276    	; 0x48a <__vector_2+0x3e>
			if (FreqRespiracao > 5)
				FreqRespiracao--;
			showResp2(FreqRespiracao);		
		}	
	}
}
     59e:	00 00       	nop
     5a0:	2e 96       	adiw	r28, 0x0e	; 14
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     5ce:	0f 90       	pop	r0
     5d0:	1f 90       	pop	r1
     5d2:	18 95       	reti

000005d4 <main>:

int main(void)
{	
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	DDRD &= 0b00000; // PD0..4 = ENTRADA - alt. 0x00 sem &
     5dc:	8a e2       	ldi	r24, 0x2A	; 42
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	80 81       	ld	r24, Z
     5e4:	8a e2       	ldi	r24, 0x2A	; 42
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	fc 01       	movw	r30, r24
     5ea:	10 82       	st	Z, r1
	PORTD |= 0b11111; // Habilita os resistores de pull-up das portas PD0..4 - alt. 0xFF sem |
     5ec:	8b e2       	ldi	r24, 0x2B	; 43
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	2b e2       	ldi	r18, 0x2B	; 43
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	20 81       	ld	r18, Z
     5f8:	2f 61       	ori	r18, 0x1F	; 31
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
	DDRB |= 0b11111111; // PB0..7 = SAÍDA
     5fe:	84 e2       	ldi	r24, 0x24	; 36
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	84 e2       	ldi	r24, 0x24	; 36
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	2f ef       	ldi	r18, 0xFF	; 255
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
	
	// Configuração das interrupções
	EICRA = 0b00001010;// interrupções externas INT0 e INT1 na borda de descida
     610:	89 e6       	ldi	r24, 0x69	; 105
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	2a e0       	ldi	r18, 0x0A	; 10
     616:	fc 01       	movw	r30, r24
     618:	20 83       	st	Z, r18
	EIMSK = 0b00000011;// habilita as interrupções externas INT0 e INT1
     61a:	8d e3       	ldi	r24, 0x3D	; 61
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	23 e0       	ldi	r18, 0x03	; 3
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
	sei();// habilita interrupções globais, ativando o bit I do SREG
     624:	78 94       	sei
	
	while
	(1)
	{
		showResp2(FreqRespiracao);
     626:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     62a:	0e 94 8f 04 	call	0x91e	; 0x91e <showResp2>
		controlLED2(&FreqRespiracao);		
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 1c 03 	call	0x638	; 0x638 <controlLED2>
	}
     636:	f7 cf       	rjmp	.-18     	; 0x626 <main+0x52>

00000638 <controlLED2>:
}

void controlLED2 (uint8_t *freq)
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	a2 97       	sbiw	r28, 0x22	; 34
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	9a a3       	std	Y+34, r25	; 0x22
     64e:	89 a3       	std	Y+33, r24	; 0x21
	for (int i = 0; i <= 7; i++)
     650:	1a 82       	std	Y+2, r1	; 0x02
     652:	19 82       	std	Y+1, r1	; 0x01
     654:	a5 c0       	rjmp	.+330    	; 0x7a0 <controlLED2+0x168>
	{
		PORTB |= 1<<i;
     656:	85 e2       	ldi	r24, 0x25	; 37
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	25 e2       	ldi	r18, 0x25	; 37
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	f9 01       	movw	r30, r18
     660:	20 81       	ld	r18, Z
     662:	42 2f       	mov	r20, r18
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	09 80       	ldd	r0, Y+1	; 0x01
     66a:	02 c0       	rjmp	.+4      	; 0x670 <controlLED2+0x38>
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <controlLED2+0x34>
     674:	24 2b       	or	r18, r20
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
		_delay_ms(60000/((*freq)*16));
     67a:	89 a1       	ldd	r24, Y+33	; 0x21
     67c:	9a a1       	ldd	r25, Y+34	; 0x22
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	82 95       	swap	r24
     688:	92 95       	swap	r25
     68a:	90 7f       	andi	r25, 0xF0	; 240
     68c:	98 27       	eor	r25, r24
     68e:	80 7f       	andi	r24, 0xF0	; 240
     690:	98 27       	eor	r25, r24
     692:	9c 01       	movw	r18, r24
     694:	99 0f       	add	r25, r25
     696:	44 0b       	sbc	r20, r20
     698:	55 0b       	sbc	r21, r21
     69a:	80 e6       	ldi	r24, 0x60	; 96
     69c:	9a ee       	ldi	r25, 0xEA	; 234
     69e:	a0 e0       	ldi	r26, 0x00	; 0
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	bc 01       	movw	r22, r24
     6a4:	cd 01       	movw	r24, r26
     6a6:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divmodsi4>
     6aa:	da 01       	movw	r26, r20
     6ac:	c9 01       	movw	r24, r18
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	89 87       	std	Y+9, r24	; 0x09
     6bc:	9a 87       	std	Y+10, r25	; 0x0a
     6be:	ab 87       	std	Y+11, r26	; 0x0b
     6c0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	4a e7       	ldi	r20, 0x7A	; 122
     6c8:	55 e4       	ldi	r21, 0x45	; 69
     6ca:	69 85       	ldd	r22, Y+9	; 0x09
     6cc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d2:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	8d 87       	std	Y+13, r24	; 0x0d
     6dc:	9e 87       	std	Y+14, r25	; 0x0e
     6de:	af 87       	std	Y+15, r26	; 0x0f
     6e0:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ec:	7e 85       	ldd	r23, Y+14	; 0x0e
     6ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f0:	98 89       	ldd	r25, Y+16	; 0x10
     6f2:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     6f6:	88 23       	and	r24, r24
     6f8:	2c f4       	brge	.+10     	; 0x704 <controlLED2+0xcc>
		__ticks = 1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	9a 8b       	std	Y+18, r25	; 0x12
     700:	89 8b       	std	Y+17, r24	; 0x11
     702:	3f c0       	rjmp	.+126    	; 0x782 <controlLED2+0x14a>
	else if (__tmp > 65535)
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	3f ef       	ldi	r19, 0xFF	; 255
     708:	4f e7       	ldi	r20, 0x7F	; 127
     70a:	57 e4       	ldi	r21, 0x47	; 71
     70c:	6d 85       	ldd	r22, Y+13	; 0x0d
     70e:	7e 85       	ldd	r23, Y+14	; 0x0e
     710:	8f 85       	ldd	r24, Y+15	; 0x0f
     712:	98 89       	ldd	r25, Y+16	; 0x10
     714:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     718:	18 16       	cp	r1, r24
     71a:	4c f5       	brge	.+82     	; 0x76e <controlLED2+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e2       	ldi	r20, 0x20	; 32
     722:	51 e4       	ldi	r21, 0x41	; 65
     724:	69 85       	ldd	r22, Y+9	; 0x09
     726:	7a 85       	ldd	r23, Y+10	; 0x0a
     728:	8b 85       	ldd	r24, Y+11	; 0x0b
     72a:	9c 85       	ldd	r25, Y+12	; 0x0c
     72c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	bc 01       	movw	r22, r24
     736:	cd 01       	movw	r24, r26
     738:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	9a 8b       	std	Y+18, r25	; 0x12
     742:	89 8b       	std	Y+17, r24	; 0x11
     744:	0f c0       	rjmp	.+30     	; 0x764 <controlLED2+0x12c>
     746:	80 e9       	ldi	r24, 0x90	; 144
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9c 8b       	std	Y+20, r25	; 0x14
     74c:	8b 8b       	std	Y+19, r24	; 0x13
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <controlLED2+0x11a>
     756:	9c 8b       	std	Y+20, r25	; 0x14
     758:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75a:	89 89       	ldd	r24, Y+17	; 0x11
     75c:	9a 89       	ldd	r25, Y+18	; 0x12
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	9a 8b       	std	Y+18, r25	; 0x12
     762:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     764:	89 89       	ldd	r24, Y+17	; 0x11
     766:	9a 89       	ldd	r25, Y+18	; 0x12
     768:	89 2b       	or	r24, r25
     76a:	69 f7       	brne	.-38     	; 0x746 <controlLED2+0x10e>
     76c:	14 c0       	rjmp	.+40     	; 0x796 <controlLED2+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76e:	6d 85       	ldd	r22, Y+13	; 0x0d
     770:	7e 85       	ldd	r23, Y+14	; 0x0e
     772:	8f 85       	ldd	r24, Y+15	; 0x0f
     774:	98 89       	ldd	r25, Y+16	; 0x10
     776:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	9a 8b       	std	Y+18, r25	; 0x12
     780:	89 8b       	std	Y+17, r24	; 0x11
     782:	89 89       	ldd	r24, Y+17	; 0x11
     784:	9a 89       	ldd	r25, Y+18	; 0x12
     786:	9e 8b       	std	Y+22, r25	; 0x16
     788:	8d 8b       	std	Y+21, r24	; 0x15
     78a:	8d 89       	ldd	r24, Y+21	; 0x15
     78c:	9e 89       	ldd	r25, Y+22	; 0x16
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <controlLED2+0x156>
     792:	9e 8b       	std	Y+22, r25	; 0x16
     794:	8d 8b       	std	Y+21, r24	; 0x15
	}
}

void controlLED2 (uint8_t *freq)
{
	for (int i = 0; i <= 7; i++)
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	08 97       	sbiw	r24, 0x08	; 8
     7a6:	0c f4       	brge	.+2      	; 0x7aa <controlLED2+0x172>
     7a8:	56 cf       	rjmp	.-340    	; 0x656 <controlLED2+0x1e>
	{
		PORTB |= 1<<i;
		_delay_ms(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
     7aa:	87 e0       	ldi	r24, 0x07	; 7
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	9c 83       	std	Y+4, r25	; 0x04
     7b0:	8b 83       	std	Y+3, r24	; 0x03
     7b2:	a6 c0       	rjmp	.+332    	; 0x900 <__stack+0x1>
	{
		PORTB &= ~(1<<j);
     7b4:	85 e2       	ldi	r24, 0x25	; 37
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	25 e2       	ldi	r18, 0x25	; 37
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	42 2f       	mov	r20, r18
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	0b 80       	ldd	r0, Y+3	; 0x03
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <controlLED2+0x196>
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	0a 94       	dec	r0
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <controlLED2+0x192>
     7d2:	20 95       	com	r18
     7d4:	24 23       	and	r18, r20
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
		_delay_ms(60000/((*freq)*16));
     7da:	89 a1       	ldd	r24, Y+33	; 0x21
     7dc:	9a a1       	ldd	r25, Y+34	; 0x22
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	82 95       	swap	r24
     7e8:	92 95       	swap	r25
     7ea:	90 7f       	andi	r25, 0xF0	; 240
     7ec:	98 27       	eor	r25, r24
     7ee:	80 7f       	andi	r24, 0xF0	; 240
     7f0:	98 27       	eor	r25, r24
     7f2:	9c 01       	movw	r18, r24
     7f4:	99 0f       	add	r25, r25
     7f6:	44 0b       	sbc	r20, r20
     7f8:	55 0b       	sbc	r21, r21
     7fa:	80 e6       	ldi	r24, 0x60	; 96
     7fc:	9a ee       	ldi	r25, 0xEA	; 234
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	bc 01       	movw	r22, r24
     804:	cd 01       	movw	r24, r26
     806:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divmodsi4>
     80a:	da 01       	movw	r26, r20
     80c:	c9 01       	movw	r24, r18
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__floatsisf>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	8d 83       	std	Y+5, r24	; 0x05
     81c:	9e 83       	std	Y+6, r25	; 0x06
     81e:	af 83       	std	Y+7, r26	; 0x07
     820:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	4a e7       	ldi	r20, 0x7A	; 122
     828:	55 e4       	ldi	r21, 0x45	; 69
     82a:	6d 81       	ldd	r22, Y+5	; 0x05
     82c:	7e 81       	ldd	r23, Y+6	; 0x06
     82e:	8f 81       	ldd	r24, Y+7	; 0x07
     830:	98 85       	ldd	r25, Y+8	; 0x08
     832:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	8f 8b       	std	Y+23, r24	; 0x17
     83c:	98 8f       	std	Y+24, r25	; 0x18
     83e:	a9 8f       	std	Y+25, r26	; 0x19
     840:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e8       	ldi	r20, 0x80	; 128
     848:	5f e3       	ldi	r21, 0x3F	; 63
     84a:	6f 89       	ldd	r22, Y+23	; 0x17
     84c:	78 8d       	ldd	r23, Y+24	; 0x18
     84e:	89 8d       	ldd	r24, Y+25	; 0x19
     850:	9a 8d       	ldd	r25, Y+26	; 0x1a
     852:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     856:	88 23       	and	r24, r24
     858:	2c f4       	brge	.+10     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
		__ticks = 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	9c 8f       	std	Y+28, r25	; 0x1c
     860:	8b 8f       	std	Y+27, r24	; 0x1b
     862:	3f c0       	rjmp	.+126    	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
	else if (__tmp > 65535)
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	3f ef       	ldi	r19, 0xFF	; 255
     868:	4f e7       	ldi	r20, 0x7F	; 127
     86a:	57 e4       	ldi	r21, 0x47	; 71
     86c:	6f 89       	ldd	r22, Y+23	; 0x17
     86e:	78 8d       	ldd	r23, Y+24	; 0x18
     870:	89 8d       	ldd	r24, Y+25	; 0x19
     872:	9a 8d       	ldd	r25, Y+26	; 0x1a
     874:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     878:	18 16       	cp	r1, r24
     87a:	4c f5       	brge	.+82     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	6d 81       	ldd	r22, Y+5	; 0x05
     886:	7e 81       	ldd	r23, Y+6	; 0x06
     888:	8f 81       	ldd	r24, Y+7	; 0x07
     88a:	98 85       	ldd	r25, Y+8	; 0x08
     88c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	9c 8f       	std	Y+28, r25	; 0x1c
     8a2:	8b 8f       	std	Y+27, r24	; 0x1b
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
     8a6:	80 e9       	ldi	r24, 0x90	; 144
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	9e 8f       	std	Y+30, r25	; 0x1e
     8ac:	8d 8f       	std	Y+29, r24	; 0x1d
     8ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
     8b6:	9e 8f       	std	Y+30, r25	; 0x1e
     8b8:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	9c 8f       	std	Y+28, r25	; 0x1c
     8c2:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8c8:	89 2b       	or	r24, r25
     8ca:	69 f7       	brne	.-38     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8cc:	14 c0       	rjmp	.+40     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ce:	6f 89       	ldd	r22, Y+23	; 0x17
     8d0:	78 8d       	ldd	r23, Y+24	; 0x18
     8d2:	89 8d       	ldd	r24, Y+25	; 0x19
     8d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8d6:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	9c 8f       	std	Y+28, r25	; 0x1c
     8e0:	8b 8f       	std	Y+27, r24	; 0x1b
     8e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8e6:	98 a3       	std	Y+32, r25	; 0x20
     8e8:	8f 8f       	std	Y+31, r24	; 0x1f
     8ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ec:	98 a1       	ldd	r25, Y+32	; 0x20
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
     8f2:	98 a3       	std	Y+32, r25	; 0x20
     8f4:	8f 8f       	std	Y+31, r24	; 0x1f
	for (int i = 0; i <= 7; i++)
	{
		PORTB |= 1<<i;
		_delay_ms(60000/((*freq)*16));
	}
	for (int j = 7; j >= 0; j--)
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	9c 81       	ldd	r25, Y+4	; 0x04
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	9c 83       	std	Y+4, r25	; 0x04
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	99 23       	and	r25, r25
     906:	0c f0       	brlt	.+2      	; 0x90a <__stack+0xb>
     908:	55 cf       	rjmp	.-342    	; 0x7b4 <controlLED2+0x17c>
	{
		PORTB &= ~(1<<j);
		_delay_ms(60000/((*freq)*16));
	}
}
     90a:	00 00       	nop
     90c:	a2 96       	adiw	r28, 0x22	; 34
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <showResp2>:
void showResp2(uint8_t resp)
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	1f 92       	push	r1
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	89 83       	std	Y+1, r24	; 0x01
	nokia_lcd_init(); // Inicia o LCD
     92a:	0e 94 46 05 	call	0xa8c	; 0xa8c <nokia_lcd_init>
	nokia_lcd_clear(); // Limpa o LCD
     92e:	0e 94 c6 06 	call	0xd8c	; 0xd8c <nokia_lcd_clear>
	nokia_lcd_set_cursor(0, 10); // Muda o cursor para a posição 0,10 ou seja, pula uma linha
     932:	6a e0       	ldi	r22, 0x0A	; 10
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <nokia_lcd_set_cursor>
	nokia_lcd_write_num(resp, 4); // Escreve uma variável de tamanho 4
     93a:	64 e0       	ldi	r22, 0x04	; 4
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	0e 94 1c 08 	call	0x1038	; 0x1038 <nokia_lcd_write_num>
	nokia_lcd_set_cursor(30, 40); // Muda o cursor para a posição 30,40
     942:	68 e2       	ldi	r22, 0x28	; 40
     944:	8e e1       	ldi	r24, 0x1E	; 30
     946:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <nokia_lcd_set_cursor>
	nokia_lcd_write_string("resp/min", 1);// Escreve um texto do tamanho 1
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
     954:	0e 94 0c 09 	call	0x1218	; 0x1218 <nokia_lcd_render>
     958:	00 00       	nop
     95a:	0f 90       	pop	r0
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <write+0x8>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	6a 83       	std	Y+2, r22	; 0x02
     972:	88 e2       	ldi	r24, 0x28	; 40
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	28 e2       	ldi	r18, 0x28	; 40
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	2d 7f       	andi	r18, 0xFD	; 253
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	88 23       	and	r24, r24
     988:	51 f0       	breq	.+20     	; 0x99e <write+0x3c>
     98a:	88 e2       	ldi	r24, 0x28	; 40
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	28 e2       	ldi	r18, 0x28	; 40
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	28 60       	ori	r18, 0x08	; 8
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <write+0x4e>
     99e:	88 e2       	ldi	r24, 0x28	; 40
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	28 e2       	ldi	r18, 0x28	; 40
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	27 7f       	andi	r18, 0xF7	; 247
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	3c c0       	rjmp	.+120    	; 0xa2c <write+0xca>
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	88 2f       	mov	r24, r24
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	21 2f       	mov	r18, r17
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	47 e0       	ldi	r20, 0x07	; 7
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	ba 01       	movw	r22, r20
     9c4:	62 1b       	sub	r22, r18
     9c6:	73 0b       	sbc	r23, r19
     9c8:	9b 01       	movw	r18, r22
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <write+0x6e>
     9cc:	95 95       	asr	r25
     9ce:	87 95       	ror	r24
     9d0:	2a 95       	dec	r18
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <write+0x6a>
     9d4:	81 70       	andi	r24, 0x01	; 1
     9d6:	99 27       	eor	r25, r25
     9d8:	89 2b       	or	r24, r25
     9da:	51 f0       	breq	.+20     	; 0x9f0 <write+0x8e>
     9dc:	88 e2       	ldi	r24, 0x28	; 40
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	28 e2       	ldi	r18, 0x28	; 40
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	20 61       	ori	r18, 0x10	; 16
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <write+0xa0>
     9f0:	88 e2       	ldi	r24, 0x28	; 40
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	28 e2       	ldi	r18, 0x28	; 40
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	f9 01       	movw	r30, r18
     9fa:	20 81       	ld	r18, Z
     9fc:	2f 7e       	andi	r18, 0xEF	; 239
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
     a02:	88 e2       	ldi	r24, 0x28	; 40
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	28 e2       	ldi	r18, 0x28	; 40
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	20 62       	ori	r18, 0x20	; 32
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	88 e2       	ldi	r24, 0x28	; 40
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	28 e2       	ldi	r18, 0x28	; 40
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	f9 01       	movw	r30, r18
     a1e:	20 81       	ld	r18, Z
     a20:	2f 7d       	andi	r18, 0xDF	; 223
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
     a26:	81 2f       	mov	r24, r17
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	18 0f       	add	r17, r24
     a2c:	18 30       	cpi	r17, 0x08	; 8
     a2e:	10 f2       	brcs	.-124    	; 0x9b4 <write+0x52>
     a30:	88 e2       	ldi	r24, 0x28	; 40
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	28 e2       	ldi	r18, 0x28	; 40
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	22 60       	ori	r18, 0x02	; 2
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	00 00       	nop
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	08 95       	ret

00000a50 <write_cmd>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	1f 92       	push	r1
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	0e 94 b1 04 	call	0x962	; 0x962 <write>
     a64:	00 00       	nop
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <write_data>:
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	89 83       	std	Y+1, r24	; 0x01
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	0e 94 b1 04 	call	0x962	; 0x962 <write>
     a82:	00 00       	nop
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <nokia_lcd_init>:
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	6c 97       	sbiw	r28, 0x1c	; 28
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	87 e2       	ldi	r24, 0x27	; 39
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	27 e2       	ldi	r18, 0x27	; 39
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	f9 01       	movw	r30, r18
     aae:	20 81       	ld	r18, Z
     ab0:	22 60       	ori	r18, 0x02	; 2
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
     ab6:	87 e2       	ldi	r24, 0x27	; 39
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	27 e2       	ldi	r18, 0x27	; 39
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	f9 01       	movw	r30, r18
     ac0:	20 81       	ld	r18, Z
     ac2:	24 60       	ori	r18, 0x04	; 4
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
     ac8:	87 e2       	ldi	r24, 0x27	; 39
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	27 e2       	ldi	r18, 0x27	; 39
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	f9 01       	movw	r30, r18
     ad2:	20 81       	ld	r18, Z
     ad4:	28 60       	ori	r18, 0x08	; 8
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
     ada:	87 e2       	ldi	r24, 0x27	; 39
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	27 e2       	ldi	r18, 0x27	; 39
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	20 61       	ori	r18, 0x10	; 16
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
     aec:	87 e2       	ldi	r24, 0x27	; 39
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	27 e2       	ldi	r18, 0x27	; 39
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	20 62       	ori	r18, 0x20	; 32
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
     afe:	88 e2       	ldi	r24, 0x28	; 40
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	28 e2       	ldi	r18, 0x28	; 40
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	f9 01       	movw	r30, r18
     b08:	20 81       	ld	r18, Z
     b0a:	24 60       	ori	r18, 0x04	; 4
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
     b10:	88 e2       	ldi	r24, 0x28	; 40
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	28 e2       	ldi	r18, 0x28	; 40
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	20 81       	ld	r18, Z
     b1c:	22 60       	ori	r18, 0x02	; 2
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	a0 e2       	ldi	r26, 0x20	; 32
     b28:	b1 e4       	ldi	r27, 0x41	; 65
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	9a 83       	std	Y+2, r25	; 0x02
     b2e:	ab 83       	std	Y+3, r26	; 0x03
     b30:	bc 83       	std	Y+4, r27	; 0x04
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	4a e7       	ldi	r20, 0x7A	; 122
     b38:	53 e4       	ldi	r21, 0x43	; 67
     b3a:	69 81       	ldd	r22, Y+1	; 0x01
     b3c:	7a 81       	ldd	r23, Y+2	; 0x02
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	9c 81       	ldd	r25, Y+4	; 0x04
     b42:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	8b 8b       	std	Y+19, r24	; 0x13
     b4c:	9c 8b       	std	Y+20, r25	; 0x14
     b4e:	ad 8b       	std	Y+21, r26	; 0x15
     b50:	be 8b       	std	Y+22, r27	; 0x16
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e8       	ldi	r20, 0x80	; 128
     b58:	5f e3       	ldi	r21, 0x3F	; 63
     b5a:	6b 89       	ldd	r22, Y+19	; 0x13
     b5c:	7c 89       	ldd	r23, Y+20	; 0x14
     b5e:	8d 89       	ldd	r24, Y+21	; 0x15
     b60:	9e 89       	ldd	r25, Y+22	; 0x16
     b62:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     b66:	88 23       	and	r24, r24
     b68:	2c f4       	brge	.+10     	; 0xb74 <nokia_lcd_init+0xe8>
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	98 8f       	std	Y+24, r25	; 0x18
     b70:	8f 8b       	std	Y+23, r24	; 0x17
     b72:	3f c0       	rjmp	.+126    	; 0xbf2 <nokia_lcd_init+0x166>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	3f ef       	ldi	r19, 0xFF	; 255
     b78:	4f e7       	ldi	r20, 0x7F	; 127
     b7a:	57 e4       	ldi	r21, 0x47	; 71
     b7c:	6b 89       	ldd	r22, Y+19	; 0x13
     b7e:	7c 89       	ldd	r23, Y+20	; 0x14
     b80:	8d 89       	ldd	r24, Y+21	; 0x15
     b82:	9e 89       	ldd	r25, Y+22	; 0x16
     b84:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     b88:	18 16       	cp	r1, r24
     b8a:	4c f5       	brge	.+82     	; 0xbde <nokia_lcd_init+0x152>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e2       	ldi	r20, 0x20	; 32
     b92:	51 e4       	ldi	r21, 0x41	; 65
     b94:	69 81       	ldd	r22, Y+1	; 0x01
     b96:	7a 81       	ldd	r23, Y+2	; 0x02
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	9c 81       	ldd	r25, Y+4	; 0x04
     b9c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	98 8f       	std	Y+24, r25	; 0x18
     bb2:	8f 8b       	std	Y+23, r24	; 0x17
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <nokia_lcd_init+0x148>
     bb6:	89 e1       	ldi	r24, 0x19	; 25
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	9a 8f       	std	Y+26, r25	; 0x1a
     bbc:	89 8f       	std	Y+25, r24	; 0x19
     bbe:	89 8d       	ldd	r24, Y+25	; 0x19
     bc0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <nokia_lcd_init+0x136>
     bc6:	9a 8f       	std	Y+26, r25	; 0x1a
     bc8:	89 8f       	std	Y+25, r24	; 0x19
     bca:	8f 89       	ldd	r24, Y+23	; 0x17
     bcc:	98 8d       	ldd	r25, Y+24	; 0x18
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	98 8f       	std	Y+24, r25	; 0x18
     bd2:	8f 8b       	std	Y+23, r24	; 0x17
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	89 2b       	or	r24, r25
     bda:	69 f7       	brne	.-38     	; 0xbb6 <nokia_lcd_init+0x12a>
     bdc:	14 c0       	rjmp	.+40     	; 0xc06 <nokia_lcd_init+0x17a>
     bde:	6b 89       	ldd	r22, Y+19	; 0x13
     be0:	7c 89       	ldd	r23, Y+20	; 0x14
     be2:	8d 89       	ldd	r24, Y+21	; 0x15
     be4:	9e 89       	ldd	r25, Y+22	; 0x16
     be6:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     bea:	dc 01       	movw	r26, r24
     bec:	cb 01       	movw	r24, r22
     bee:	98 8f       	std	Y+24, r25	; 0x18
     bf0:	8f 8b       	std	Y+23, r24	; 0x17
     bf2:	8f 89       	ldd	r24, Y+23	; 0x17
     bf4:	98 8d       	ldd	r25, Y+24	; 0x18
     bf6:	9c 8f       	std	Y+28, r25	; 0x1c
     bf8:	8b 8f       	std	Y+27, r24	; 0x1b
     bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <nokia_lcd_init+0x172>
     c02:	9c 8f       	std	Y+28, r25	; 0x1c
     c04:	8b 8f       	std	Y+27, r24	; 0x1b
     c06:	88 e2       	ldi	r24, 0x28	; 40
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	28 e2       	ldi	r18, 0x28	; 40
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	2b 7f       	andi	r18, 0xFB	; 251
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	ac e8       	ldi	r26, 0x8C	; 140
     c1e:	b2 e4       	ldi	r27, 0x42	; 66
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	9e 83       	std	Y+6, r25	; 0x06
     c24:	af 83       	std	Y+7, r26	; 0x07
     c26:	b8 87       	std	Y+8, r27	; 0x08
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	4a e7       	ldi	r20, 0x7A	; 122
     c2e:	53 e4       	ldi	r21, 0x43	; 67
     c30:	6d 81       	ldd	r22, Y+5	; 0x05
     c32:	7e 81       	ldd	r23, Y+6	; 0x06
     c34:	8f 81       	ldd	r24, Y+7	; 0x07
     c36:	98 85       	ldd	r25, Y+8	; 0x08
     c38:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	89 87       	std	Y+9, r24	; 0x09
     c42:	9a 87       	std	Y+10, r25	; 0x0a
     c44:	ab 87       	std	Y+11, r26	; 0x0b
     c46:	bc 87       	std	Y+12, r27	; 0x0c
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	69 85       	ldd	r22, Y+9	; 0x09
     c52:	7a 85       	ldd	r23, Y+10	; 0x0a
     c54:	8b 85       	ldd	r24, Y+11	; 0x0b
     c56:	9c 85       	ldd	r25, Y+12	; 0x0c
     c58:	0e 94 2e 09 	call	0x125c	; 0x125c <__cmpsf2>
     c5c:	88 23       	and	r24, r24
     c5e:	2c f4       	brge	.+10     	; 0xc6a <nokia_lcd_init+0x1de>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	9e 87       	std	Y+14, r25	; 0x0e
     c66:	8d 87       	std	Y+13, r24	; 0x0d
     c68:	3f c0       	rjmp	.+126    	; 0xce8 <nokia_lcd_init+0x25c>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	3f ef       	ldi	r19, 0xFF	; 255
     c6e:	4f e7       	ldi	r20, 0x7F	; 127
     c70:	57 e4       	ldi	r21, 0x47	; 71
     c72:	69 85       	ldd	r22, Y+9	; 0x09
     c74:	7a 85       	ldd	r23, Y+10	; 0x0a
     c76:	8b 85       	ldd	r24, Y+11	; 0x0b
     c78:	9c 85       	ldd	r25, Y+12	; 0x0c
     c7a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__gesf2>
     c7e:	18 16       	cp	r1, r24
     c80:	4c f5       	brge	.+82     	; 0xcd4 <nokia_lcd_init+0x248>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	6d 81       	ldd	r22, Y+5	; 0x05
     c8c:	7e 81       	ldd	r23, Y+6	; 0x06
     c8e:	8f 81       	ldd	r24, Y+7	; 0x07
     c90:	98 85       	ldd	r25, Y+8	; 0x08
     c92:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	9e 87       	std	Y+14, r25	; 0x0e
     ca8:	8d 87       	std	Y+13, r24	; 0x0d
     caa:	0f c0       	rjmp	.+30     	; 0xcca <nokia_lcd_init+0x23e>
     cac:	89 e1       	ldi	r24, 0x19	; 25
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	98 8b       	std	Y+16, r25	; 0x10
     cb2:	8f 87       	std	Y+15, r24	; 0x0f
     cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb6:	98 89       	ldd	r25, Y+16	; 0x10
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <nokia_lcd_init+0x22c>
     cbc:	98 8b       	std	Y+16, r25	; 0x10
     cbe:	8f 87       	std	Y+15, r24	; 0x0f
     cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	9e 87       	std	Y+14, r25	; 0x0e
     cc8:	8d 87       	std	Y+13, r24	; 0x0d
     cca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cce:	89 2b       	or	r24, r25
     cd0:	69 f7       	brne	.-38     	; 0xcac <nokia_lcd_init+0x220>
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <nokia_lcd_init+0x270>
     cd4:	69 85       	ldd	r22, Y+9	; 0x09
     cd6:	7a 85       	ldd	r23, Y+10	; 0x0a
     cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cda:	9c 85       	ldd	r25, Y+12	; 0x0c
     cdc:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9e 87       	std	Y+14, r25	; 0x0e
     ce6:	8d 87       	std	Y+13, r24	; 0x0d
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
     cf0:	89 89       	ldd	r24, Y+17	; 0x11
     cf2:	9a 89       	ldd	r25, Y+18	; 0x12
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <nokia_lcd_init+0x268>
     cf8:	9a 8b       	std	Y+18, r25	; 0x12
     cfa:	89 8b       	std	Y+17, r24	; 0x11
     cfc:	88 e2       	ldi	r24, 0x28	; 40
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	28 e2       	ldi	r18, 0x28	; 40
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	24 60       	ori	r18, 0x04	; 4
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
     d0e:	88 e2       	ldi	r24, 0x28	; 40
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	28 e2       	ldi	r18, 0x28	; 40
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	2d 7f       	andi	r18, 0xFD	; 253
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
     d20:	81 e2       	ldi	r24, 0x21	; 33
     d22:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d26:	83 e1       	ldi	r24, 0x13	; 19
     d28:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d32:	82 ec       	ldi	r24, 0xC2	; 194
     d34:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d38:	80 e2       	ldi	r24, 0x20	; 32
     d3a:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d3e:	89 e0       	ldi	r24, 0x09	; 9
     d40:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d4a:	80 e4       	ldi	r24, 0x40	; 64
     d4c:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d50:	00 e0       	ldi	r16, 0x00	; 0
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <nokia_lcd_init+0x2d4>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 37 05 	call	0xa6e	; 0xa6e <write_data>
     d5c:	0f 5f       	subi	r16, 0xFF	; 255
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	08 3f       	cpi	r16, 0xF8	; 248
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	1f 07       	cpc	r17, r31
     d66:	b8 f3       	brcs	.-18     	; 0xd56 <nokia_lcd_init+0x2ca>
     d68:	88 e0       	ldi	r24, 0x08	; 8
     d6a:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d6e:	8c e0       	ldi	r24, 0x0C	; 12
     d70:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d74:	00 00       	nop
     d76:	6c 96       	adiw	r28, 0x1c	; 28
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <nokia_lcd_clear>:
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	80 e8       	ldi	r24, 0x80	; 128
     d9a:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
     da4:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__data_end+0x1f8>
     da8:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <__data_end+0x1f9>
     dac:	00 e0       	ldi	r16, 0x00	; 0
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <nokia_lcd_clear+0x34>
     db2:	c8 01       	movw	r24, r16
     db4:	88 59       	subi	r24, 0x98	; 152
     db6:	9e 4f       	sbci	r25, 0xFE	; 254
     db8:	fc 01       	movw	r30, r24
     dba:	10 82       	st	Z, r1
     dbc:	0f 5f       	subi	r16, 0xFF	; 255
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	08 3f       	cpi	r16, 0xF8	; 248
     dc2:	f1 e0       	ldi	r31, 0x01	; 1
     dc4:	1f 07       	cpc	r17, r31
     dc6:	a8 f3       	brcs	.-22     	; 0xdb2 <nokia_lcd_clear+0x26>
     dc8:	00 00       	nop
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	00 d0       	rcall	.+0      	; 0xdda <nokia_lcd_set_pixel+0x6>
     dda:	00 d0       	rcall	.+0      	; 0xddc <nokia_lcd_set_pixel+0x8>
     ddc:	1f 92       	push	r1
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	6c 83       	std	Y+4, r22	; 0x04
     de6:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	86 95       	lsr	r24
     dec:	86 95       	lsr	r24
     dee:	86 95       	lsr	r24
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	44 e5       	ldi	r20, 0x54	; 84
     df6:	48 9f       	mul	r20, r24
     df8:	90 01       	movw	r18, r0
     dfa:	49 9f       	mul	r20, r25
     dfc:	30 0d       	add	r19, r0
     dfe:	11 24       	eor	r1, r1
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	88 59       	subi	r24, 0x98	; 152
     e0c:	9e 4f       	sbci	r25, 0xFE	; 254
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01
	if (value)
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	88 23       	and	r24, r24
     e16:	c9 f0       	breq	.+50     	; 0xe4a <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	fc 01       	movw	r30, r24
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9c 01       	movw	r18, r24
     e2a:	27 70       	andi	r18, 0x07	; 7
     e2c:	33 27       	eor	r19, r19
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <nokia_lcd_set_pixel+0x64>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	2a 95       	dec	r18
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <nokia_lcd_set_pixel+0x60>
     e3c:	84 2b       	or	r24, r20
     e3e:	28 2f       	mov	r18, r24
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	fc 01       	movw	r30, r24
     e46:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
     e48:	19 c0       	rjmp	.+50     	; 0xe7c <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9c 01       	movw	r18, r24
     e5c:	27 70       	andi	r18, 0x07	; 7
     e5e:	33 27       	eor	r19, r19
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <nokia_lcd_set_pixel+0x96>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	2a 95       	dec	r18
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <nokia_lcd_set_pixel+0x92>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	28 2f       	mov	r18, r24
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
}
     e7c:	00 00       	nop
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 d0       	rcall	.+0      	; 0xe98 <nokia_lcd_write_char+0xa>
     e98:	00 d0       	rcall	.+0      	; 0xe9a <nokia_lcd_write_char+0xc>
     e9a:	1f 92       	push	r1
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	8c 83       	std	Y+4, r24	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	65 c0       	rjmp	.+202    	; 0xf72 <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
     ea8:	00 e0       	ldi	r16, 0x00	; 0
     eaa:	4e c0       	rjmp	.+156    	; 0xf48 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9c 01       	movw	r18, r24
     eb4:	20 52       	subi	r18, 0x20	; 32
     eb6:	31 09       	sbc	r19, r1
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	81 2f       	mov	r24, r17
     ebc:	69 2f       	mov	r22, r25
     ebe:	0e 94 86 0a 	call	0x150c	; 0x150c <__udivmodqi4>
     ec2:	48 2f       	mov	r20, r24
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	c9 01       	movw	r24, r18
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	82 0f       	add	r24, r18
     ed2:	93 1f       	adc	r25, r19
     ed4:	84 0f       	add	r24, r20
     ed6:	95 1f       	adc	r25, r21
     ed8:	8a 55       	subi	r24, 0x5A	; 90
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	84 91       	lpm	r24, Z
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	80 2f       	mov	r24, r16
     ef4:	69 2f       	mov	r22, r25
     ef6:	0e 94 86 0a 	call	0x150c	; 0x150c <__udivmodqi4>
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a9 01       	movw	r20, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <nokia_lcd_write_char+0x78>
     f02:	55 95       	asr	r21
     f04:	47 95       	ror	r20
     f06:	8a 95       	dec	r24
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <nokia_lcd_write_char+0x74>
     f0a:	ca 01       	movw	r24, r20
     f0c:	81 70       	andi	r24, 0x01	; 1
     f0e:	99 27       	eor	r25, r25
     f10:	89 2b       	or	r24, r25
     f12:	61 f0       	breq	.+24     	; 0xf2c <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     f14:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <__data_end+0x1f9>
     f18:	98 2f       	mov	r25, r24
     f1a:	90 0f       	add	r25, r16
     f1c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__data_end+0x1f8>
     f20:	81 0f       	add	r24, r17
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	69 2f       	mov	r22, r25
     f26:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <nokia_lcd_set_pixel>
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     f2c:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <__data_end+0x1f9>
     f30:	98 2f       	mov	r25, r24
     f32:	90 0f       	add	r25, r16
     f34:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__data_end+0x1f8>
     f38:	81 0f       	add	r24, r17
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	69 2f       	mov	r22, r25
     f3e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     f42:	80 2f       	mov	r24, r16
     f44:	01 e0       	ldi	r16, 0x01	; 1
     f46:	08 0f       	add	r16, r24
     f48:	40 2f       	mov	r20, r16
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	48 17       	cp	r20, r24
     f66:	59 07       	cpc	r21, r25
     f68:	0c f4       	brge	.+2      	; 0xf6c <nokia_lcd_write_char+0xde>
     f6a:	a0 cf       	rjmp	.-192    	; 0xeac <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     f6c:	81 2f       	mov	r24, r17
     f6e:	11 e0       	ldi	r17, 0x01	; 1
     f70:	18 0f       	add	r17, r24
     f72:	41 2f       	mov	r20, r17
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	c9 01       	movw	r24, r18
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	82 0f       	add	r24, r18
     f88:	93 1f       	adc	r25, r19
     f8a:	48 17       	cp	r20, r24
     f8c:	59 07       	cpc	r21, r25
     f8e:	0c f4       	brge	.+2      	; 0xf92 <nokia_lcd_write_char+0x104>
     f90:	8b cf       	rjmp	.-234    	; 0xea8 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     f92:	20 91 60 03 	lds	r18, 0x0360	; 0x800360 <__data_end+0x1f8>
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	89 2f       	mov	r24, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	88 0f       	add	r24, r24
     f9e:	89 0f       	add	r24, r25
     fa0:	82 0f       	add	r24, r18
     fa2:	8f 5f       	subi	r24, 0xFF	; 255
     fa4:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__data_end+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
     fa8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__data_end+0x1f8>
     fac:	84 35       	cpi	r24, 0x54	; 84
     fae:	70 f0       	brcs	.+28     	; 0xfcc <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
     fb0:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__data_end+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     fb4:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <__data_end+0x1f9>
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	89 2f       	mov	r24, r25
     fbc:	88 0f       	add	r24, r24
     fbe:	88 0f       	add	r24, r24
     fc0:	88 0f       	add	r24, r24
     fc2:	89 1b       	sub	r24, r25
     fc4:	82 0f       	add	r24, r18
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <__data_end+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
     fcc:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <__data_end+0x1f9>
     fd0:	80 33       	cpi	r24, 0x30	; 48
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
     fd4:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <__data_end+0x1f8>
		nokia_lcd.cursor_y = 0;
     fd8:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <__data_end+0x1f9>
	}
}
     fdc:	00 00       	nop
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <nokia_lcd_write_string+0x6>
     ff8:	1f 92       	push	r1
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    1004:	0c c0       	rjmp	.+24     	; 0x101e <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	9c 01       	movw	r18, r24
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	3a 83       	std	Y+2, r19	; 0x02
    1012:	29 83       	std	Y+1, r18	; 0x01
    1014:	fc 01       	movw	r30, r24
    1016:	80 81       	ld	r24, Z
    1018:	6b 81       	ldd	r22, Y+3	; 0x03
    101a:	0e 94 47 07 	call	0xe8e	; 0xe8e <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	fc 01       	movw	r30, r24
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	71 f7       	brne	.-36     	; 0x1006 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    102a:	00 00       	nop
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <nokia_lcd_write_num>:

void nokia_lcd_write_num(uint8_t num, uint8_t scale)
{
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	00 d0       	rcall	.+0      	; 0x103e <nokia_lcd_write_num+0x6>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
	switch(num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	09 2e       	mov	r0, r25
    104e:	00 0c       	add	r0, r0
    1050:	aa 0b       	sbc	r26, r26
    1052:	bb 0b       	sbc	r27, r27
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	2e e1       	ldi	r18, 0x1E	; 30
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	84 1b       	sub	r24, r20
    105e:	95 0b       	sbc	r25, r21
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	08 f4       	brcc	.+2      	; 0x1068 <nokia_lcd_write_num+0x30>
    1066:	bf c0       	rjmp	.+382    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
    1068:	8c 5c       	subi	r24, 0xCC	; 204
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	fc 01       	movw	r30, r24
    106e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__tablejump2__>
	{
		{
			case 0:
			nokia_lcd_write_string("00", scale);
    1072:	6a 81       	ldd	r22, Y+2	; 0x02
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    107c:	b4 c0       	rjmp	.+360    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 1:
			nokia_lcd_write_string("01", scale);
    107e:	6a 81       	ldd	r22, Y+2	; 0x02
    1080:	8d e0       	ldi	r24, 0x0D	; 13
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1088:	ae c0       	rjmp	.+348    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 2:
			nokia_lcd_write_string("02", scale);
    108a:	6a 81       	ldd	r22, Y+2	; 0x02
    108c:	80 e1       	ldi	r24, 0x10	; 16
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1094:	a8 c0       	rjmp	.+336    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 3:
			nokia_lcd_write_string("03", scale);
    1096:	6a 81       	ldd	r22, Y+2	; 0x02
    1098:	83 e1       	ldi	r24, 0x13	; 19
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10a0:	a2 c0       	rjmp	.+324    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 4:
			nokia_lcd_write_string("04", scale);
    10a2:	6a 81       	ldd	r22, Y+2	; 0x02
    10a4:	86 e1       	ldi	r24, 0x16	; 22
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10ac:	9c c0       	rjmp	.+312    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 5:
			nokia_lcd_write_string("05", scale);
    10ae:	6a 81       	ldd	r22, Y+2	; 0x02
    10b0:	89 e1       	ldi	r24, 0x19	; 25
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10b8:	96 c0       	rjmp	.+300    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 6:
			nokia_lcd_write_string("06", scale);
    10ba:	6a 81       	ldd	r22, Y+2	; 0x02
    10bc:	8c e1       	ldi	r24, 0x1C	; 28
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10c4:	90 c0       	rjmp	.+288    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 7:
			nokia_lcd_write_string("07", scale);
    10c6:	6a 81       	ldd	r22, Y+2	; 0x02
    10c8:	8f e1       	ldi	r24, 0x1F	; 31
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10d0:	8a c0       	rjmp	.+276    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 8:
			nokia_lcd_write_string("08", scale);
    10d2:	6a 81       	ldd	r22, Y+2	; 0x02
    10d4:	82 e2       	ldi	r24, 0x22	; 34
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10dc:	84 c0       	rjmp	.+264    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 9:
			nokia_lcd_write_string("09", scale);
    10de:	6a 81       	ldd	r22, Y+2	; 0x02
    10e0:	85 e2       	ldi	r24, 0x25	; 37
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10e8:	7e c0       	rjmp	.+252    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 10:
			nokia_lcd_write_string("10", scale);
    10ea:	6a 81       	ldd	r22, Y+2	; 0x02
    10ec:	88 e2       	ldi	r24, 0x28	; 40
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    10f4:	78 c0       	rjmp	.+240    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 11:
			nokia_lcd_write_string("11", scale);
    10f6:	6a 81       	ldd	r22, Y+2	; 0x02
    10f8:	8b e2       	ldi	r24, 0x2B	; 43
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1100:	72 c0       	rjmp	.+228    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 12:
			nokia_lcd_write_string("12", scale);
    1102:	6a 81       	ldd	r22, Y+2	; 0x02
    1104:	8e e2       	ldi	r24, 0x2E	; 46
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    110c:	6c c0       	rjmp	.+216    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 13:
			nokia_lcd_write_string("13", scale);
    110e:	6a 81       	ldd	r22, Y+2	; 0x02
    1110:	81 e3       	ldi	r24, 0x31	; 49
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1118:	66 c0       	rjmp	.+204    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 14:
			nokia_lcd_write_string("14", scale);
    111a:	6a 81       	ldd	r22, Y+2	; 0x02
    111c:	84 e3       	ldi	r24, 0x34	; 52
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1124:	60 c0       	rjmp	.+192    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 15:
			nokia_lcd_write_string("15", scale);
    1126:	6a 81       	ldd	r22, Y+2	; 0x02
    1128:	87 e3       	ldi	r24, 0x37	; 55
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1130:	5a c0       	rjmp	.+180    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 16:
			nokia_lcd_write_string("16", scale);
    1132:	6a 81       	ldd	r22, Y+2	; 0x02
    1134:	8a e3       	ldi	r24, 0x3A	; 58
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    113c:	54 c0       	rjmp	.+168    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 17:
			nokia_lcd_write_string("17", scale);
    113e:	6a 81       	ldd	r22, Y+2	; 0x02
    1140:	8d e3       	ldi	r24, 0x3D	; 61
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1148:	4e c0       	rjmp	.+156    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 18:
			nokia_lcd_write_string("18", scale);
    114a:	6a 81       	ldd	r22, Y+2	; 0x02
    114c:	80 e4       	ldi	r24, 0x40	; 64
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1154:	48 c0       	rjmp	.+144    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 19:
			nokia_lcd_write_string("19", scale);
    1156:	6a 81       	ldd	r22, Y+2	; 0x02
    1158:	83 e4       	ldi	r24, 0x43	; 67
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1160:	42 c0       	rjmp	.+132    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 20:
			nokia_lcd_write_string("20", scale);
    1162:	6a 81       	ldd	r22, Y+2	; 0x02
    1164:	86 e4       	ldi	r24, 0x46	; 70
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    116c:	3c c0       	rjmp	.+120    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 21:
			nokia_lcd_write_string("21", scale);
    116e:	6a 81       	ldd	r22, Y+2	; 0x02
    1170:	89 e4       	ldi	r24, 0x49	; 73
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1178:	36 c0       	rjmp	.+108    	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 22:
			nokia_lcd_write_string("22", scale);
    117a:	6a 81       	ldd	r22, Y+2	; 0x02
    117c:	8c e4       	ldi	r24, 0x4C	; 76
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1184:	30 c0       	rjmp	.+96     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 23:
			nokia_lcd_write_string("23", scale);
    1186:	6a 81       	ldd	r22, Y+2	; 0x02
    1188:	8f e4       	ldi	r24, 0x4F	; 79
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    1190:	2a c0       	rjmp	.+84     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 24:
			nokia_lcd_write_string("24", scale);
    1192:	6a 81       	ldd	r22, Y+2	; 0x02
    1194:	82 e5       	ldi	r24, 0x52	; 82
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    119c:	24 c0       	rjmp	.+72     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 25:
			nokia_lcd_write_string("25", scale);
    119e:	6a 81       	ldd	r22, Y+2	; 0x02
    11a0:	85 e5       	ldi	r24, 0x55	; 85
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 26:
			nokia_lcd_write_string("26", scale);
    11aa:	6a 81       	ldd	r22, Y+2	; 0x02
    11ac:	88 e5       	ldi	r24, 0x58	; 88
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11b4:	18 c0       	rjmp	.+48     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 27:
			nokia_lcd_write_string("27", scale);
    11b6:	6a 81       	ldd	r22, Y+2	; 0x02
    11b8:	8b e5       	ldi	r24, 0x5B	; 91
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 28:
			nokia_lcd_write_string("28", scale);
    11c2:	6a 81       	ldd	r22, Y+2	; 0x02
    11c4:	8e e5       	ldi	r24, 0x5E	; 94
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11cc:	0c c0       	rjmp	.+24     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 29:
			nokia_lcd_write_string("29", scale);
    11ce:	6a 81       	ldd	r22, Y+2	; 0x02
    11d0:	81 e6       	ldi	r24, 0x61	; 97
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <nokia_lcd_write_num+0x1ae>
			case 30:
			nokia_lcd_write_string("30", scale);
    11da:	6a 81       	ldd	r22, Y+2	; 0x02
    11dc:	84 e6       	ldi	r24, 0x64	; 100
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 f9 07 	call	0xff2	; 0xff2 <nokia_lcd_write_string>
			break;
    11e4:	00 00       	nop
		}
	}
	
}
    11e6:	00 00       	nop
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <nokia_lcd_set_cursor+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__data_end+0x1f8>
	nokia_lcd.cursor_y = y;
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <__data_end+0x1f9>
}
    120c:	00 00       	nop
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    1224:	80 e8       	ldi	r24, 0x80	; 128
    1226:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>
	write_cmd(0x40);
    122a:	80 e4       	ldi	r24, 0x40	; 64
    122c:	0e 94 28 05 	call	0xa50	; 0xa50 <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1230:	00 e0       	ldi	r16, 0x00	; 0
    1232:	10 e0       	ldi	r17, 0x00	; 0
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    1236:	c8 01       	movw	r24, r16
    1238:	88 59       	subi	r24, 0x98	; 152
    123a:	9e 4f       	sbci	r25, 0xFE	; 254
    123c:	fc 01       	movw	r30, r24
    123e:	80 81       	ld	r24, Z
    1240:	0e 94 37 05 	call	0xa6e	; 0xa6e <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    1244:	0f 5f       	subi	r16, 0xFF	; 255
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	08 3f       	cpi	r16, 0xF8	; 248
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	1f 07       	cpc	r17, r31
    124e:	98 f3       	brcs	.-26     	; 0x1236 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    1250:	00 00       	nop
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <__cmpsf2>:
    125c:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_cmp>
    1260:	08 f4       	brcc	.+2      	; 0x1264 <__cmpsf2+0x8>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	08 95       	ret

00001266 <__fixunssfsi>:
    1266:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_splitA>
    126a:	88 f0       	brcs	.+34     	; 0x128e <__fixunssfsi+0x28>
    126c:	9f 57       	subi	r25, 0x7F	; 127
    126e:	98 f0       	brcs	.+38     	; 0x1296 <__fixunssfsi+0x30>
    1270:	b9 2f       	mov	r27, r25
    1272:	99 27       	eor	r25, r25
    1274:	b7 51       	subi	r27, 0x17	; 23
    1276:	b0 f0       	brcs	.+44     	; 0x12a4 <__fixunssfsi+0x3e>
    1278:	e1 f0       	breq	.+56     	; 0x12b2 <__fixunssfsi+0x4c>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	88 1f       	adc	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	1a f0       	brmi	.+6      	; 0x128a <__fixunssfsi+0x24>
    1284:	ba 95       	dec	r27
    1286:	c9 f7       	brne	.-14     	; 0x127a <__fixunssfsi+0x14>
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <__fixunssfsi+0x4c>
    128a:	b1 30       	cpi	r27, 0x01	; 1
    128c:	91 f0       	breq	.+36     	; 0x12b2 <__fixunssfsi+0x4c>
    128e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__fp_zero>
    1292:	b1 e0       	ldi	r27, 0x01	; 1
    1294:	08 95       	ret
    1296:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_zero>
    129a:	67 2f       	mov	r22, r23
    129c:	78 2f       	mov	r23, r24
    129e:	88 27       	eor	r24, r24
    12a0:	b8 5f       	subi	r27, 0xF8	; 248
    12a2:	39 f0       	breq	.+14     	; 0x12b2 <__fixunssfsi+0x4c>
    12a4:	b9 3f       	cpi	r27, 0xF9	; 249
    12a6:	cc f3       	brlt	.-14     	; 0x129a <__fixunssfsi+0x34>
    12a8:	86 95       	lsr	r24
    12aa:	77 95       	ror	r23
    12ac:	67 95       	ror	r22
    12ae:	b3 95       	inc	r27
    12b0:	d9 f7       	brne	.-10     	; 0x12a8 <__fixunssfsi+0x42>
    12b2:	3e f4       	brtc	.+14     	; 0x12c2 <__fixunssfsi+0x5c>
    12b4:	90 95       	com	r25
    12b6:	80 95       	com	r24
    12b8:	70 95       	com	r23
    12ba:	61 95       	neg	r22
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	8f 4f       	sbci	r24, 0xFF	; 255
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	08 95       	ret

000012c4 <__floatunsisf>:
    12c4:	e8 94       	clt
    12c6:	09 c0       	rjmp	.+18     	; 0x12da <__floatsisf+0x12>

000012c8 <__floatsisf>:
    12c8:	97 fb       	bst	r25, 7
    12ca:	3e f4       	brtc	.+14     	; 0x12da <__floatsisf+0x12>
    12cc:	90 95       	com	r25
    12ce:	80 95       	com	r24
    12d0:	70 95       	com	r23
    12d2:	61 95       	neg	r22
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	99 23       	and	r25, r25
    12dc:	a9 f0       	breq	.+42     	; 0x1308 <__floatsisf+0x40>
    12de:	f9 2f       	mov	r31, r25
    12e0:	96 e9       	ldi	r25, 0x96	; 150
    12e2:	bb 27       	eor	r27, r27
    12e4:	93 95       	inc	r25
    12e6:	f6 95       	lsr	r31
    12e8:	87 95       	ror	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	b7 95       	ror	r27
    12f0:	f1 11       	cpse	r31, r1
    12f2:	f8 cf       	rjmp	.-16     	; 0x12e4 <__floatsisf+0x1c>
    12f4:	fa f4       	brpl	.+62     	; 0x1334 <__floatsisf+0x6c>
    12f6:	bb 0f       	add	r27, r27
    12f8:	11 f4       	brne	.+4      	; 0x12fe <__floatsisf+0x36>
    12fa:	60 ff       	sbrs	r22, 0
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <__floatsisf+0x6c>
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <__floatsisf+0x6c>
    1308:	88 23       	and	r24, r24
    130a:	11 f0       	breq	.+4      	; 0x1310 <__floatsisf+0x48>
    130c:	96 e9       	ldi	r25, 0x96	; 150
    130e:	11 c0       	rjmp	.+34     	; 0x1332 <__floatsisf+0x6a>
    1310:	77 23       	and	r23, r23
    1312:	21 f0       	breq	.+8      	; 0x131c <__floatsisf+0x54>
    1314:	9e e8       	ldi	r25, 0x8E	; 142
    1316:	87 2f       	mov	r24, r23
    1318:	76 2f       	mov	r23, r22
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <__floatsisf+0x5e>
    131c:	66 23       	and	r22, r22
    131e:	71 f0       	breq	.+28     	; 0x133c <__floatsisf+0x74>
    1320:	96 e8       	ldi	r25, 0x86	; 134
    1322:	86 2f       	mov	r24, r22
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	2a f0       	brmi	.+10     	; 0x1334 <__floatsisf+0x6c>
    132a:	9a 95       	dec	r25
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	da f7       	brpl	.-10     	; 0x132a <__floatsisf+0x62>
    1334:	88 0f       	add	r24, r24
    1336:	96 95       	lsr	r25
    1338:	87 95       	ror	r24
    133a:	97 f9       	bld	r25, 7
    133c:	08 95       	ret

0000133e <__fp_cmp>:
    133e:	99 0f       	add	r25, r25
    1340:	00 08       	sbc	r0, r0
    1342:	55 0f       	add	r21, r21
    1344:	aa 0b       	sbc	r26, r26
    1346:	e0 e8       	ldi	r30, 0x80	; 128
    1348:	fe ef       	ldi	r31, 0xFE	; 254
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	e8 07       	cpc	r30, r24
    1350:	f9 07       	cpc	r31, r25
    1352:	c0 f0       	brcs	.+48     	; 0x1384 <__fp_cmp+0x46>
    1354:	12 16       	cp	r1, r18
    1356:	13 06       	cpc	r1, r19
    1358:	e4 07       	cpc	r30, r20
    135a:	f5 07       	cpc	r31, r21
    135c:	98 f0       	brcs	.+38     	; 0x1384 <__fp_cmp+0x46>
    135e:	62 1b       	sub	r22, r18
    1360:	73 0b       	sbc	r23, r19
    1362:	84 0b       	sbc	r24, r20
    1364:	95 0b       	sbc	r25, r21
    1366:	39 f4       	brne	.+14     	; 0x1376 <__fp_cmp+0x38>
    1368:	0a 26       	eor	r0, r26
    136a:	61 f0       	breq	.+24     	; 0x1384 <__fp_cmp+0x46>
    136c:	23 2b       	or	r18, r19
    136e:	24 2b       	or	r18, r20
    1370:	25 2b       	or	r18, r21
    1372:	21 f4       	brne	.+8      	; 0x137c <__fp_cmp+0x3e>
    1374:	08 95       	ret
    1376:	0a 26       	eor	r0, r26
    1378:	09 f4       	brne	.+2      	; 0x137c <__fp_cmp+0x3e>
    137a:	a1 40       	sbci	r26, 0x01	; 1
    137c:	a6 95       	lsr	r26
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	81 1d       	adc	r24, r1
    1382:	81 1d       	adc	r24, r1
    1384:	08 95       	ret

00001386 <__fp_split3>:
    1386:	57 fd       	sbrc	r21, 7
    1388:	90 58       	subi	r25, 0x80	; 128
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	59 f0       	breq	.+22     	; 0x13a6 <__fp_splitA+0x10>
    1390:	5f 3f       	cpi	r21, 0xFF	; 255
    1392:	71 f0       	breq	.+28     	; 0x13b0 <__fp_splitA+0x1a>
    1394:	47 95       	ror	r20

00001396 <__fp_splitA>:
    1396:	88 0f       	add	r24, r24
    1398:	97 fb       	bst	r25, 7
    139a:	99 1f       	adc	r25, r25
    139c:	61 f0       	breq	.+24     	; 0x13b6 <__fp_splitA+0x20>
    139e:	9f 3f       	cpi	r25, 0xFF	; 255
    13a0:	79 f0       	breq	.+30     	; 0x13c0 <__fp_splitA+0x2a>
    13a2:	87 95       	ror	r24
    13a4:	08 95       	ret
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	f2 cf       	rjmp	.-28     	; 0x1394 <__fp_split3+0xe>
    13b0:	46 95       	lsr	r20
    13b2:	f1 df       	rcall	.-30     	; 0x1396 <__fp_splitA>
    13b4:	08 c0       	rjmp	.+16     	; 0x13c6 <__fp_splitA+0x30>
    13b6:	16 16       	cp	r1, r22
    13b8:	17 06       	cpc	r1, r23
    13ba:	18 06       	cpc	r1, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	f1 cf       	rjmp	.-30     	; 0x13a2 <__fp_splitA+0xc>
    13c0:	86 95       	lsr	r24
    13c2:	71 05       	cpc	r23, r1
    13c4:	61 05       	cpc	r22, r1
    13c6:	08 94       	sec
    13c8:	08 95       	ret

000013ca <__fp_zero>:
    13ca:	e8 94       	clt

000013cc <__fp_szero>:
    13cc:	bb 27       	eor	r27, r27
    13ce:	66 27       	eor	r22, r22
    13d0:	77 27       	eor	r23, r23
    13d2:	cb 01       	movw	r24, r22
    13d4:	97 f9       	bld	r25, 7
    13d6:	08 95       	ret

000013d8 <__gesf2>:
    13d8:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_cmp>
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <__gesf2+0x8>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <__mulsf3>:
    13e2:	0e 94 04 0a 	call	0x1408	; 0x1408 <__mulsf3x>
    13e6:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__fp_round>
    13ea:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fp_pscA>
    13ee:	38 f0       	brcs	.+14     	; 0x13fe <__mulsf3+0x1c>
    13f0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__fp_pscB>
    13f4:	20 f0       	brcs	.+8      	; 0x13fe <__mulsf3+0x1c>
    13f6:	95 23       	and	r25, r21
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1c>
    13fa:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    13fe:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_nan>
    1402:	11 24       	eor	r1, r1
    1404:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_szero>

00001408 <__mulsf3x>:
    1408:	0e 94 c3 09 	call	0x1386	; 0x1386 <__fp_split3>
    140c:	70 f3       	brcs	.-36     	; 0x13ea <__mulsf3+0x8>

0000140e <__mulsf3_pse>:
    140e:	95 9f       	mul	r25, r21
    1410:	c1 f3       	breq	.-16     	; 0x1402 <__mulsf3+0x20>
    1412:	95 0f       	add	r25, r21
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	55 1f       	adc	r21, r21
    1418:	62 9f       	mul	r22, r18
    141a:	f0 01       	movw	r30, r0
    141c:	72 9f       	mul	r23, r18
    141e:	bb 27       	eor	r27, r27
    1420:	f0 0d       	add	r31, r0
    1422:	b1 1d       	adc	r27, r1
    1424:	63 9f       	mul	r22, r19
    1426:	aa 27       	eor	r26, r26
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	aa 1f       	adc	r26, r26
    142e:	64 9f       	mul	r22, r20
    1430:	66 27       	eor	r22, r22
    1432:	b0 0d       	add	r27, r0
    1434:	a1 1d       	adc	r26, r1
    1436:	66 1f       	adc	r22, r22
    1438:	82 9f       	mul	r24, r18
    143a:	22 27       	eor	r18, r18
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	62 1f       	adc	r22, r18
    1442:	73 9f       	mul	r23, r19
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	83 9f       	mul	r24, r19
    144c:	a0 0d       	add	r26, r0
    144e:	61 1d       	adc	r22, r1
    1450:	22 1f       	adc	r18, r18
    1452:	74 9f       	mul	r23, r20
    1454:	33 27       	eor	r19, r19
    1456:	a0 0d       	add	r26, r0
    1458:	61 1d       	adc	r22, r1
    145a:	23 1f       	adc	r18, r19
    145c:	84 9f       	mul	r24, r20
    145e:	60 0d       	add	r22, r0
    1460:	21 1d       	adc	r18, r1
    1462:	82 2f       	mov	r24, r18
    1464:	76 2f       	mov	r23, r22
    1466:	6a 2f       	mov	r22, r26
    1468:	11 24       	eor	r1, r1
    146a:	9f 57       	subi	r25, 0x7F	; 127
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	9a f0       	brmi	.+38     	; 0x1496 <__mulsf3_pse+0x88>
    1470:	f1 f0       	breq	.+60     	; 0x14ae <__mulsf3_pse+0xa0>
    1472:	88 23       	and	r24, r24
    1474:	4a f0       	brmi	.+18     	; 0x1488 <__mulsf3_pse+0x7a>
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	bb 1f       	adc	r27, r27
    147c:	66 1f       	adc	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	91 50       	subi	r25, 0x01	; 1
    1484:	50 40       	sbci	r21, 0x00	; 0
    1486:	a9 f7       	brne	.-22     	; 0x1472 <__mulsf3_pse+0x64>
    1488:	9e 3f       	cpi	r25, 0xFE	; 254
    148a:	51 05       	cpc	r21, r1
    148c:	80 f0       	brcs	.+32     	; 0x14ae <__mulsf3_pse+0xa0>
    148e:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__fp_inf>
    1492:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_szero>
    1496:	5f 3f       	cpi	r21, 0xFF	; 255
    1498:	e4 f3       	brlt	.-8      	; 0x1492 <__mulsf3_pse+0x84>
    149a:	98 3e       	cpi	r25, 0xE8	; 232
    149c:	d4 f3       	brlt	.-12     	; 0x1492 <__mulsf3_pse+0x84>
    149e:	86 95       	lsr	r24
    14a0:	77 95       	ror	r23
    14a2:	67 95       	ror	r22
    14a4:	b7 95       	ror	r27
    14a6:	f7 95       	ror	r31
    14a8:	e7 95       	ror	r30
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	c1 f7       	brne	.-16     	; 0x149e <__mulsf3_pse+0x90>
    14ae:	fe 2b       	or	r31, r30
    14b0:	88 0f       	add	r24, r24
    14b2:	91 1d       	adc	r25, r1
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	97 f9       	bld	r25, 7
    14ba:	08 95       	ret

000014bc <__fp_inf>:
    14bc:	97 f9       	bld	r25, 7
    14be:	9f 67       	ori	r25, 0x7F	; 127
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <__fp_nan>:
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	80 ec       	ldi	r24, 0xC0	; 192
    14cc:	08 95       	ret

000014ce <__fp_pscA>:
    14ce:	00 24       	eor	r0, r0
    14d0:	0a 94       	dec	r0
    14d2:	16 16       	cp	r1, r22
    14d4:	17 06       	cpc	r1, r23
    14d6:	18 06       	cpc	r1, r24
    14d8:	09 06       	cpc	r0, r25
    14da:	08 95       	ret

000014dc <__fp_pscB>:
    14dc:	00 24       	eor	r0, r0
    14de:	0a 94       	dec	r0
    14e0:	12 16       	cp	r1, r18
    14e2:	13 06       	cpc	r1, r19
    14e4:	14 06       	cpc	r1, r20
    14e6:	05 06       	cpc	r0, r21
    14e8:	08 95       	ret

000014ea <__fp_round>:
    14ea:	09 2e       	mov	r0, r25
    14ec:	03 94       	inc	r0
    14ee:	00 0c       	add	r0, r0
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__fp_round+0xc>
    14f2:	88 23       	and	r24, r24
    14f4:	52 f0       	brmi	.+20     	; 0x150a <__fp_round+0x20>
    14f6:	bb 0f       	add	r27, r27
    14f8:	40 f4       	brcc	.+16     	; 0x150a <__fp_round+0x20>
    14fa:	bf 2b       	or	r27, r31
    14fc:	11 f4       	brne	.+4      	; 0x1502 <__fp_round+0x18>
    14fe:	60 ff       	sbrs	r22, 0
    1500:	04 c0       	rjmp	.+8      	; 0x150a <__fp_round+0x20>
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	08 95       	ret

0000150c <__udivmodqi4>:
    150c:	99 1b       	sub	r25, r25
    150e:	79 e0       	ldi	r23, 0x09	; 9
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__udivmodqi4_ep>

00001512 <__udivmodqi4_loop>:
    1512:	99 1f       	adc	r25, r25
    1514:	96 17       	cp	r25, r22
    1516:	08 f0       	brcs	.+2      	; 0x151a <__udivmodqi4_ep>
    1518:	96 1b       	sub	r25, r22

0000151a <__udivmodqi4_ep>:
    151a:	88 1f       	adc	r24, r24
    151c:	7a 95       	dec	r23
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__udivmodqi4_loop>
    1520:	80 95       	com	r24
    1522:	08 95       	ret

00001524 <__divmodsi4>:
    1524:	05 2e       	mov	r0, r21
    1526:	97 fb       	bst	r25, 7
    1528:	1e f4       	brtc	.+6      	; 0x1530 <__divmodsi4+0xc>
    152a:	00 94       	com	r0
    152c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__negsi2>
    1530:	57 fd       	sbrc	r21, 7
    1532:	07 d0       	rcall	.+14     	; 0x1542 <__divmodsi4_neg2>
    1534:	0e 94 b7 0a 	call	0x156e	; 0x156e <__udivmodsi4>
    1538:	07 fc       	sbrc	r0, 7
    153a:	03 d0       	rcall	.+6      	; 0x1542 <__divmodsi4_neg2>
    153c:	4e f4       	brtc	.+18     	; 0x1550 <__divmodsi4_exit>
    153e:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__negsi2>

00001542 <__divmodsi4_neg2>:
    1542:	50 95       	com	r21
    1544:	40 95       	com	r20
    1546:	30 95       	com	r19
    1548:	21 95       	neg	r18
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	4f 4f       	sbci	r20, 0xFF	; 255
    154e:	5f 4f       	sbci	r21, 0xFF	; 255

00001550 <__divmodsi4_exit>:
    1550:	08 95       	ret

00001552 <__negsi2>:
    1552:	90 95       	com	r25
    1554:	80 95       	com	r24
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	8f 4f       	sbci	r24, 0xFF	; 255
    155e:	9f 4f       	sbci	r25, 0xFF	; 255
    1560:	08 95       	ret

00001562 <__tablejump2__>:
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	05 90       	lpm	r0, Z+
    1568:	f4 91       	lpm	r31, Z
    156a:	e0 2d       	mov	r30, r0
    156c:	09 94       	ijmp

0000156e <__udivmodsi4>:
    156e:	a1 e2       	ldi	r26, 0x21	; 33
    1570:	1a 2e       	mov	r1, r26
    1572:	aa 1b       	sub	r26, r26
    1574:	bb 1b       	sub	r27, r27
    1576:	fd 01       	movw	r30, r26
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <__udivmodsi4_ep>

0000157a <__udivmodsi4_loop>:
    157a:	aa 1f       	adc	r26, r26
    157c:	bb 1f       	adc	r27, r27
    157e:	ee 1f       	adc	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	a2 17       	cp	r26, r18
    1584:	b3 07       	cpc	r27, r19
    1586:	e4 07       	cpc	r30, r20
    1588:	f5 07       	cpc	r31, r21
    158a:	20 f0       	brcs	.+8      	; 0x1594 <__udivmodsi4_ep>
    158c:	a2 1b       	sub	r26, r18
    158e:	b3 0b       	sbc	r27, r19
    1590:	e4 0b       	sbc	r30, r20
    1592:	f5 0b       	sbc	r31, r21

00001594 <__udivmodsi4_ep>:
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	1a 94       	dec	r1
    159e:	69 f7       	brne	.-38     	; 0x157a <__udivmodsi4_loop>
    15a0:	60 95       	com	r22
    15a2:	70 95       	com	r23
    15a4:	80 95       	com	r24
    15a6:	90 95       	com	r25
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	bd 01       	movw	r22, r26
    15ae:	cf 01       	movw	r24, r30
    15b0:	08 95       	ret

000015b2 <_exit>:
    15b2:	f8 94       	cli

000015b4 <__stop_program>:
    15b4:	ff cf       	rjmp	.-2      	; 0x15b4 <__stop_program>
